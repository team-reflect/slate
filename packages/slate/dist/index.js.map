{"version":3,"file":"index.js","sources":["../../../node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","../../../node_modules/@babel/runtime/helpers/iterableToArray.js","../../../node_modules/@babel/runtime/helpers/nonIterableSpread.js","../../../node_modules/@babel/runtime/helpers/toConsumableArray.js","../../../node_modules/@babel/runtime/helpers/arrayWithHoles.js","../../../node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","../../../node_modules/@babel/runtime/helpers/nonIterableRest.js","../../../node_modules/@babel/runtime/helpers/slicedToArray.js","../../../node_modules/@babel/runtime/helpers/defineProperty.js","../src/utils/weak-maps.ts","../src/create-editor.ts","../../../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js","../src/utils/string.ts","../src/interfaces/editor.ts","../src/interfaces/element.ts","../src/interfaces/location.ts","../src/interfaces/node.ts","../src/interfaces/operation.ts","../src/interfaces/path.ts","../src/interfaces/path-ref.ts","../src/interfaces/point.ts","../src/interfaces/point-ref.ts","../src/interfaces/range.ts","../src/interfaces/range-ref.ts","../src/interfaces/text.ts","../src/transforms/general.ts","../src/transforms/node.ts","../src/transforms/selection.ts","../src/transforms/text.ts","../src/transforms/index.ts"],"sourcesContent":["function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nmodule.exports = _nonIterableRest;","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","import { Editor, Path, PathRef, PointRef, RangeRef } from '..'\n\nexport const DIRTY_PATHS: WeakMap<Editor, Path[]> = new WeakMap()\nexport const FLUSHING: WeakMap<Editor, boolean> = new WeakMap()\nexport const NORMALIZING: WeakMap<Editor, boolean> = new WeakMap()\nexport const PATH_REFS: WeakMap<Editor, Set<PathRef>> = new WeakMap()\nexport const POINT_REFS: WeakMap<Editor, Set<PointRef>> = new WeakMap()\nexport const RANGE_REFS: WeakMap<Editor, Set<RangeRef>> = new WeakMap()\n","import {\n  Descendant,\n  Editor,\n  Element,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  PointRef,\n  Range,\n  RangeRef,\n  Text,\n  Transforms,\n} from './'\nimport { DIRTY_PATHS, FLUSHING } from './utils/weak-maps'\n\n/**\n * Create a new Slate `Editor` object.\n */\n\nexport const createEditor = (): Editor => {\n  const editor: Editor = {\n    children: [],\n    operations: [],\n    selection: null,\n    marks: null,\n    isInline: () => false,\n    isVoid: () => false,\n    onChange: () => {},\n\n    apply: (op: Operation) => {\n      for (const ref of Editor.pathRefs(editor)) {\n        PathRef.transform(ref, op)\n      }\n\n      for (const ref of Editor.pointRefs(editor)) {\n        PointRef.transform(ref, op)\n      }\n\n      for (const ref of Editor.rangeRefs(editor)) {\n        RangeRef.transform(ref, op)\n      }\n\n      const set = new Set()\n      const dirtyPaths: Path[] = []\n\n      const add = (path: Path | null) => {\n        if (path) {\n          const key = path.join(',')\n\n          if (!set.has(key)) {\n            set.add(key)\n            dirtyPaths.push(path)\n          }\n        }\n      }\n\n      const oldDirtyPaths = DIRTY_PATHS.get(editor) || []\n      const newDirtyPaths = getDirtyPaths(op)\n\n      for (const path of oldDirtyPaths) {\n        const newPath = Path.transform(path, op)\n        add(newPath)\n      }\n\n      for (const path of newDirtyPaths) {\n        add(path)\n      }\n\n      DIRTY_PATHS.set(editor, dirtyPaths)\n      Transforms.transform(editor, op)\n      editor.operations.push(op)\n      Editor.normalize(editor)\n\n      // Clear any formats applied to the cursor if the selection changes.\n      if (op.type === 'set_selection') {\n        editor.marks = null\n      }\n\n      if (!FLUSHING.get(editor)) {\n        FLUSHING.set(editor, true)\n\n        Promise.resolve().then(() => {\n          FLUSHING.set(editor, false)\n          editor.onChange()\n          editor.operations = []\n        })\n      }\n    },\n\n    addMark: (key: string, value: any) => {\n      const { selection } = editor\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.setNodes(\n            editor,\n            { [key]: value },\n            { match: Text.isText, split: true }\n          )\n        } else {\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            [key]: value,\n          }\n\n          editor.marks = marks\n          editor.onChange()\n        }\n      }\n    },\n\n    deleteBackward: (unit: 'character' | 'word' | 'line' | 'block') => {\n      const { selection } = editor\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, { unit, reverse: true })\n      }\n    },\n\n    deleteForward: (unit: 'character' | 'word' | 'line' | 'block') => {\n      const { selection } = editor\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, { unit })\n      }\n    },\n\n    deleteFragment: () => {\n      const { selection } = editor\n\n      if (selection && Range.isExpanded(selection)) {\n        Transforms.delete(editor)\n      }\n    },\n\n    getFragment: () => {\n      const { selection } = editor\n\n      if (selection) {\n        return Node.fragment(editor, selection)\n      }\n      return []\n    },\n\n    insertBreak: () => {\n      Transforms.splitNodes(editor, { always: true })\n    },\n\n    insertFragment: (fragment: Node[]) => {\n      Transforms.insertFragment(editor, fragment)\n    },\n\n    insertNode: (node: Node) => {\n      Transforms.insertNodes(editor, node)\n    },\n\n    insertText: (text: string) => {\n      const { selection, marks } = editor\n\n      if (selection) {\n        // If the cursor is at the end of an inline, move it outside of\n        // the inline before inserting\n        if (Range.isCollapsed(selection)) {\n          const inline = Editor.above(editor, {\n            match: n => Editor.isInline(editor, n),\n            mode: 'highest',\n          })\n\n          if (inline) {\n            const [, inlinePath] = inline\n\n            if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n              const point = Editor.after(editor, inlinePath)!\n              Transforms.setSelection(editor, {\n                anchor: point,\n                focus: point,\n              })\n            }\n          }\n        }\n\n        if (marks) {\n          const node = { text, ...marks }\n          Transforms.insertNodes(editor, node)\n        } else {\n          Transforms.insertText(editor, text)\n        }\n\n        editor.marks = null\n      }\n    },\n\n    normalizeNode: (entry: NodeEntry) => {\n      const [node, path] = entry\n\n      // There are no core normalizations for text nodes.\n      if (Text.isText(node)) {\n        return\n      }\n\n      // Ensure that block and inline nodes have at least one text child.\n      if (Element.isElement(node) && node.children.length === 0) {\n        const child = { text: '' }\n        Transforms.insertNodes(editor, child, {\n          at: path.concat(0),\n          voids: true,\n        })\n        return\n      }\n\n      // Determine whether the node should have block or inline children.\n      const shouldHaveInlines = Editor.isEditor(node)\n        ? false\n        : Element.isElement(node) &&\n          (editor.isInline(node) ||\n            node.children.length === 0 ||\n            Text.isText(node.children[0]) ||\n            editor.isInline(node.children[0]))\n\n      // Since we'll be applying operations while iterating, keep track of an\n      // index that accounts for any added/removed nodes.\n      let n = 0\n\n      for (let i = 0; i < node.children.length; i++, n++) {\n        const child = node.children[i] as Descendant\n        const prev = node.children[i - 1] as Descendant\n        const isLast = i === node.children.length - 1\n        const isInlineOrText =\n          Text.isText(child) ||\n          (Element.isElement(child) && editor.isInline(child))\n\n        // Only allow block nodes in the top-level children and parent blocks\n        // that only contain block nodes. Similarly, only allow inline nodes in\n        // other inline nodes, or parent blocks that only contain inlines and\n        // text.\n        if (isInlineOrText !== shouldHaveInlines) {\n          Transforms.removeNodes(editor, { at: path.concat(n), voids: true })\n          n--\n        } else if (Element.isElement(child)) {\n          // Ensure that inline nodes are surrounded by text nodes.\n          if (editor.isInline(child)) {\n            if (prev == null || !Text.isText(prev)) {\n              const newChild = { text: '' }\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n),\n                voids: true,\n              })\n              n++\n            } else if (isLast) {\n              const newChild = { text: '' }\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n + 1),\n                voids: true,\n              })\n              n++\n            }\n          }\n        } else {\n          // Merge adjacent text nodes that are empty or match.\n          if (prev != null && Text.isText(prev)) {\n            if (Text.equals(child, prev, { loose: true })) {\n              Transforms.mergeNodes(editor, { at: path.concat(n), voids: true })\n              n--\n            } else if (prev.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n - 1),\n                voids: true,\n              })\n              n--\n            } else if (isLast && child.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n),\n                voids: true,\n              })\n              n--\n            }\n          }\n        }\n      }\n    },\n\n    removeMark: (key: string) => {\n      const { selection } = editor\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.unsetNodes(editor, key, {\n            match: Text.isText,\n            split: true,\n          })\n        } else {\n          const marks = { ...(Editor.marks(editor) || {}) }\n          delete marks[key]\n          editor.marks = marks\n          editor.onChange()\n        }\n      }\n    },\n  }\n\n  return editor\n}\n\n/**\n * Get the \"dirty\" paths generated from an operation.\n */\n\nconst getDirtyPaths = (op: Operation) => {\n  switch (op.type) {\n    case 'insert_text':\n    case 'remove_text':\n    case 'set_node': {\n      const { path } = op\n      return Path.levels(path)\n    }\n\n    case 'insert_node': {\n      const { node, path } = op\n      const levels = Path.levels(path)\n      const descendants = Text.isText(node)\n        ? []\n        : Array.from(Node.nodes(node), ([, p]) => path.concat(p))\n\n      return [...levels, ...descendants]\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      const previousPath = Path.previous(path)\n      return [...ancestors, previousPath]\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n\n      if (Path.equals(path, newPath)) {\n        return []\n      }\n\n      const oldAncestors: Path[] = []\n      const newAncestors: Path[] = []\n\n      for (const ancestor of Path.ancestors(path)) {\n        const p = Path.transform(ancestor, op)\n        oldAncestors.push(p!)\n      }\n\n      for (const ancestor of Path.ancestors(newPath)) {\n        const p = Path.transform(ancestor, op)\n        newAncestors.push(p!)\n      }\n\n      return [...oldAncestors, ...newAncestors]\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      return [...ancestors]\n    }\n\n    case 'split_node': {\n      const { path } = op\n      const levels = Path.levels(path)\n      const nextPath = Path.next(path)\n      return [...levels, nextPath]\n    }\n\n    default: {\n      return []\n    }\n  }\n}\n","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","var objectWithoutPropertiesLoose = require(\"./objectWithoutPropertiesLoose\");\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutProperties;","/**\n * Constants for string distance checking.\n */\n\nconst SPACE = /\\s/\nconst PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\nconst CHAMELEON = /['\\u2018\\u2019]/\nconst SURROGATE_START = 0xd800\nconst SURROGATE_END = 0xdfff\nconst ZERO_WIDTH_JOINER = 0x200d\n\n/**\n * Get the distance to the end of the first character in a string of text.\n */\n\nexport const getCharacterDistance = (text: string): number => {\n  let offset = 0\n  // prev types:\n  // SURR: surrogate pair\n  // MOD: modifier (technically also surrogate pair)\n  // ZWJ: zero width joiner\n  // VAR: variation selector\n  // BMP: sequenceable character from basic multilingual plane\n  let prev: 'SURR' | 'MOD' | 'ZWJ' | 'VAR' | 'BMP' | null = null\n  let charCode = text.charCodeAt(0)\n\n  while (charCode) {\n    if (isSurrogate(charCode)) {\n      const modifier = isModifier(charCode, text, offset)\n\n      // Early returns are the heart of this function, where we decide if previous and current\n      // codepoints should form a single character (in terms of how many of them should selection\n      // jump over).\n      if (prev === 'SURR' || prev === 'BMP') {\n        break\n      }\n\n      offset += 2\n      prev = modifier ? 'MOD' : 'SURR'\n      charCode = text.charCodeAt(offset)\n      // Absolutely fine to `continue` without any checks because if `charCode` is NaN (which\n      // is the case when out of `text` range), next `while` loop won\"t execute and we\"re done.\n      continue\n    }\n\n    if (charCode === ZERO_WIDTH_JOINER) {\n      offset += 1\n      prev = 'ZWJ'\n      charCode = text.charCodeAt(offset)\n\n      continue\n    }\n\n    if (isBMPEmoji(charCode)) {\n      if (prev && prev !== 'ZWJ' && prev !== 'VAR') {\n        break\n      }\n      offset += 1\n      prev = 'BMP'\n      charCode = text.charCodeAt(offset)\n\n      continue\n    }\n\n    if (isVariationSelector(charCode)) {\n      if (prev && prev !== 'ZWJ') {\n        break\n      }\n      offset += 1\n      prev = 'VAR'\n      charCode = text.charCodeAt(offset)\n      continue\n    }\n\n    // Modifier 'groups up' with what ever character is before that (even whitespace), need to\n    // look ahead.\n    if (prev === 'MOD') {\n      offset += 1\n      break\n    }\n\n    // If while loop ever gets here, we're done (e.g latin chars).\n    break\n  }\n\n  return offset || 1\n}\n\n/**\n * Get the distance to the end of the first word in a string of text.\n */\n\nexport const getWordDistance = (text: string): number => {\n  let length = 0\n  let i = 0\n  let started = false\n  let char\n\n  while ((char = text.charAt(i))) {\n    const l = getCharacterDistance(char)\n    char = text.slice(i, i + l)\n    const rest = text.slice(i + l)\n\n    if (isWordCharacter(char, rest)) {\n      started = true\n      length += l\n    } else if (!started) {\n      length += l\n    } else {\n      break\n    }\n\n    i += l\n  }\n\n  return length\n}\n\n/**\n * Check if a character is a word character. The `remaining` argument is used\n * because sometimes you must read subsequent characters to truly determine it.\n */\n\nconst isWordCharacter = (char: string, remaining: string): boolean => {\n  if (SPACE.test(char)) {\n    return false\n  }\n\n  // Chameleons count as word characters as long as they're in a word, so\n  // recurse to see if the next one is a word character or not.\n  if (CHAMELEON.test(char)) {\n    let next = remaining.charAt(0)\n    const length = getCharacterDistance(next)\n    next = remaining.slice(0, length)\n    const rest = remaining.slice(length)\n\n    if (isWordCharacter(next, rest)) {\n      return true\n    }\n  }\n\n  if (PUNCTUATION.test(char)) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Determines if `code` is a surrogate\n */\n\nconst isSurrogate = (code: number): boolean =>\n  SURROGATE_START <= code && code <= SURROGATE_END\n\n/**\n * Does `code` form Modifier with next one.\n *\n * https://emojipedia.org/modifiers/\n */\n\nconst isModifier = (code: number, text: string, offset: number): boolean => {\n  if (code === 0xd83c) {\n    const next = text.charCodeAt(offset + 1)\n    return next <= 0xdfff && next >= 0xdffb\n  }\n  return false\n}\n\n/**\n * Is `code` a Variation Selector.\n *\n * https://codepoints.net/variation_selectors\n */\n\nconst isVariationSelector = (code: number): boolean => {\n  return code <= 0xfe0f && code >= 0xfe00\n}\n\n/**\n * Is `code` one of the BMP codes used in emoji sequences.\n *\n * https://emojipedia.org/emoji-zwj-sequences/\n */\n\nconst isBMPEmoji = (code: number): boolean => {\n  // This requires tiny bit of maintanance, better ideas?\n  // Fortunately it only happens if new Unicode Standard\n  // is released. Fails gracefully if upkeep lags behind,\n  // same way Slate previously behaved with all emojis.\n  return (\n    code === 0x2764 || // heart (❤)\n    code === 0x2642 || // male (♂)\n    code === 0x2640 || // female (♀)\n    code === 0x2620 || // scull (☠)\n    code === 0x2695 || // medical (⚕)\n    code === 0x2708 || // plane (✈️)\n    code === 0x25ef // large circle (◯)\n  )\n}\n","import isPlainObject from 'is-plain-object'\nimport { createDraft, finishDraft, isDraft } from 'immer'\nimport { reverse as reverseText } from 'esrever'\n\nimport {\n  Ancestor,\n  Descendant,\n  Element,\n  Location,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  Point,\n  PointRef,\n  Range,\n  RangeRef,\n  Span,\n  Text,\n} from '..'\nimport {\n  DIRTY_PATHS,\n  NORMALIZING,\n  PATH_REFS,\n  POINT_REFS,\n  RANGE_REFS,\n} from '../utils/weak-maps'\nimport { getWordDistance, getCharacterDistance } from '../utils/string'\n\n/**\n * The `Editor` interface stores all the state of a Slate editor. It is extended\n * by plugins that wish to add their own helpers and implement new behaviors.\n */\n\nexport interface Editor {\n  children: Node[]\n  selection: Range | null\n  operations: Operation[]\n  marks: Record<string, any> | null\n  [key: string]: unknown\n\n  // Schema-specific node behaviors.\n  isInline: (element: Element) => boolean\n  isVoid: (element: Element) => boolean\n  normalizeNode: (entry: NodeEntry) => void\n  onChange: () => void\n\n  // Overrideable core actions.\n  addMark: (key: string, value: any) => void\n  apply: (operation: Operation) => void\n  deleteBackward: (unit: 'character' | 'word' | 'line' | 'block') => void\n  deleteForward: (unit: 'character' | 'word' | 'line' | 'block') => void\n  deleteFragment: () => void\n  getFragment: () => Descendant[]\n  insertBreak: () => void\n  insertFragment: (fragment: Node[]) => void\n  insertNode: (node: Node) => void\n  insertText: (text: string) => void\n  removeMark: (key: string) => void\n}\n\nexport const Editor = {\n  /**\n   * Get the ancestor above a location in the document.\n   */\n\n  above<T extends Ancestor>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const {\n      voids = false,\n      mode = 'lowest',\n      at = editor.selection,\n      match,\n    } = options\n\n    if (!at) {\n      return\n    }\n\n    const path = Editor.path(editor, at)\n    const reverse = mode === 'lowest'\n\n    for (const [n, p] of Editor.levels(editor, {\n      at: path,\n      voids,\n      match,\n      reverse,\n    })) {\n      if (!Text.isText(n) && !Path.equals(path, p)) {\n        return [n, p]\n      }\n    }\n  },\n\n  /**\n   * Add a custom property to the leaf text nodes in the current selection.\n   *\n   * If the selection is currently collapsed, the marks will be added to the\n   * `editor.marks` property instead, and applied when text is inserted next.\n   */\n\n  addMark(editor: Editor, key: string, value: any): void {\n    editor.addMark(key, value)\n  },\n\n  /**\n   * Get the point after a location.\n   */\n\n  after(\n    editor: Editor,\n    at: Location,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): Point | undefined {\n    const anchor = Editor.point(editor, at, { edge: 'end' })\n    const focus = Editor.end(editor, [])\n    const range = { anchor, focus }\n    const { distance = 1 } = options\n    let d = 0\n    let target\n\n    for (const p of Editor.positions(editor, { ...options, at: range })) {\n      if (d > distance) {\n        break\n      }\n\n      if (d !== 0) {\n        target = p\n      }\n\n      d++\n    }\n\n    return target\n  },\n\n  /**\n   * Get the point before a location.\n   */\n\n  before(\n    editor: Editor,\n    at: Location,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): Point | undefined {\n    const anchor = Editor.start(editor, [])\n    const focus = Editor.point(editor, at, { edge: 'start' })\n    const range = { anchor, focus }\n    const { distance = 1 } = options\n    let d = 0\n    let target\n\n    for (const p of Editor.positions(editor, {\n      ...options,\n      at: range,\n      reverse: true,\n    })) {\n      if (d > distance) {\n        break\n      }\n\n      if (d !== 0) {\n        target = p\n      }\n\n      d++\n    }\n\n    return target\n  },\n\n  /**\n   * Delete content in the editor backward from the current selection.\n   */\n\n  deleteBackward(\n    editor: Editor,\n    options: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): void {\n    const { unit = 'character' } = options\n    editor.deleteBackward(unit)\n  },\n\n  /**\n   * Delete content in the editor forward from the current selection.\n   */\n\n  deleteForward(\n    editor: Editor,\n    options: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): void {\n    const { unit = 'character' } = options\n    editor.deleteForward(unit)\n  },\n\n  /**\n   * Delete the content in the current selection.\n   */\n\n  deleteFragment(editor: Editor): void {\n    editor.deleteFragment()\n  },\n\n  /**\n   * Get the start and end points of a location.\n   */\n\n  edges(editor: Editor, at: Location): [Point, Point] {\n    return [Editor.start(editor, at), Editor.end(editor, at)]\n  },\n\n  /**\n   * Get the end point of a location.\n   */\n\n  end(editor: Editor, at: Location): Point {\n    return Editor.point(editor, at, { edge: 'end' })\n  },\n\n  /**\n   * Get the first node at a location.\n   */\n\n  first(editor: Editor, at: Location): NodeEntry {\n    const path = Editor.path(editor, at, { edge: 'start' })\n    return Editor.node(editor, path)\n  },\n\n  /**\n   * Get the fragment at a location.\n   */\n\n  fragment(editor: Editor, at: Location): Descendant[] {\n    const range = Editor.range(editor, at)\n    const fragment = Node.fragment(editor, range)\n    return fragment\n  },\n  /**\n   * Check if a node has block children.\n   */\n\n  hasBlocks(editor: Editor, element: Element): boolean {\n    return element.children.some(n => Editor.isBlock(editor, n))\n  },\n\n  /**\n   * Check if a node has inline and text children.\n   */\n\n  hasInlines(editor: Editor, element: Element): boolean {\n    return element.children.some(\n      n => Text.isText(n) || Editor.isInline(editor, n)\n    )\n  },\n\n  /**\n   * Check if a node has text children.\n   */\n\n  hasTexts(editor: Editor, element: Element): boolean {\n    return element.children.every(n => Text.isText(n))\n  },\n\n  /**\n   * Insert a block break at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertBreak(editor: Editor): void {\n    editor.insertBreak()\n  },\n\n  /**\n   * Insert a fragment at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertFragment(editor: Editor, fragment: Node[]): void {\n    editor.insertFragment(fragment)\n  },\n\n  /**\n   * Insert a node at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertNode(editor: Editor, node: Node): void {\n    editor.insertNode(node)\n  },\n\n  /**\n   * Insert text at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertText(editor: Editor, text: string): void {\n    editor.insertText(text)\n  },\n\n  /**\n   * Check if a value is a block `Element` object.\n   */\n\n  isBlock(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && !editor.isInline(value)\n  },\n\n  /**\n   * Check if a value is an `Editor` object.\n   */\n\n  isEditor(value: any): value is Editor {\n    return (\n      isPlainObject(value) &&\n      typeof value.addMark === 'function' &&\n      typeof value.apply === 'function' &&\n      typeof value.deleteBackward === 'function' &&\n      typeof value.deleteForward === 'function' &&\n      typeof value.deleteFragment === 'function' &&\n      typeof value.insertBreak === 'function' &&\n      typeof value.insertFragment === 'function' &&\n      typeof value.insertNode === 'function' &&\n      typeof value.insertText === 'function' &&\n      typeof value.isInline === 'function' &&\n      typeof value.isVoid === 'function' &&\n      typeof value.normalizeNode === 'function' &&\n      typeof value.onChange === 'function' &&\n      typeof value.removeMark === 'function' &&\n      (value.marks === null || isPlainObject(value.marks)) &&\n      (value.selection === null || Range.isRange(value.selection)) &&\n      Node.isNodeList(value.children) &&\n      Operation.isOperationList(value.operations)\n    )\n  },\n\n  /**\n   * Check if a point is the end point of a location.\n   */\n\n  isEnd(editor: Editor, point: Point, at: Location): boolean {\n    const end = Editor.end(editor, at)\n    return Point.equals(point, end)\n  },\n\n  /**\n   * Check if a point is an edge of a location.\n   */\n\n  isEdge(editor: Editor, point: Point, at: Location): boolean {\n    return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at)\n  },\n\n  /**\n   * Check if an element is empty, accounting for void nodes.\n   */\n\n  isEmpty(editor: Editor, element: Element): boolean {\n    const { children } = element\n    const [first] = children\n    return (\n      children.length === 0 ||\n      (children.length === 1 &&\n        Text.isText(first) &&\n        first.text === '' &&\n        !editor.isVoid(element))\n    )\n  },\n\n  /**\n   * Check if a value is an inline `Element` object.\n   */\n\n  isInline(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && editor.isInline(value)\n  },\n\n  /**\n   * Check if the editor is currently normalizing after each operation.\n   */\n\n  isNormalizing(editor: Editor): boolean {\n    const isNormalizing = NORMALIZING.get(editor)\n    return isNormalizing === undefined ? true : isNormalizing\n  },\n\n  /**\n   * Check if a point is the start point of a location.\n   */\n\n  isStart(editor: Editor, point: Point, at: Location): boolean {\n    // PERF: If the offset isn't `0` we know it's not the start.\n    if (point.offset !== 0) {\n      return false\n    }\n\n    const start = Editor.start(editor, at)\n    return Point.equals(point, start)\n  },\n\n  /**\n   * Check if a value is a void `Element` object.\n   */\n\n  isVoid(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && editor.isVoid(value)\n  },\n\n  /**\n   * Get the last node at a location.\n   */\n\n  last(editor: Editor, at: Location): NodeEntry {\n    const path = Editor.path(editor, at, { edge: 'end' })\n    return Editor.node(editor, path)\n  },\n\n  /**\n   * Get the leaf text node at a location.\n   */\n\n  leaf(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry<Text> {\n    const path = Editor.path(editor, at, options)\n    const node = Node.leaf(editor, path)\n    return [node, path]\n  },\n\n  /**\n   * Iterate through all of the levels at a location.\n   */\n\n  *levels<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Generator<NodeEntry<T>, void, undefined> {\n    const { at = editor.selection, reverse = false, voids = false } = options\n    let { match } = options\n\n    if (match == null) {\n      match = () => true\n    }\n\n    if (!at) {\n      return\n    }\n\n    const levels: NodeEntry<T>[] = []\n    const path = Editor.path(editor, at)\n\n    for (const [n, p] of Node.levels(editor, path)) {\n      if (!match(n)) {\n        continue\n      }\n\n      levels.push([n, p])\n\n      if (!voids && Editor.isVoid(editor, n)) {\n        break\n      }\n    }\n\n    if (reverse) {\n      levels.reverse()\n    }\n\n    yield* levels\n  },\n\n  /**\n   * Get the marks that would be added to text at the current selection.\n   */\n\n  marks(editor: Editor): Record<string, any> | null {\n    const { marks, selection } = editor\n\n    if (!selection) {\n      return null\n    }\n\n    if (marks) {\n      return marks\n    }\n\n    if (Range.isExpanded(selection)) {\n      const [match] = Editor.nodes(editor, { match: Text.isText })\n\n      if (match) {\n        const [node] = match as NodeEntry<Text>\n        const { text, ...rest } = node\n        return rest\n      } else {\n        return {}\n      }\n    }\n\n    const { anchor } = selection\n    const { path } = anchor\n    let [node] = Editor.leaf(editor, path)\n\n    if (anchor.offset === 0) {\n      const prev = Editor.previous(editor, { at: path, match: Text.isText })\n      const block = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n      })\n\n      if (prev && block) {\n        const [prevNode, prevPath] = prev\n        const [, blockPath] = block\n\n        if (Path.isAncestor(blockPath, prevPath)) {\n          node = prevNode as Text\n        }\n      }\n    }\n\n    const { text, ...rest } = node\n    return rest\n  },\n\n  /**\n   * Get the matching node in the branch of the document after a location.\n   */\n\n  next<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    const [, from] = Editor.last(editor, at)\n    const [, to] = Editor.last(editor, [])\n    const span: Span = [from, to]\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(`Cannot get the next node from the root node!`)\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = () => true\n      }\n    }\n\n    const [, next] = Editor.nodes(editor, { at: span, match, mode, voids })\n    return next\n  },\n\n  /**\n   * Get the node at a location.\n   */\n\n  node(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry {\n    const path = Editor.path(editor, at, options)\n    const node = Node.get(editor, path)\n    return [node, path]\n  },\n\n  /**\n   * Iterate through all of the nodes in the Editor.\n   */\n\n  *nodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location | Span\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      universal?: boolean\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Generator<NodeEntry<T>, void, undefined> {\n    const {\n      at = editor.selection,\n      mode = 'all',\n      universal = false,\n      reverse = false,\n      voids = false,\n    } = options\n    let { match } = options\n\n    if (!match) {\n      match = () => true\n    }\n\n    if (!at) {\n      return\n    }\n\n    let from\n    let to\n\n    if (Span.isSpan(at)) {\n      from = at[0]\n      to = at[1]\n    } else {\n      const first = Editor.path(editor, at, { edge: 'start' })\n      const last = Editor.path(editor, at, { edge: 'end' })\n      from = reverse ? last : first\n      to = reverse ? first : last\n    }\n\n    const nodeEntries = Node.nodes(editor, {\n      reverse,\n      from,\n      to,\n      pass: ([n]) => (voids ? false : Editor.isVoid(editor, n)),\n    })\n\n    const matches: NodeEntry<T>[] = []\n    let hit: NodeEntry<T> | undefined\n\n    for (const [node, path] of nodeEntries) {\n      const isLower = hit && Path.compare(path, hit[1]) === 0\n\n      // In highest mode any node lower than the last hit is not a match.\n      if (mode === 'highest' && isLower) {\n        continue\n      }\n\n      if (!match(node)) {\n        // If we've arrived at a leaf text node that is not lower than the last\n        // hit, then we've found a branch that doesn't include a match, which\n        // means the match is not universal.\n        if (universal && !isLower && Text.isText(node)) {\n          return\n        } else {\n          continue\n        }\n      }\n\n      // If there's a match and it's lower than the last, update the hit.\n      if (mode === 'lowest' && isLower) {\n        hit = [node, path]\n        continue\n      }\n\n      // In lowest mode we emit the last hit, once it's guaranteed lowest.\n      const emit: NodeEntry<T> | undefined =\n        mode === 'lowest' ? hit : [node, path]\n\n      if (emit) {\n        if (universal) {\n          matches.push(emit)\n        } else {\n          yield emit\n        }\n      }\n\n      hit = [node, path]\n    }\n\n    // Since lowest is always emitting one behind, catch up at the end.\n    if (mode === 'lowest' && hit) {\n      if (universal) {\n        matches.push(hit)\n      } else {\n        yield hit\n      }\n    }\n\n    // Universal defers to ensure that the match occurs in every branch, so we\n    // yield all of the matches after iterating.\n    if (universal) {\n      yield* matches\n    }\n  },\n  /**\n   * Normalize any dirty objects in the editor.\n   */\n\n  normalize(\n    editor: Editor,\n    options: {\n      force?: boolean\n    } = {}\n  ) {\n    const { force = false } = options\n    const getDirtyPaths = (editor: Editor) => {\n      return DIRTY_PATHS.get(editor) || []\n    }\n\n    if (!Editor.isNormalizing(editor)) {\n      return\n    }\n\n    if (force) {\n      const allPaths = Array.from(Node.nodes(editor), ([, p]) => p)\n      DIRTY_PATHS.set(editor, allPaths)\n    }\n\n    if (getDirtyPaths(editor).length === 0) {\n      return\n    }\n\n    Editor.withoutNormalizing(editor, () => {\n      const max = getDirtyPaths(editor).length * 42 // HACK: better way?\n      let m = 0\n\n      while (getDirtyPaths(editor).length !== 0) {\n        if (m > max) {\n          throw new Error(`\n            Could not completely normalize the editor after ${max} iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\n          `)\n        }\n\n        const dirtyPath = getDirtyPaths(editor).pop()!\n\n        // If the node doesn't exist in the tree, it does not need to be normalized.\n        if (Node.has(editor, dirtyPath)) {\n          const entry = Editor.node(editor, dirtyPath)\n          editor.normalizeNode(entry)\n        }\n        m++\n      }\n    })\n  },\n\n  /**\n   * Get the parent node of a location.\n   */\n\n  parent(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry<Ancestor> {\n    const path = Editor.path(editor, at, options)\n    const parentPath = Path.parent(path)\n    const entry = Editor.node(editor, parentPath)\n    return entry as NodeEntry<Ancestor>\n  },\n\n  /**\n   * Get the path of a location.\n   */\n\n  path(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): Path {\n    const { depth, edge } = options\n\n    if (Path.isPath(at)) {\n      if (edge === 'start') {\n        const [, firstPath] = Node.first(editor, at)\n        at = firstPath\n      } else if (edge === 'end') {\n        const [, lastPath] = Node.last(editor, at)\n        at = lastPath\n      }\n    }\n\n    if (Range.isRange(at)) {\n      if (edge === 'start') {\n        at = Range.start(at)\n      } else if (edge === 'end') {\n        at = Range.end(at)\n      } else {\n        at = Path.common(at.anchor.path, at.focus.path)\n      }\n    }\n\n    if (Point.isPoint(at)) {\n      at = at.path\n    }\n\n    if (depth != null) {\n      at = at.slice(0, depth)\n    }\n\n    return at\n  },\n\n  /**\n   * Create a mutable ref for a `Path` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  pathRef(\n    editor: Editor,\n    path: Path,\n    options: {\n      affinity?: 'backward' | 'forward' | null\n    } = {}\n  ): PathRef {\n    const { affinity = 'forward' } = options\n    const ref: PathRef = {\n      current: path,\n      affinity,\n      unref() {\n        const { current } = ref\n        const pathRefs = Editor.pathRefs(editor)\n        pathRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.pathRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked path refs of the editor.\n   */\n\n  pathRefs(editor: Editor): Set<PathRef> {\n    let refs = PATH_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      PATH_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Get the start or end point of a location.\n   */\n\n  point(\n    editor: Editor,\n    at: Location,\n    options: {\n      edge?: 'start' | 'end'\n    } = {}\n  ): Point {\n    const { edge = 'start' } = options\n\n    if (Path.isPath(at)) {\n      let path\n\n      if (edge === 'end') {\n        const [, lastPath] = Node.last(editor, at)\n        path = lastPath\n      } else {\n        const [, firstPath] = Node.first(editor, at)\n        path = firstPath\n      }\n\n      const node = Node.get(editor, path)\n\n      if (!Text.isText(node)) {\n        throw new Error(\n          `Cannot get the ${edge} point in the node at path [${at}] because it has no ${edge} text node.`\n        )\n      }\n\n      return { path, offset: edge === 'end' ? node.text.length : 0 }\n    }\n\n    if (Range.isRange(at)) {\n      const [start, end] = Range.edges(at)\n      return edge === 'start' ? start : end\n    }\n\n    return at\n  },\n\n  /**\n   * Create a mutable ref for a `Point` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  pointRef(\n    editor: Editor,\n    point: Point,\n    options: {\n      affinity?: 'backward' | 'forward' | null\n    } = {}\n  ): PointRef {\n    const { affinity = 'forward' } = options\n    const ref: PointRef = {\n      current: point,\n      affinity,\n      unref() {\n        const { current } = ref\n        const pointRefs = Editor.pointRefs(editor)\n        pointRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.pointRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked point refs of the editor.\n   */\n\n  pointRefs(editor: Editor): Set<PointRef> {\n    let refs = POINT_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      POINT_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Iterate through all of the positions in the document where a `Point` can be\n   * placed.\n   *\n   * By default it will move forward by individual offsets at a time,  but you\n   * can pass the `unit: 'character'` option to moved forward one character, word,\n   * or line at at time.\n   *\n   * Note: void nodes are treated as a single point, and iteration will not\n   * happen inside their content.\n   */\n\n  *positions(\n    editor: Editor,\n    options: {\n      at?: Location\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n    } = {}\n  ): Generator<Point, void, undefined> {\n    const { at = editor.selection, unit = 'offset', reverse = false } = options\n\n    if (!at) {\n      return\n    }\n\n    const range = Editor.range(editor, at)\n    const [start, end] = Range.edges(range)\n    const first = reverse ? end : start\n    let string = ''\n    let available = 0\n    let offset = 0\n    let distance: number | null = null\n    let isNewBlock = false\n\n    const advance = () => {\n      if (distance == null) {\n        if (unit === 'character') {\n          distance = getCharacterDistance(string)\n        } else if (unit === 'word') {\n          distance = getWordDistance(string)\n        } else if (unit === 'line' || unit === 'block') {\n          distance = string.length\n        } else {\n          distance = 1\n        }\n\n        string = string.slice(distance)\n      }\n\n      // Add or substract the offset.\n      offset = reverse ? offset - distance : offset + distance\n      // Subtract the distance traveled from the available text.\n      available = available - distance!\n      // If the available had room to spare, reset the distance so that it will\n      // advance again next time. Otherwise, set it to the overflow amount.\n      distance = available >= 0 ? null : 0 - available\n    }\n\n    for (const [node, path] of Editor.nodes(editor, { at, reverse })) {\n      if (Element.isElement(node)) {\n        // Void nodes are a special case, since we don't want to iterate over\n        // their content. We instead always just yield their first point.\n        if (editor.isVoid(node)) {\n          yield Editor.start(editor, path)\n          continue\n        }\n\n        if (editor.isInline(node)) {\n          continue\n        }\n\n        if (Editor.hasInlines(editor, node)) {\n          const e = Path.isAncestor(path, end.path)\n            ? end\n            : Editor.end(editor, path)\n          const s = Path.isAncestor(path, start.path)\n            ? start\n            : Editor.start(editor, path)\n\n          const text = Editor.string(editor, { anchor: s, focus: e })\n          string = reverse ? reverseText(text) : text\n          isNewBlock = true\n        }\n      }\n\n      if (Text.isText(node)) {\n        const isFirst = Path.equals(path, first.path)\n        available = node.text.length\n        offset = reverse ? available : 0\n\n        if (isFirst) {\n          available = reverse ? first.offset : available - first.offset\n          offset = first.offset\n        }\n\n        if (isFirst || isNewBlock || unit === 'offset') {\n          yield { path, offset }\n        }\n\n        while (true) {\n          // If there's no more string, continue to the next block.\n          if (string === '') {\n            break\n          } else {\n            advance()\n          }\n\n          // If the available space hasn't overflow, we have another point to\n          // yield in the current text node.\n          if (available >= 0) {\n            yield { path, offset }\n          } else {\n            break\n          }\n        }\n\n        isNewBlock = false\n      }\n    }\n  },\n\n  /**\n   * Get the matching node in the branch of the document before a location.\n   */\n\n  previous<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    const [, from] = Editor.first(editor, at)\n    const [, to] = Editor.first(editor, [])\n    const span: Span = [from, to]\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(`Cannot get the previous node from the root node!`)\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = () => true\n      }\n    }\n\n    const [, previous] = Editor.nodes(editor, {\n      reverse: true,\n      at: span,\n      match,\n      mode,\n      voids,\n    })\n\n    return previous\n  },\n\n  /**\n   * Get a range of a location.\n   */\n\n  range(editor: Editor, at: Location, to?: Location): Range {\n    if (Range.isRange(at) && !to) {\n      return at\n    }\n\n    const start = Editor.start(editor, at)\n    const end = Editor.end(editor, to || at)\n    return { anchor: start, focus: end }\n  },\n\n  /**\n   * Create a mutable ref for a `Range` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  rangeRef(\n    editor: Editor,\n    range: Range,\n    options: {\n      affinity?: 'backward' | 'forward' | 'outward' | 'inward' | null\n    } = {}\n  ): RangeRef {\n    const { affinity = 'forward' } = options\n    const ref: RangeRef = {\n      current: range,\n      affinity,\n      unref() {\n        const { current } = ref\n        const rangeRefs = Editor.rangeRefs(editor)\n        rangeRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.rangeRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked range refs of the editor.\n   */\n\n  rangeRefs(editor: Editor): Set<RangeRef> {\n    let refs = RANGE_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      RANGE_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Remove a custom property from all of the leaf text nodes in the current\n   * selection.\n   *\n   * If the selection is currently collapsed, the removal will be stored on\n   * `editor.marks` and applied to the text inserted next.\n   */\n\n  removeMark(editor: Editor, key: string): void {\n    editor.removeMark(key)\n  },\n\n  /**\n   * Get the start point of a location.\n   */\n\n  start(editor: Editor, at: Location): Point {\n    return Editor.point(editor, at, { edge: 'start' })\n  },\n\n  /**\n   * Get the text string content of a location.\n   *\n   * Note: the text of void nodes is presumed to be an empty string, regardless\n   * of what their actual content is.\n   */\n\n  string(editor: Editor, at: Location): string {\n    const range = Editor.range(editor, at)\n    const [start, end] = Range.edges(range)\n    let text = ''\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at: range,\n      match: Text.isText,\n    })) {\n      let t = node.text\n\n      if (Path.equals(path, end.path)) {\n        t = t.slice(0, end.offset)\n      }\n\n      if (Path.equals(path, start.path)) {\n        t = t.slice(start.offset)\n      }\n\n      text += t\n    }\n\n    return text\n  },\n\n  /**\n   * Convert a range into a non-hanging one.\n   */\n\n  unhangRange(\n    editor: Editor,\n    range: Range,\n    options: {\n      voids?: boolean\n    } = {}\n  ): Range {\n    const { voids = false } = options\n    let [start, end] = Range.edges(range)\n\n    // PERF: exit early if we can guarantee that the range isn't hanging.\n    if (start.offset !== 0 || end.offset !== 0 || Range.isCollapsed(range)) {\n      return range\n    }\n\n    const endBlock = Editor.above(editor, {\n      at: end,\n      match: n => Editor.isBlock(editor, n),\n    })\n    const blockPath = endBlock ? endBlock[1] : []\n    const first = Editor.start(editor, [])\n    const before = { anchor: first, focus: end }\n    let skip = true\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at: before,\n      match: Text.isText,\n      reverse: true,\n      voids,\n    })) {\n      if (skip) {\n        skip = false\n        continue\n      }\n\n      if (node.text !== '' || Path.isBefore(path, blockPath)) {\n        end = { path, offset: node.text.length }\n        break\n      }\n    }\n\n    return { anchor: start, focus: end }\n  },\n\n  /**\n   * Match a void node in the current branch of the editor.\n   */\n\n  void(\n    editor: Editor,\n    options: {\n      at?: Location\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<Element> | undefined {\n    return Editor.above(editor, {\n      ...options,\n      match: n => Editor.isVoid(editor, n),\n    })\n  },\n\n  /**\n   * Call a function, deferring normalization until after it completes.\n   */\n\n  withoutNormalizing(editor: Editor, fn: () => void): void {\n    const value = Editor.isNormalizing(editor)\n    NORMALIZING.set(editor, false)\n    fn()\n    NORMALIZING.set(editor, value)\n    Editor.normalize(editor)\n  },\n}\n\n/**\n * A helper type for narrowing matched nodes with a predicate.\n */\n\ntype NodeMatch<T extends Node> =\n  | ((node: Node) => node is T)\n  | ((node: Node) => boolean)\n","import isPlainObject from 'is-plain-object'\nimport { Editor, Node, Path } from '..'\n\n/**\n * `Element` objects are a type of node in a Slate document that contain other\n * element nodes or text nodes. They can be either \"blocks\" or \"inlines\"\n * depending on the Slate editor's configuration.\n */\n\nexport interface Element {\n  children: Node[]\n  [key: string]: unknown\n}\n\nexport const Element = {\n  /**\n   * Check if a value implements the `Element` interface.\n   */\n\n  isElement(value: any): value is Element {\n    return (\n      isPlainObject(value) &&\n      Node.isNodeList(value.children) &&\n      !Editor.isEditor(value)\n    )\n  },\n\n  /**\n   * Check if a value is an array of `Element` objects.\n   */\n\n  isElementList(value: any): value is Element[] {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || Element.isElement(value[0]))\n    )\n  },\n\n  /**\n   * Check if an element matches set of properties.\n   *\n   * Note: this checks custom properties, and it does not ensure that any\n   * children are equivalent.\n   */\n\n  matches(element: Element, props: Partial<Element>): boolean {\n    for (const key in props) {\n      if (key === 'children') {\n        continue\n      }\n\n      if (element[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n}\n\n/**\n * `ElementEntry` objects refer to an `Element` and the `Path` where it can be\n * found inside a root node.\n */\n\nexport type ElementEntry = [Element, Path]\n","import { Path, Point, Range } from '..'\n\n/**\n * The `Location` interface is a union of the ways to refer to a specific\n * location in a Slate document: paths, points or ranges.\n *\n * Methods will often accept a `Location` instead of requiring only a `Path`,\n * `Point` or `Range`. This eliminates the need for developers to manage\n * converting between the different interfaces in their own code base.\n */\n\nexport type Location = Path | Point | Range\n\nexport const Location = {\n  /**\n   * Check if a value implements the `Location` interface.\n   */\n\n  isLocation(value: any): value is Location {\n    return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value)\n  },\n}\n\n/**\n * The `Span` interface is a low-level way to refer to locations in nodes\n * without using `Point` which requires leaf text nodes to be present.\n */\n\nexport type Span = [Path, Path]\n\nexport const Span = {\n  /**\n   * Check if a value implements the `Span` interface.\n   */\n\n  isSpan(value: any): value is Span {\n    return (\n      Array.isArray(value) && value.length === 2 && value.every(Path.isPath)\n    )\n  },\n}\n","import { produce } from 'immer'\nimport { Editor, Element, ElementEntry, Path, Range, Text } from '..'\n\n/**\n * The `Node` union type represents all of the different types of nodes that\n * occur in a Slate document tree.\n */\n\nexport type Node = Editor | Element | Text\n\nexport const Node = {\n  /**\n   * Get the node at a specific path, asserting that it's an ancestor node.\n   */\n\n  ancestor(root: Node, path: Path): Ancestor {\n    const node = Node.get(root, path)\n\n    if (Text.isText(node)) {\n      throw new Error(\n        `Cannot get the ancestor node at path [${path}] because it refers to a text node instead: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return a generator of all the ancestor nodes above a specific path.\n   *\n   * By default the order is bottom-up, from lowest to highest ancestor in\n   * the tree, but you can pass the `reverse: true` option to go top-down.\n   */\n\n  *ancestors(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Generator<NodeEntry<Ancestor>, void, undefined> {\n    for (const p of Path.ancestors(path, options)) {\n      const n = Node.ancestor(root, p)\n      const entry: NodeEntry<Ancestor> = [n, p]\n      yield entry\n    }\n  },\n\n  /**\n   * Get the child of a node at a specific index.\n   */\n\n  child(root: Node, index: number): Descendant {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get the child of a text node: ${JSON.stringify(root)}`\n      )\n    }\n\n    const c = root.children[index] as Descendant\n\n    if (c == null) {\n      throw new Error(\n        `Cannot get child at index \\`${index}\\` in node: ${JSON.stringify(\n          root\n        )}`\n      )\n    }\n\n    return c\n  },\n\n  /**\n   * Iterate over the children of a node at a specific path.\n   */\n\n  *children(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Generator<NodeEntry<Descendant>, void, undefined> {\n    const { reverse = false } = options\n    const ancestor = Node.ancestor(root, path)\n    const { children } = ancestor\n    let index = reverse ? children.length - 1 : 0\n\n    while (reverse ? index >= 0 : index < children.length) {\n      const child = Node.child(ancestor, index)\n      const childPath = path.concat(index)\n      yield [child, childPath]\n      index = reverse ? index - 1 : index + 1\n    }\n  },\n\n  /**\n   * Get an entry for the common ancesetor node of two paths.\n   */\n\n  common(root: Node, path: Path, another: Path): NodeEntry {\n    const p = Path.common(path, another)\n    const n = Node.get(root, p)\n    return [n, p]\n  },\n\n  /**\n   * Get the node at a specific path, asserting that it's a descendant node.\n   */\n\n  descendant(root: Node, path: Path): Descendant {\n    const node = Node.get(root, path)\n\n    if (Editor.isEditor(node)) {\n      throw new Error(\n        `Cannot get the descendant node at path [${path}] because it refers to the root editor node instead: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return a generator of all the descendant node entries inside a root node.\n   */\n\n  *descendants(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Generator<NodeEntry<Descendant>, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (path.length !== 0) {\n        // NOTE: we have to coerce here because checking the path's length does\n        // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.\n        yield [node, path] as NodeEntry<Descendant>\n      }\n    }\n  },\n\n  /**\n   * Return a generator of all the element nodes inside a root node. Each iteration\n   * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the\n   * root node is an element it will be included in the iteration as well.\n   */\n\n  *elements(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Generator<ElementEntry, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Element.isElement(node)) {\n        yield [node, path]\n      }\n    }\n  },\n\n  /**\n   * Get the first node entry in a root node from a path.\n   */\n\n  first(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        n = n.children[0]\n        p.push(0)\n      }\n    }\n\n    return [n, p]\n  },\n\n  /**\n   * Get the sliced fragment represented by a range inside a root node.\n   */\n\n  fragment(root: Node, range: Range): Descendant[] {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get a fragment starting from a root text node: ${JSON.stringify(\n          root\n        )}`\n      )\n    }\n\n    const newRoot = produce(root, r => {\n      const [start, end] = Range.edges(range)\n      const nodeEntries = Node.nodes(r, {\n        reverse: true,\n        pass: ([, path]) => !Range.includes(range, path),\n      })\n\n      for (const [, path] of nodeEntries) {\n        if (!Range.includes(range, path)) {\n          const parent = Node.parent(r, path)\n          const index = path[path.length - 1]\n          parent.children.splice(index, 1)\n        }\n\n        if (Path.equals(path, end.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(0, end.offset)\n        }\n\n        if (Path.equals(path, start.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(start.offset)\n        }\n      }\n\n      delete r.selection\n    })\n\n    return newRoot.children\n  },\n\n  /**\n   * Get the descendant node referred to by a specific path. If the path is an\n   * empty array, it refers to the root node itself.\n   */\n\n  get(root: Node, path: Path): Node {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        throw new Error(\n          `Cannot find a descendant at path [${path}] in node: ${JSON.stringify(\n            root\n          )}`\n        )\n      }\n\n      node = node.children[p]\n    }\n\n    return node\n  },\n\n  /**\n   * Check if a descendant node exists at a specific path.\n   */\n\n  has(root: Node, path: Path): boolean {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        return false\n      }\n\n      node = node.children[p]\n    }\n\n    return true\n  },\n\n  /**\n   * Check if a value implements the `Node` interface.\n   */\n\n  isNode(value: any): value is Node {\n    return (\n      Text.isText(value) || Element.isElement(value) || Editor.isEditor(value)\n    )\n  },\n\n  /**\n   * Check if a value is a list of `Node` objects.\n   */\n\n  isNodeList(value: any): value is Node[] {\n    return Array.isArray(value) && (value.length === 0 || Node.isNode(value[0]))\n  },\n\n  /**\n   * Get the last node entry in a root node from a path.\n   */\n\n  last(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        const i = n.children.length - 1\n        n = n.children[i]\n        p.push(i)\n      }\n    }\n\n    return [n, p]\n  },\n\n  /**\n   * Get the node at a specific path, ensuring it's a leaf text node.\n   */\n\n  leaf(root: Node, path: Path): Text {\n    const node = Node.get(root, path)\n\n    if (!Text.isText(node)) {\n      throw new Error(\n        `Cannot get the leaf node at path [${path}] because it refers to a non-leaf node: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return a generator of the in a branch of the tree, from a specific path.\n   *\n   * By default the order is top-down, from lowest to highest node in the tree,\n   * but you can pass the `reverse: true` option to go bottom-up.\n   */\n\n  *levels(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Generator<NodeEntry, void, undefined> {\n    for (const p of Path.levels(path, options)) {\n      const n = Node.get(root, p)\n      yield [n, p]\n    }\n  },\n\n  /**\n   * Check if a node matches a set of props.\n   */\n\n  matches(node: Node, props: Partial<Node>): boolean {\n    return (\n      (Element.isElement(node) && Element.matches(node, props)) ||\n      (Text.isText(node) && Text.matches(node, props))\n    )\n  },\n\n  /**\n   * Return a generator of all the node entries of a root node. Each entry is\n   * returned as a `[Node, Path]` tuple, with the path referring to the node's\n   * position inside the root node.\n   */\n\n  *nodes(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (entry: NodeEntry) => boolean\n    } = {}\n  ): Generator<NodeEntry, void, undefined> {\n    const { pass, reverse = false } = options\n    const { from = [], to } = options\n    const visited = new Set()\n    let p: Path = []\n    let n = root\n\n    while (true) {\n      if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {\n        break\n      }\n\n      if (!visited.has(n)) {\n        yield [n, p]\n      }\n\n      // If we're allowed to go downward and we haven't decsended yet, do.\n      if (\n        !visited.has(n) &&\n        !Text.isText(n) &&\n        n.children.length !== 0 &&\n        (pass == null || pass([n, p]) === false)\n      ) {\n        visited.add(n)\n        let nextIndex = reverse ? n.children.length - 1 : 0\n\n        if (Path.isAncestor(p, from)) {\n          nextIndex = from[p.length]\n        }\n\n        p = p.concat(nextIndex)\n        n = Node.get(root, p)\n        continue\n      }\n\n      // If we're at the root and we can't go down, we're done.\n      if (p.length === 0) {\n        break\n      }\n\n      // If we're going forward...\n      if (!reverse) {\n        const newPath = Path.next(p)\n\n        if (Node.has(root, newPath)) {\n          p = newPath\n          n = Node.get(root, p)\n          continue\n        }\n      }\n\n      // If we're going backward...\n      if (reverse && p[p.length - 1] !== 0) {\n        const newPath = Path.previous(p)\n        p = newPath\n        n = Node.get(root, p)\n        continue\n      }\n\n      // Otherwise we're going upward...\n      p = Path.parent(p)\n      n = Node.get(root, p)\n      visited.add(n)\n    }\n  },\n\n  /**\n   * Get the parent of a node at a specific path.\n   */\n\n  parent(root: Node, path: Path): Ancestor {\n    const parentPath = Path.parent(path)\n    const p = Node.get(root, parentPath)\n\n    if (Text.isText(p)) {\n      throw new Error(\n        `Cannot get the parent of path [${path}] because it does not exist in the root.`\n      )\n    }\n\n    return p\n  },\n\n  /**\n   * Get the concatenated text string of a node's content.\n   *\n   * Note that this will not include spaces or line breaks between block nodes.\n   * It is not a user-facing string, but a string for performing offset-related\n   * computations for a node.\n   */\n\n  string(node: Node): string {\n    if (Text.isText(node)) {\n      return node.text\n    } else {\n      return node.children.map(Node.string).join('')\n    }\n  },\n\n  /**\n   * Return a generator of all leaf text nodes in a root node.\n   */\n\n  *texts(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Generator<NodeEntry<Text>, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Text.isText(node)) {\n        yield [node, path]\n      }\n    }\n  },\n}\n\n/**\n * The `Descendant` union type represents nodes that are descendants in the\n * tree. It is returned as a convenience in certain cases to narrow a value\n * further than the more generic `Node` union.\n */\n\nexport type Descendant = Element | Text\n\n/**\n * The `Ancestor` union type represents nodes that are ancestors in the tree.\n * It is returned as a convenience in certain cases to narrow a value further\n * than the more generic `Node` union.\n */\n\nexport type Ancestor = Editor | Element\n\n/**\n * `NodeEntry` objects are returned when iterating over the nodes in a Slate\n * document tree. They consist of the node and its `Path` relative to the root\n * node in the document.\n */\n\nexport type NodeEntry<T extends Node = Node> = [T, Path]\n","import { Node, Path, Range } from '..'\nimport isPlainObject from 'is-plain-object'\n\nexport type InsertNodeOperation = {\n  type: 'insert_node'\n  path: Path\n  node: Node\n  [key: string]: unknown\n}\n\nexport type InsertTextOperation = {\n  type: 'insert_text'\n  path: Path\n  offset: number\n  text: string\n  [key: string]: unknown\n}\n\nexport type MergeNodeOperation = {\n  type: 'merge_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n  [key: string]: unknown\n}\n\nexport type MoveNodeOperation = {\n  type: 'move_node'\n  path: Path\n  newPath: Path\n  [key: string]: unknown\n}\n\nexport type RemoveNodeOperation = {\n  type: 'remove_node'\n  path: Path\n  node: Node\n  [key: string]: unknown\n}\n\nexport type RemoveTextOperation = {\n  type: 'remove_text'\n  path: Path\n  offset: number\n  text: string\n  [key: string]: unknown\n}\n\nexport type SetNodeOperation = {\n  type: 'set_node'\n  path: Path\n  properties: Partial<Node>\n  newProperties: Partial<Node>\n  [key: string]: unknown\n}\n\nexport type SetSelectionOperation =\n  | {\n      type: 'set_selection'\n      [key: string]: unknown\n      properties: null\n      newProperties: Range\n    }\n  | {\n      type: 'set_selection'\n      [key: string]: unknown\n      properties: Partial<Range>\n      newProperties: Partial<Range>\n    }\n  | {\n      type: 'set_selection'\n      [key: string]: unknown\n      properties: Range\n      newProperties: null\n    }\n\nexport type SplitNodeOperation = {\n  type: 'split_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n  [key: string]: unknown\n}\n\nexport type NodeOperation =\n  | InsertNodeOperation\n  | MergeNodeOperation\n  | MoveNodeOperation\n  | RemoveNodeOperation\n  | SetNodeOperation\n  | SplitNodeOperation\n\nexport type SelectionOperation = SetSelectionOperation\n\nexport type TextOperation = InsertTextOperation | RemoveTextOperation\n\n/**\n * `Operation` objects define the low-level instructions that Slate editors use\n * to apply changes to their internal state. Representing all changes as\n * operations is what allows Slate editors to easily implement history,\n * collaboration, and other features.\n */\n\nexport type Operation = NodeOperation | SelectionOperation | TextOperation\n\nexport const Operation = {\n  /**\n   * Check of a value is a `NodeOperation` object.\n   */\n\n  isNodeOperation(value: any): value is NodeOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_node')\n  },\n\n  /**\n   * Check of a value is an `Operation` object.\n   */\n\n  isOperation(value: any): value is Operation {\n    if (!isPlainObject(value)) {\n      return false\n    }\n\n    switch (value.type) {\n      case 'insert_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'insert_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'merge_node':\n        return (\n          typeof value.position === 'number' &&\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties)\n        )\n      case 'move_node':\n        return Path.isPath(value.path) && Path.isPath(value.newPath)\n      case 'remove_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'remove_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'set_node':\n        return (\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties) &&\n          isPlainObject(value.newProperties)\n        )\n      case 'set_selection':\n        return (\n          (value.properties === null && Range.isRange(value.newProperties)) ||\n          (value.newProperties === null && Range.isRange(value.properties)) ||\n          (isPlainObject(value.properties) &&\n            isPlainObject(value.newProperties))\n        )\n      case 'split_node':\n        return (\n          Path.isPath(value.path) &&\n          typeof value.position === 'number' &&\n          isPlainObject(value.properties)\n        )\n      default:\n        return false\n    }\n  },\n\n  /**\n   * Check if a value is a list of `Operation` objects.\n   */\n\n  isOperationList(value: any): value is Operation[] {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || Operation.isOperation(value[0]))\n    )\n  },\n\n  /**\n   * Check of a value is a `SelectionOperation` object.\n   */\n\n  isSelectionOperation(value: any): value is SelectionOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_selection')\n  },\n\n  /**\n   * Check of a value is a `TextOperation` object.\n   */\n\n  isTextOperation(value: any): value is TextOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_text')\n  },\n\n  /**\n   * Invert an operation, returning a new operation that will exactly undo the\n   * original when applied.\n   */\n\n  inverse(op: Operation): Operation {\n    switch (op.type) {\n      case 'insert_node': {\n        return { ...op, type: 'remove_node' }\n      }\n\n      case 'insert_text': {\n        return { ...op, type: 'remove_text' }\n      }\n\n      case 'merge_node': {\n        return { ...op, type: 'split_node', path: Path.previous(op.path) }\n      }\n\n      case 'move_node': {\n        const { newPath, path } = op\n\n        // PERF: in this case the move operation is a no-op anyways.\n        if (Path.equals(newPath, path)) {\n          return op\n        }\n\n        // If the move happens completely within a single parent the path and\n        // newPath are stable with respect to each other.\n        if (Path.isSibling(path, newPath)) {\n          return { ...op, path: newPath, newPath: path }\n        }\n\n        // If the move does not happen within a single parent it is possible\n        // for the move to impact the true path to the location where the node\n        // was removed from and where it was inserted. We have to adjust for this\n        // and find the original path. We can accomplish this (only in non-sibling)\n        // moves by looking at the impact of the move operation on the node\n        // after the original move path.\n        const inversePath = Path.transform(path, op)!\n        const inverseNewPath = Path.transform(Path.next(path), op)!\n        return { ...op, path: inversePath, newPath: inverseNewPath }\n      }\n\n      case 'remove_node': {\n        return { ...op, type: 'insert_node' }\n      }\n\n      case 'remove_text': {\n        return { ...op, type: 'insert_text' }\n      }\n\n      case 'set_node': {\n        const { properties, newProperties } = op\n        return { ...op, properties: newProperties, newProperties: properties }\n      }\n\n      case 'set_selection': {\n        const { properties, newProperties } = op\n\n        if (properties == null) {\n          return {\n            ...op,\n            properties: newProperties as Range,\n            newProperties: null,\n          }\n        } else if (newProperties == null) {\n          return {\n            ...op,\n            properties: null,\n            newProperties: properties as Range,\n          }\n        } else {\n          return { ...op, properties: newProperties, newProperties: properties }\n        }\n      }\n\n      case 'split_node': {\n        return { ...op, type: 'merge_node', path: Path.next(op.path) }\n      }\n    }\n  },\n}\n","import { produce } from 'immer'\nimport { Operation } from '..'\n\n/**\n * `Path` arrays are a list of indexes that describe a node's exact position in\n * a Slate node tree. Although they are usually relative to the root `Editor`\n * object, they can be relative to any `Node` object.\n */\n\nexport type Path = number[]\n\nexport const Path = {\n  /**\n   * Get a list of ancestor paths for a given path.\n   *\n   * The paths are sorted from deepest to shallowest ancestor. However, if the\n   * `reverse: true` option is passed, they are reversed.\n   */\n\n  ancestors(path: Path, options: { reverse?: boolean } = {}): Path[] {\n    const { reverse = false } = options\n    let paths = Path.levels(path, options)\n\n    if (reverse) {\n      paths = paths.slice(1)\n    } else {\n      paths = paths.slice(0, -1)\n    }\n\n    return paths\n  },\n\n  /**\n   * Get the common ancestor path of two paths.\n   */\n\n  common(path: Path, another: Path): Path {\n    const common: Path = []\n\n    for (let i = 0; i < path.length && i < another.length; i++) {\n      const av = path[i]\n      const bv = another[i]\n\n      if (av !== bv) {\n        break\n      }\n\n      common.push(av)\n    }\n\n    return common\n  },\n\n  /**\n   * Compare a path to another, returning an integer indicating whether the path\n   * was before, at, or after the other.\n   *\n   * Note: Two paths of unequal length can still receive a `0` result if one is\n   * directly above or below the other. If you want exact matching, use\n   * [[Path.equals]] instead.\n   */\n\n  compare(path: Path, another: Path): -1 | 0 | 1 {\n    const min = Math.min(path.length, another.length)\n\n    for (let i = 0; i < min; i++) {\n      if (path[i] < another[i]) return -1\n      if (path[i] > another[i]) return 1\n    }\n\n    return 0\n  },\n\n  /**\n   * Check if a path ends after one of the indexes in another.\n   */\n\n  endsAfter(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av > bv\n  },\n\n  /**\n   * Check if a path ends at one of the indexes in another.\n   */\n\n  endsAt(path: Path, another: Path): boolean {\n    const i = path.length\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    return Path.equals(as, bs)\n  },\n\n  /**\n   * Check if a path ends before one of the indexes in another.\n   */\n\n  endsBefore(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av < bv\n  },\n\n  /**\n   * Check if a path is exactly equal to another.\n   */\n\n  equals(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length && path.every((n, i) => n === another[i])\n    )\n  },\n\n  /**\n   * Check if the path of previous sibling node exists\n   */\n\n  hasPrevious(path: Path): boolean {\n    return path[path.length - 1] > 0\n  },\n\n  /**\n   * Check if a path is after another.\n   */\n\n  isAfter(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === 1\n  },\n\n  /**\n   * Check if a path is an ancestor of another.\n   */\n\n  isAncestor(path: Path, another: Path): boolean {\n    return path.length < another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is before another.\n   */\n\n  isBefore(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === -1\n  },\n\n  /**\n   * Check if a path is a child of another.\n   */\n\n  isChild(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length + 1 && Path.compare(path, another) === 0\n    )\n  },\n\n  /**\n   * Check if a path is equal to or an ancestor of another.\n   */\n\n  isCommon(path: Path, another: Path): boolean {\n    return path.length <= another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is a descendant of another.\n   */\n\n  isDescendant(path: Path, another: Path): boolean {\n    return path.length > another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is the parent of another.\n   */\n\n  isParent(path: Path, another: Path): boolean {\n    return (\n      path.length + 1 === another.length && Path.compare(path, another) === 0\n    )\n  },\n\n  /**\n   * Check is a value implements the `Path` interface.\n   */\n\n  isPath(value: any): value is Path {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || typeof value[0] === 'number')\n    )\n  },\n\n  /**\n   * Check if a path is a sibling of another.\n   */\n\n  isSibling(path: Path, another: Path): boolean {\n    if (path.length !== another.length) {\n      return false\n    }\n\n    const as = path.slice(0, -1)\n    const bs = another.slice(0, -1)\n    const al = path[path.length - 1]\n    const bl = another[another.length - 1]\n    return al !== bl && Path.equals(as, bs)\n  },\n\n  /**\n   * Get a list of paths at every level down to a path. Note: this is the same\n   * as `Path.ancestors`, but including the path itself.\n   *\n   * The paths are sorted from shallowest to deepest. However, if the `reverse:\n   * true` option is passed, they are reversed.\n   */\n\n  levels(\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Path[] {\n    const { reverse = false } = options\n    const list: Path[] = []\n\n    for (let i = 0; i <= path.length; i++) {\n      list.push(path.slice(0, i))\n    }\n\n    if (reverse) {\n      list.reverse()\n    }\n\n    return list\n  },\n\n  /**\n   * Given a path, get the path to the next sibling node.\n   */\n\n  next(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the next path of a root path [${path}], because it has no next index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n    return path.slice(0, -1).concat(last + 1)\n  },\n\n  /**\n   * Given a path, return a new path referring to the parent node above it.\n   */\n\n  parent(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(`Cannot get the parent path of the root path [${path}].`)\n    }\n\n    return path.slice(0, -1)\n  },\n\n  /**\n   * Given a path, get the path to the previous sibling node.\n   */\n\n  previous(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the previous path of a root path [${path}], because it has no previous index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n\n    if (last <= 0) {\n      throw new Error(\n        `Cannot get the previous path of a first child path [${path}] because it would result in a negative index.`\n      )\n    }\n\n    return path.slice(0, -1).concat(last - 1)\n  },\n\n  /**\n   * Get a path relative to an ancestor.\n   */\n\n  relative(path: Path, ancestor: Path): Path {\n    if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {\n      throw new Error(\n        `Cannot get the relative path of [${path}] inside ancestor [${ancestor}], because it is not above or equal to the path.`\n      )\n    }\n\n    return path.slice(ancestor.length)\n  },\n\n  /**\n   * Transform a path by an operation.\n   */\n\n  transform(\n    path: Path,\n    operation: Operation,\n    options: { affinity?: 'forward' | 'backward' | null } = {}\n  ): Path | null {\n    return produce(path, p => {\n      const { affinity = 'forward' } = options\n\n      // PERF: Exit early if the operation is guaranteed not to have an effect.\n      if (path.length === 0) {\n        return\n      }\n\n      switch (operation.type) {\n        case 'insert_node': {\n          const { path: op } = operation\n\n          if (\n            Path.equals(op, p) ||\n            Path.endsBefore(op, p) ||\n            Path.isAncestor(op, p)\n          ) {\n            p[op.length - 1] += 1\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          const { path: op } = operation\n\n          if (Path.equals(op, p) || Path.isAncestor(op, p)) {\n            return null\n          } else if (Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          const { path: op, position } = operation\n\n          if (Path.equals(op, p) || Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          } else if (Path.isAncestor(op, p)) {\n            p[op.length - 1] -= 1\n            p[op.length] += position\n          }\n\n          break\n        }\n\n        case 'split_node': {\n          const { path: op, position } = operation\n\n          if (Path.equals(op, p)) {\n            if (affinity === 'forward') {\n              p[p.length - 1] += 1\n            } else if (affinity === 'backward') {\n              // Nothing, because it still refers to the right path.\n            } else {\n              return null\n            }\n          } else if (Path.endsBefore(op, p)) {\n            p[op.length - 1] += 1\n          } else if (Path.isAncestor(op, p) && path[op.length] >= position) {\n            p[op.length - 1] += 1\n            p[op.length] -= position\n          }\n\n          break\n        }\n\n        case 'move_node': {\n          const { path: op, newPath: onp } = operation\n\n          // If the old and new path are the same, it's a no-op.\n          if (Path.equals(op, onp)) {\n            return\n          }\n\n          if (Path.isAncestor(op, p) || Path.equals(op, p)) {\n            const copy = onp.slice()\n\n            if (Path.endsBefore(op, onp) && op.length < onp.length) {\n              copy[op.length - 1] -= 1\n            }\n\n            return copy.concat(p.slice(op.length))\n          } else if (\n            Path.isSibling(op, onp) &&\n            (Path.isAncestor(onp, p) || Path.equals(onp, p))\n          ) {\n            if (Path.endsBefore(op, p)) {\n              p[op.length - 1] -= 1\n            } else {\n              p[op.length - 1] += 1\n            }\n          } else if (\n            Path.endsBefore(onp, p) ||\n            Path.equals(onp, p) ||\n            Path.isAncestor(onp, p)\n          ) {\n            if (Path.endsBefore(op, p)) {\n              p[op.length - 1] -= 1\n            }\n\n            p[onp.length - 1] += 1\n          } else if (Path.endsBefore(op, p)) {\n            if (Path.equals(onp, p)) {\n              p[onp.length - 1] += 1\n            }\n\n            p[op.length - 1] -= 1\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n","import { Operation, Path } from '..'\n\n/**\n * `PathRef` objects keep a specific path in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date path value.\n */\n\nexport interface PathRef {\n  current: Path | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Path | null\n}\n\nexport const PathRef = {\n  /**\n   * Transform the path ref's current value by an operation.\n   */\n\n  transform(ref: PathRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Path.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import isPlainObject from 'is-plain-object'\nimport { produce } from 'immer'\nimport { Operation, Path } from '..'\n\n/**\n * `Point` objects refer to a specific location in a text node in a Slate\n * document. Its path refers to the location of the node in the tree, and its\n * offset refers to the distance into the node's string of text. Points can\n * only refer to `Text` nodes.\n */\n\nexport interface Point {\n  path: Path\n  offset: number\n  [key: string]: unknown\n}\n\nexport const Point = {\n  /**\n   * Compare a point to another, returning an integer indicating whether the\n   * point was before, at, or after the other.\n   */\n\n  compare(point: Point, another: Point): -1 | 0 | 1 {\n    const result = Path.compare(point.path, another.path)\n\n    if (result === 0) {\n      if (point.offset < another.offset) return -1\n      if (point.offset > another.offset) return 1\n      return 0\n    }\n\n    return result\n  },\n\n  /**\n   * Check if a point is after another.\n   */\n\n  isAfter(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === 1\n  },\n\n  /**\n   * Check if a point is before another.\n   */\n\n  isBefore(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === -1\n  },\n\n  /**\n   * Check if a point is exactly equal to another.\n   */\n\n  equals(point: Point, another: Point): boolean {\n    // PERF: ensure the offsets are equal first since they are cheaper to check.\n    return (\n      point.offset === another.offset && Path.equals(point.path, another.path)\n    )\n  },\n\n  /**\n   * Check if a value implements the `Point` interface.\n   */\n\n  isPoint(value: any): value is Point {\n    return (\n      isPlainObject(value) &&\n      typeof value.offset === 'number' &&\n      Path.isPath(value.path)\n    )\n  },\n\n  /**\n   * Transform a point by an operation.\n   */\n\n  transform(\n    point: Point,\n    op: Operation,\n    options: { affinity?: 'forward' | 'backward' | null } = {}\n  ): Point | null {\n    return produce(point, p => {\n      const { affinity = 'forward' } = options\n      const { path, offset } = p\n\n      switch (op.type) {\n        case 'insert_node':\n        case 'move_node': {\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'insert_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset += op.text.length\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          if (Path.equals(op.path, path)) {\n            p.offset += op.position\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'remove_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset -= Math.min(offset - op.offset, op.text.length)\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {\n            return null\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'split_node': {\n          if (Path.equals(op.path, path)) {\n            if (op.position === offset && affinity == null) {\n              return null\n            } else if (\n              op.position < offset ||\n              (op.position === offset && affinity === 'forward')\n            ) {\n              p.offset -= op.position\n\n              p.path = Path.transform(path, op, {\n                ...options,\n                affinity: 'forward',\n              })!\n            }\n          } else {\n            p.path = Path.transform(path, op, options)!\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n\n/**\n * `PointEntry` objects are returned when iterating over `Point` objects that\n * belong to a range.\n */\n\nexport type PointEntry = [Point, 'anchor' | 'focus']\n","import { Operation, Point } from '..'\n\n/**\n * `PointRef` objects keep a specific point in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date point value.\n */\n\nexport interface PointRef {\n  current: Point | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Point | null\n}\n\nexport const PointRef = {\n  /**\n   * Transform the point ref's current value by an operation.\n   */\n\n  transform(ref: PointRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const point = Point.transform(current, op, { affinity })\n    ref.current = point\n\n    if (point == null) {\n      ref.unref()\n    }\n  },\n}\n","import { produce } from 'immer'\nimport isPlainObject from 'is-plain-object'\nimport { Operation, Path, Point, PointEntry } from '..'\n\n/**\n * `Range` objects are a set of points that refer to a specific span of a Slate\n * document. They can define a span inside a single node or a can span across\n * multiple nodes.\n */\n\nexport interface Range {\n  anchor: Point\n  focus: Point\n  [key: string]: unknown\n}\n\nexport const Range = {\n  /**\n   * Get the start and end points of a range, in the order in which they appear\n   * in the document.\n   */\n\n  edges(\n    range: Range,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): [Point, Point] {\n    const { reverse = false } = options\n    const { anchor, focus } = range\n    return Range.isBackward(range) === reverse\n      ? [anchor, focus]\n      : [focus, anchor]\n  },\n\n  /**\n   * Get the end point of a range.\n   */\n\n  end(range: Range): Point {\n    const [, end] = Range.edges(range)\n    return end\n  },\n\n  /**\n   * Check if a range is exactly equal to another.\n   */\n\n  equals(range: Range, another: Range): boolean {\n    return (\n      Point.equals(range.anchor, another.anchor) &&\n      Point.equals(range.focus, another.focus)\n    )\n  },\n\n  /**\n   * Check if a range includes a path, a point or part of another range.\n   */\n\n  includes(range: Range, target: Path | Point | Range): boolean {\n    if (Range.isRange(target)) {\n      if (\n        Range.includes(range, target.anchor) ||\n        Range.includes(range, target.focus)\n      ) {\n        return true\n      }\n\n      const [rs, re] = Range.edges(range)\n      const [ts, te] = Range.edges(target)\n      return Point.isBefore(rs, ts) && Point.isAfter(re, te)\n    }\n\n    const [start, end] = Range.edges(range)\n    let isAfterStart = false\n    let isBeforeEnd = false\n\n    if (Point.isPoint(target)) {\n      isAfterStart = Point.compare(target, start) >= 0\n      isBeforeEnd = Point.compare(target, end) <= 0\n    } else {\n      isAfterStart = Path.compare(target, start.path) >= 0\n      isBeforeEnd = Path.compare(target, end.path) <= 0\n    }\n\n    return isAfterStart && isBeforeEnd\n  },\n\n  /**\n   * Get the intersection of a range with another.\n   */\n\n  intersection(range: Range, another: Range): Range | null {\n    const { anchor, focus, ...rest } = range\n    const [s1, e1] = Range.edges(range)\n    const [s2, e2] = Range.edges(another)\n    const start = Point.isBefore(s1, s2) ? s2 : s1\n    const end = Point.isBefore(e1, e2) ? e1 : e2\n\n    if (Point.isBefore(end, start)) {\n      return null\n    } else {\n      return { anchor: start, focus: end, ...rest }\n    }\n  },\n\n  /**\n   * Check if a range is backward, meaning that its anchor point appears in the\n   * document _after_ its focus point.\n   */\n\n  isBackward(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.isAfter(anchor, focus)\n  },\n\n  /**\n   * Check if a range is collapsed, meaning that both its anchor and focus\n   * points refer to the exact same position in the document.\n   */\n\n  isCollapsed(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.equals(anchor, focus)\n  },\n\n  /**\n   * Check if a range is expanded.\n   *\n   * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.\n   */\n\n  isExpanded(range: Range): boolean {\n    return !Range.isCollapsed(range)\n  },\n\n  /**\n   * Check if a range is forward.\n   *\n   * This is the opposite of [[Range.isBackward]] and is provided for legibility.\n   */\n\n  isForward(range: Range): boolean {\n    return !Range.isBackward(range)\n  },\n\n  /**\n   * Check if a value implements the [[Range]] interface.\n   */\n\n  isRange(value: any): value is Range {\n    return (\n      isPlainObject(value) &&\n      Point.isPoint(value.anchor) &&\n      Point.isPoint(value.focus)\n    )\n  },\n\n  /**\n   * Iterate through all of the point entries in a range.\n   */\n\n  *points(range: Range): Generator<PointEntry, void, undefined> {\n    yield [range.anchor, 'anchor']\n    yield [range.focus, 'focus']\n  },\n\n  /**\n   * Get the start point of a range.\n   */\n\n  start(range: Range): Point {\n    const [start] = Range.edges(range)\n    return start\n  },\n\n  /**\n   * Transform a range by an operation.\n   */\n\n  transform(\n    range: Range,\n    op: Operation,\n    options: {\n      affinity?: 'forward' | 'backward' | 'outward' | 'inward' | null\n    } = {}\n  ): Range | null {\n    const { affinity = 'inward' } = options\n    let affinityAnchor: 'forward' | 'backward' | null\n    let affinityFocus: 'forward' | 'backward' | null\n\n    if (affinity === 'inward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      } else {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      }\n    } else if (affinity === 'outward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      } else {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      }\n    } else {\n      affinityAnchor = affinity\n      affinityFocus = affinity\n    }\n\n    return produce(range, r => {\n      const anchor = Point.transform(r.anchor, op, { affinity: affinityAnchor })\n      const focus = Point.transform(r.focus, op, { affinity: affinityFocus })\n\n      if (!anchor || !focus) {\n        return null\n      }\n\n      r.anchor = anchor\n      r.focus = focus\n    })\n  },\n}\n","import { Operation, Range } from '..'\n\n/**\n * `RangeRef` objects keep a specific range in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date range value.\n */\n\nexport interface RangeRef {\n  current: Range | null\n  affinity: 'forward' | 'backward' | 'outward' | 'inward' | null\n  unref(): Range | null\n}\n\nexport const RangeRef = {\n  /**\n   * Transform the range ref's current value by an operation.\n   */\n\n  transform(ref: RangeRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Range.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import isPlainObject from 'is-plain-object'\nimport { Range } from '..'\n\n/**\n * `Text` objects represent the nodes that contain the actual text content of a\n * Slate document along with any formatting properties. They are always leaf\n * nodes in the document tree as they cannot contain any children.\n */\n\nexport interface Text {\n  text: string\n  [key: string]: unknown\n}\n\nexport const Text = {\n  /**\n   * Check if two text nodes are equal.\n   */\n\n  equals(\n    text: Text,\n    another: Text,\n    options: { loose?: boolean } = {}\n  ): boolean {\n    const { loose = false } = options\n\n    for (const key in text) {\n      if (loose && key === 'text') {\n        continue\n      }\n\n      if (text[key] !== another[key]) {\n        return false\n      }\n    }\n\n    for (const key in another) {\n      if (loose && key === 'text') {\n        continue\n      }\n\n      if (text[key] !== another[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Check if a value implements the `Text` interface.\n   */\n\n  isText(value: any): value is Text {\n    return isPlainObject(value) && typeof value.text === 'string'\n  },\n\n  /**\n   * Check if a value is a list of `Text` objects.\n   */\n\n  isTextList(value: any): value is Text[] {\n    return Array.isArray(value) && (value.length === 0 || Text.isText(value[0]))\n  },\n\n  /**\n   * Check if an text matches set of properties.\n   *\n   * Note: this is for matching custom properties, and it does not ensure that\n   * the `text` property are two nodes equal.\n   */\n\n  matches(text: Text, props: Partial<Text>): boolean {\n    for (const key in props) {\n      if (key === 'text') {\n        continue\n      }\n\n      if (text[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Get the leaves for a text node given decorations.\n   */\n\n  decorations(node: Text, decorations: Range[]): Text[] {\n    let leaves: Text[] = [{ ...node }]\n\n    for (const dec of decorations) {\n      const { anchor, focus, ...rest } = dec\n      const [start, end] = Range.edges(dec)\n      const next = []\n      let o = 0\n\n      for (const leaf of leaves) {\n        const { length } = leaf.text\n        const offset = o\n        o += length\n\n        // If the range encompases the entire leaf, add the range.\n        if (start.offset <= offset && end.offset >= offset + length) {\n          Object.assign(leaf, rest)\n          next.push(leaf)\n          continue\n        }\n\n        // If the range starts after the leaf, or ends before it, continue.\n        if (\n          start.offset > offset + length ||\n          end.offset < offset ||\n          (end.offset === offset && offset !== 0)\n        ) {\n          next.push(leaf)\n          continue\n        }\n\n        // Otherwise we need to split the leaf, at the start, end, or both,\n        // and add the range to the middle intersecting section. Do the end\n        // split first since we don't need to update the offset that way.\n        let middle = leaf\n        let before\n        let after\n\n        if (end.offset < offset + length) {\n          const off = end.offset - offset\n          after = { ...middle, text: middle.text.slice(off) }\n          middle = { ...middle, text: middle.text.slice(0, off) }\n        }\n\n        if (start.offset > offset) {\n          const off = start.offset - offset\n          before = { ...middle, text: middle.text.slice(0, off) }\n          middle = { ...middle, text: middle.text.slice(off) }\n        }\n\n        Object.assign(middle, rest)\n\n        if (before) {\n          next.push(before)\n        }\n\n        next.push(middle)\n\n        if (after) {\n          next.push(after)\n        }\n      }\n\n      leaves = next\n    }\n\n    return leaves\n  },\n}\n","import { createDraft, finishDraft, isDraft } from 'immer'\nimport {\n  Node,\n  Editor,\n  Range,\n  Point,\n  Text,\n  Element,\n  Operation,\n  Descendant,\n  NodeEntry,\n  Path,\n  Ancestor,\n} from '..'\n\nexport const GeneralTransforms = {\n  /**\n   * Transform the editor by an operation.\n   */\n\n  transform(editor: Editor, op: Operation) {\n    editor.children = createDraft(editor.children)\n    let selection = editor.selection && createDraft(editor.selection)\n\n    switch (op.type) {\n      case 'insert_node': {\n        const { path, node } = op\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        parent.children.splice(index, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'insert_text': {\n        const { path, offset, text } = op\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset)\n        node.text = before + text + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'merge_node': {\n        const { path } = op\n        const node = Node.get(editor, path)\n        const prevPath = Path.previous(path)\n        const prev = Node.get(editor, prevPath)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        if (Text.isText(node) && Text.isText(prev)) {\n          prev.text += node.text\n        } else if (!Text.isText(node) && !Text.isText(prev)) {\n          prev.children.push(...node.children)\n        } else {\n          throw new Error(\n            `Cannot apply a \"merge_node\" operation at path [${path}] to nodes of different interaces: ${node} ${prev}`\n          )\n        }\n\n        parent.children.splice(index, 1)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        const { path, newPath } = op\n\n        if (Path.isAncestor(path, newPath)) {\n          throw new Error(\n            `Cannot move a path [${path}] to new path [${newPath}] because the destination is inside itself.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        // This is tricky, but since the `path` and `newPath` both refer to\n        // the same snapshot in time, there's a mismatch. After either\n        // removing the original position, the second step's path can be out\n        // of date. So instead of using the `op.newPath` directly, we\n        // transform `op.path` to ascertain what the `newPath` would be after\n        // the operation was applied.\n        parent.children.splice(index, 1)\n        const truePath = Path.transform(path, op)!\n        const newParent = Node.get(editor, Path.parent(truePath)) as Ancestor\n        const newIndex = truePath[truePath.length - 1]\n\n        newParent.children.splice(newIndex, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'remove_node': {\n        const { path } = op\n        const index = path[path.length - 1]\n        const parent = Node.parent(editor, path)\n        parent.children.splice(index, 1)\n\n        // Transform all of the points in the value, but if the point was in the\n        // node that was removed we need to update the range or remove it.\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            const result = Point.transform(point, op)\n\n            if (selection != null && result != null) {\n              selection[key] = result\n            } else {\n              let prev: NodeEntry<Text> | undefined\n              let next: NodeEntry<Text> | undefined\n\n              for (const [n, p] of Node.texts(editor)) {\n                if (Path.compare(p, path) === -1) {\n                  prev = [n, p]\n                } else {\n                  next = [n, p]\n                  break\n                }\n              }\n\n              if (prev) {\n                point.path = prev[1]\n                point.offset = prev[0].text.length\n              } else if (next) {\n                point.path = next[1]\n                point.offset = 0\n              } else {\n                selection = null\n              }\n            }\n          }\n        }\n\n        break\n      }\n\n      case 'remove_text': {\n        const { path, offset, text } = op\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset + text.length)\n        node.text = before + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'set_node': {\n        const { path, newProperties } = op\n\n        if (path.length === 0) {\n          throw new Error(`Cannot set properties on the root node!`)\n        }\n\n        const node = Node.get(editor, path)\n\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            throw new Error(`Cannot set the \"${key}\" property of nodes!`)\n          }\n\n          const value = newProperties[key]\n\n          if (value == null) {\n            delete node[key]\n          } else {\n            node[key] = value\n          }\n        }\n\n        break\n      }\n\n      case 'set_selection': {\n        const { newProperties } = op\n\n        if (newProperties == null) {\n          selection = newProperties\n        } else if (selection == null) {\n          if (!Range.isRange(newProperties)) {\n            throw new Error(\n              `Cannot apply an incomplete \"set_selection\" operation properties ${JSON.stringify(\n                newProperties\n              )} when there is no current selection.`\n            )\n          }\n\n          selection = newProperties\n        } else {\n          Object.assign(selection, newProperties)\n        }\n\n        break\n      }\n\n      case 'split_node': {\n        const { path, position, properties } = op\n\n        if (path.length === 0) {\n          throw new Error(\n            `Cannot apply a \"split_node\" operation at path [${path}] because the root node cannot be split.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        let newNode: Descendant\n\n        if (Text.isText(node)) {\n          const before = node.text.slice(0, position)\n          const after = node.text.slice(position)\n          node.text = before\n          newNode = {\n            ...node,\n            ...(properties as Partial<Text>),\n            text: after,\n          }\n        } else {\n          const before = node.children.slice(0, position)\n          const after = node.children.slice(position)\n          node.children = before\n\n          newNode = {\n            ...node,\n            ...(properties as Partial<Element>),\n            children: after,\n          }\n        }\n\n        parent.children.splice(index + 1, 0, newNode)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n    }\n\n    editor.children = finishDraft(editor.children) as Node[]\n\n    if (selection) {\n      editor.selection = isDraft(selection)\n        ? (finishDraft(selection) as Range)\n        : selection\n    } else {\n      editor.selection = null\n    }\n  },\n}\n","import {\n  Editor,\n  Element,\n  Location,\n  Node,\n  Path,\n  Point,\n  Range,\n  Text,\n  Transforms,\n  NodeEntry,\n  Ancestor,\n} from '..'\n\nexport const NodeTransforms = {\n  /**\n   * Insert nodes at a specific location in the Editor.\n   */\n\n  insertNodes(\n    editor: Editor,\n    nodes: Node | Node[],\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      select?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n      let { at, match, select } = options\n\n      if (Node.isNode(nodes)) {\n        nodes = [nodes]\n      }\n\n      if (nodes.length === 0) {\n        return\n      }\n\n      const [node] = nodes\n\n      // By default, use the selection as the target location. But if there is\n      // no selection, insert at the end of the document since that is such a\n      // common use case when inserting from a non-selected state.\n      if (!at) {\n        if (editor.selection) {\n          at = editor.selection\n        } else if (editor.children.length > 0) {\n          at = Editor.end(editor, [])\n        } else {\n          at = [0]\n        }\n\n        select = true\n      }\n\n      if (select == null) {\n        select = false\n      }\n\n      if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at)\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n        }\n      }\n\n      if (Point.isPoint(at)) {\n        if (match == null) {\n          if (Text.isText(node)) {\n            match = n => Text.isText(n)\n          } else if (editor.isInline(node)) {\n            match = n => Text.isText(n) || Editor.isInline(editor, n)\n          } else {\n            match = n => Editor.isBlock(editor, n)\n          }\n        }\n\n        const [entry] = Editor.nodes(editor, {\n          at: at.path,\n          match,\n          mode,\n          voids,\n        })\n\n        if (entry) {\n          const [, matchPath] = entry\n          const pathRef = Editor.pathRef(editor, matchPath)\n          const isAtEnd = Editor.isEnd(editor, at, matchPath)\n          Transforms.splitNodes(editor, { at, match, mode, voids })\n          const path = pathRef.unref()!\n          at = isAtEnd ? Path.next(path) : path\n        } else {\n          return\n        }\n      }\n\n      const parentPath = Path.parent(at)\n      let index = at[at.length - 1]\n\n      if (!voids && Editor.void(editor, { at: parentPath })) {\n        return\n      }\n\n      for (const node of nodes) {\n        const path = parentPath.concat(index)\n        index++\n        editor.apply({ type: 'insert_node', path, node })\n      }\n\n      if (select) {\n        const point = Editor.end(editor, at)\n\n        if (point) {\n          Transforms.select(editor, point)\n        }\n      }\n    })\n  },\n\n  /**\n   * Lift nodes at a specific location upwards in the document tree, splitting\n   * their parent in two if necessary.\n   */\n\n  liftNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { at = editor.selection, mode = 'lowest', voids = false } = options\n      let { match } = options\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!at) {\n        return\n      }\n\n      const matches = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n\n        if (path.length < 2) {\n          throw new Error(\n            `Cannot lift node at a path [${path}] because it has a depth of less than \\`2\\`.`\n          )\n        }\n\n        const parentNodeEntry = Editor.node(editor, Path.parent(path))\n        const [parent, parentPath] = parentNodeEntry as NodeEntry<Ancestor>\n        const index = path[path.length - 1]\n        const { length } = parent.children\n\n        if (length === 1) {\n          const toPath = Path.next(parentPath)\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n          Transforms.removeNodes(editor, { at: parentPath, voids })\n        } else if (index === 0) {\n          Transforms.moveNodes(editor, { at: path, to: parentPath, voids })\n        } else if (index === length - 1) {\n          const toPath = Path.next(parentPath)\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        } else {\n          const splitPath = Path.next(path)\n          const toPath = Path.next(parentPath)\n          Transforms.splitNodes(editor, { at: splitPath, voids })\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        }\n      }\n    })\n  },\n\n  /**\n   * Merge a node at a location with the previous node of the same depth,\n   * removing any empty containing nodes after the merge if necessary.\n   */\n\n  mergeNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      let { match, at = editor.selection } = options\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          const [parent] = Editor.parent(editor, at)\n          match = n => parent.children.includes(n)\n        } else {\n          match = n => Editor.isBlock(editor, n)\n        }\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n\n          if (options.at == null) {\n            Transforms.select(editor, at)\n          }\n        }\n      }\n\n      const [current] = Editor.nodes(editor, { at, match, voids, mode })\n      const prev = Editor.previous(editor, { at, match, voids, mode })\n\n      if (!current || !prev) {\n        return\n      }\n\n      const [node, path] = current\n      const [prevNode, prevPath] = prev\n\n      if (path.length === 0 || prevPath.length === 0) {\n        return\n      }\n\n      const newPath = Path.next(prevPath)\n      const commonPath = Path.common(path, prevPath)\n      const isPreviousSibling = Path.isSibling(path, prevPath)\n      const levels = Array.from(Editor.levels(editor, { at: path }), ([n]) => n)\n        .slice(commonPath.length)\n        .slice(0, -1)\n\n      // Determine if the merge will leave an ancestor of the path empty as a\n      // result, in which case we'll want to remove it after merging.\n      const emptyAncestor = Editor.above(editor, {\n        at: path,\n        mode: 'highest',\n        match: n =>\n          levels.includes(n) && Element.isElement(n) && n.children.length === 1,\n      })\n\n      const emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1])\n      let properties\n      let position\n\n      // Ensure that the nodes are equivalent, and figure out what the position\n      // and extra properties of the merge will be.\n      if (Text.isText(node) && Text.isText(prevNode)) {\n        const { text, ...rest } = node\n        position = prevNode.text.length\n        properties = rest as Partial<Text>\n      } else if (Element.isElement(node) && Element.isElement(prevNode)) {\n        const { children, ...rest } = node\n        position = prevNode.children.length\n        properties = rest as Partial<Element>\n      } else {\n        throw new Error(\n          `Cannot merge the node at path [${path}] with the previous sibling because it is not the same kind: ${JSON.stringify(\n            node\n          )} ${JSON.stringify(prevNode)}`\n        )\n      }\n\n      // If the node isn't already the next sibling of the previous node, move\n      // it so that it is before merging.\n      if (!isPreviousSibling) {\n        Transforms.moveNodes(editor, { at: path, to: newPath, voids })\n      }\n\n      // If there was going to be an empty ancestor of the node that was merged,\n      // we remove it from the tree.\n      if (emptyRef) {\n        Transforms.removeNodes(editor, { at: emptyRef.current!, voids })\n      }\n\n      // If the target node that we're merging with is empty, remove it instead\n      // of merging the two. This is a common rich text editor behavior to\n      // prevent losing formatting when deleting entire nodes when you have a\n      // hanging selection.\n      if (\n        (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode)) ||\n        (Text.isText(prevNode) && prevNode.text === '')\n      ) {\n        Transforms.removeNodes(editor, { at: prevPath, voids })\n      } else {\n        editor.apply({\n          type: 'merge_node',\n          path: newPath,\n          position,\n          properties,\n        })\n      }\n\n      if (emptyRef) {\n        emptyRef.unref()\n      }\n    })\n  },\n\n  /**\n   * Move the nodes at a location to a new location.\n   */\n\n  moveNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      to: Path\n      voids?: boolean\n    }\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const {\n        to,\n        at = editor.selection,\n        mode = 'lowest',\n        voids = false,\n      } = options\n      let { match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      const toRef = Editor.pathRef(editor, to)\n      const targets = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(targets, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        const newPath = toRef.current!\n\n        if (path.length !== 0) {\n          editor.apply({ type: 'move_node', path, newPath })\n        }\n      }\n\n      toRef.unref()\n    })\n  },\n\n  /**\n   * Remove the nodes at a specific location in the document.\n   */\n\n  removeNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n      let { at = editor.selection, match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      const depths = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(depths, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n\n        if (path) {\n          const [node] = Editor.node(editor, path)\n          editor.apply({ type: 'remove_node', path, node })\n        }\n      }\n    })\n  },\n\n  /**\n   * Set new properties on the nodes at a location.\n   */\n\n  setNodes(\n    editor: Editor,\n    props: Partial<Node>,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      let { match, at = editor.selection } = options\n      const {\n        hanging = false,\n        mode = 'lowest',\n        split = false,\n        voids = false,\n      } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      if (split && Range.isRange(at)) {\n        const rangeRef = Editor.rangeRef(editor, at, { affinity: 'inward' })\n        const [start, end] = Range.edges(at)\n        const splitMode = mode === 'lowest' ? 'lowest' : 'highest'\n        Transforms.splitNodes(editor, {\n          at: end,\n          match,\n          mode: splitMode,\n          voids,\n        })\n        Transforms.splitNodes(editor, {\n          at: start,\n          match,\n          mode: splitMode,\n          voids,\n        })\n        at = rangeRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n\n      for (const [node, path] of Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids,\n      })) {\n        const properties: Partial<Node> = {}\n        const newProperties: Partial<Node> = {}\n\n        // You can't set properties on the editor node.\n        if (path.length === 0) {\n          continue\n        }\n\n        for (const k in props) {\n          if (k === 'children' || k === 'text') {\n            continue\n          }\n\n          if (props[k] !== node[k]) {\n            properties[k] = node[k]\n            newProperties[k] = props[k]\n          }\n        }\n\n        if (Object.keys(newProperties).length !== 0) {\n          editor.apply({\n            type: 'set_node',\n            path,\n            properties,\n            newProperties,\n          })\n        }\n      }\n    })\n  },\n\n  /**\n   * Split the nodes at a specific location.\n   */\n\n  splitNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      always?: boolean\n      height?: number\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', voids = false } = options\n      let { match, at = editor.selection, height = 0, always = false } = options\n\n      if (match == null) {\n        match = n => Editor.isBlock(editor, n)\n      }\n\n      if (Range.isRange(at)) {\n        at = deleteRange(editor, at)\n      }\n\n      // If the target is a path, the default height-skipping and position\n      // counters need to account for us potentially splitting at a non-leaf.\n      if (Path.isPath(at)) {\n        const path = at\n        const point = Editor.point(editor, path)\n        const [parent] = Editor.parent(editor, path)\n        match = n => n === parent\n        height = point.path.length - path.length + 1\n        at = point\n        always = true\n      }\n\n      if (!at) {\n        return\n      }\n\n      const beforeRef = Editor.pointRef(editor, at, {\n        affinity: 'backward',\n      })\n      const [highest] = Editor.nodes(editor, { at, match, mode, voids })\n\n      if (!highest) {\n        return\n      }\n\n      const voidMatch = Editor.void(editor, { at, mode: 'highest' })\n      const nudge = 0\n\n      if (!voids && voidMatch) {\n        const [voidNode, voidPath] = voidMatch\n\n        if (Element.isElement(voidNode) && editor.isInline(voidNode)) {\n          let after = Editor.after(editor, voidPath)\n\n          if (!after) {\n            const text = { text: '' }\n            const afterPath = Path.next(voidPath)\n            Transforms.insertNodes(editor, text, { at: afterPath, voids })\n            after = Editor.point(editor, afterPath)!\n          }\n\n          at = after\n          always = true\n        }\n\n        const siblingHeight = at.path.length - voidPath.length\n        height = siblingHeight + 1\n        always = true\n      }\n\n      const afterRef = Editor.pointRef(editor, at)\n      const depth = at.path.length - height\n      const [, highestPath] = highest\n      const lowestPath = at.path.slice(0, depth)\n      let position = height === 0 ? at.offset : at.path[depth] + nudge\n\n      for (const [node, path] of Editor.levels(editor, {\n        at: lowestPath,\n        reverse: true,\n        voids,\n      })) {\n        let split = false\n\n        if (\n          path.length < highestPath.length ||\n          path.length === 0 ||\n          (!voids && Editor.isVoid(editor, node))\n        ) {\n          break\n        }\n\n        const point = beforeRef.current!\n        const isEnd = Editor.isEnd(editor, point, path)\n\n        if (always || !beforeRef || !Editor.isEdge(editor, point, path)) {\n          split = true\n          const { text, children, ...properties } = node\n          editor.apply({\n            type: 'split_node',\n            path,\n            position,\n            properties,\n          })\n        }\n\n        position = path[path.length - 1] + (split || isEnd ? 1 : 0)\n      }\n\n      if (options.at == null) {\n        const point = afterRef.current || Editor.end(editor, [])\n        Transforms.select(editor, point)\n      }\n\n      beforeRef.unref()\n      afterRef.unref()\n    })\n  },\n\n  /**\n   * Unset properties on the nodes at a location.\n   */\n\n  unsetNodes(\n    editor: Editor,\n    props: string | string[],\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    if (!Array.isArray(props)) {\n      props = [props]\n    }\n\n    const obj = {}\n\n    for (const key of props) {\n      obj[key] = null\n    }\n\n    Transforms.setNodes(editor, obj, options)\n  },\n\n  /**\n   * Unwrap the nodes at a location from a parent node, splitting the parent if\n   * necessary to ensure that only the content in the range is unwrapped.\n   */\n\n  unwrapNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    }\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', split = false, voids = false } = options\n      let { at = editor.selection, match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      const rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null\n      const matches = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        const [node] = Editor.node(editor, path) as NodeEntry<Ancestor>\n        let range = Editor.range(editor, path)\n\n        if (split && rangeRef) {\n          range = Range.intersection(rangeRef.current!, range)!\n        }\n\n        Transforms.liftNodes(editor, {\n          at: range,\n          match: n => node.children.includes(n),\n          voids,\n        })\n      }\n\n      if (rangeRef) {\n        rangeRef.unref()\n      }\n    })\n  },\n\n  /**\n   * Wrap the nodes at a location in a new container node, splitting the edges\n   * of the range first to ensure that only the content in the range is wrapped.\n   */\n\n  wrapNodes(\n    editor: Editor,\n    element: Element,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', split = false, voids = false } = options\n      let { match, at = editor.selection } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          match = matchPath(editor, at)\n        } else if (editor.isInline(element)) {\n          match = n => Editor.isInline(editor, n) || Text.isText(n)\n        } else {\n          match = n => Editor.isBlock(editor, n)\n        }\n      }\n\n      if (split && Range.isRange(at)) {\n        const [start, end] = Range.edges(at)\n        const rangeRef = Editor.rangeRef(editor, at, {\n          affinity: 'inward',\n        })\n        Transforms.splitNodes(editor, { at: end, match, voids })\n        Transforms.splitNodes(editor, { at: start, match, voids })\n        at = rangeRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n\n      const roots = Array.from(\n        Editor.nodes(editor, {\n          at,\n          match: editor.isInline(element)\n            ? n => Editor.isBlock(editor, n)\n            : n => Editor.isEditor(n),\n          mode: 'lowest',\n          voids,\n        })\n      )\n\n      for (const [, rootPath] of roots) {\n        const a = Range.isRange(at)\n          ? Range.intersection(at, Editor.range(editor, rootPath))\n          : at\n\n        if (!a) {\n          continue\n        }\n\n        const matches = Array.from(\n          Editor.nodes(editor, { at: a, match, mode, voids })\n        )\n\n        if (matches.length > 0) {\n          const [first] = matches\n          const last = matches[matches.length - 1]\n          const [, firstPath] = first\n          const [, lastPath] = last\n          const commonPath = Path.equals(firstPath, lastPath)\n            ? Path.parent(firstPath)\n            : Path.common(firstPath, lastPath)\n\n          const range = Editor.range(editor, firstPath, lastPath)\n          const commonNodeEntry = Editor.node(editor, commonPath)\n          const [commonNode] = commonNodeEntry as NodeEntry<Ancestor>\n          const depth = commonPath.length + 1\n          const wrapperPath = Path.next(lastPath.slice(0, depth))\n          const wrapper = { ...element, children: [] }\n          Transforms.insertNodes(editor, wrapper, { at: wrapperPath, voids })\n\n          Transforms.moveNodes(editor, {\n            at: range,\n            match: n => commonNode.children.includes(n),\n            to: wrapperPath.concat(0),\n            voids,\n          })\n        }\n      }\n    })\n  },\n}\n\n/**\n * Convert a range into a point by deleting it's content.\n */\n\nconst deleteRange = (editor: Editor, range: Range): Point | null => {\n  if (Range.isCollapsed(range)) {\n    return range.anchor\n  } else {\n    const [, end] = Range.edges(range)\n    const pointRef = Editor.pointRef(editor, end)\n    Transforms.delete(editor, { at: range })\n    return pointRef.unref()\n  }\n}\n\nconst matchPath = (editor: Editor, path: Path): ((node: Node) => boolean) => {\n  const [node] = Editor.node(editor, path)\n  return n => n === node\n}\n","import { Editor, Location, Point, Range, Transforms } from '..'\n\nexport const SelectionTransforms = {\n  /**\n   * Collapse the selection.\n   */\n\n  collapse(\n    editor: Editor,\n    options: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ) {\n    const { edge = 'anchor' } = options\n    const { selection } = editor\n\n    if (!selection) {\n      return\n    } else if (edge === 'anchor') {\n      Transforms.select(editor, selection.anchor)\n    } else if (edge === 'focus') {\n      Transforms.select(editor, selection.focus)\n    } else if (edge === 'start') {\n      const [start] = Range.edges(selection)\n      Transforms.select(editor, start)\n    } else if (edge === 'end') {\n      const [, end] = Range.edges(selection)\n      Transforms.select(editor, end)\n    }\n  },\n\n  /**\n   * Unset the selection.\n   */\n\n  deselect(editor: Editor) {\n    const { selection } = editor\n\n    if (selection) {\n      editor.apply({\n        type: 'set_selection',\n        properties: selection,\n        newProperties: null,\n      })\n    }\n  },\n\n  /**\n   * Move the selection's point forward or backward.\n   */\n\n  move(\n    editor: Editor,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line'\n      reverse?: boolean\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ) {\n    const { selection } = editor\n    const { distance = 1, unit = 'character', reverse = false } = options\n    let { edge = null } = options\n\n    if (!selection) {\n      return\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n    }\n\n    const { anchor, focus } = selection\n    const opts = { distance, unit }\n    const props: Partial<Range> = {}\n\n    if (edge == null || edge === 'anchor') {\n      const point = reverse\n        ? Editor.before(editor, anchor, opts)\n        : Editor.after(editor, anchor, opts)\n\n      if (point) {\n        props.anchor = point\n      }\n    }\n\n    if (edge == null || edge === 'focus') {\n      const point = reverse\n        ? Editor.before(editor, focus, opts)\n        : Editor.after(editor, focus, opts)\n\n      if (point) {\n        props.focus = point\n      }\n    }\n\n    Transforms.setSelection(editor, props)\n  },\n\n  /**\n   * Set the selection to a new value.\n   */\n\n  select(editor: Editor, target: Location) {\n    const { selection } = editor\n    target = Editor.range(editor, target)\n\n    if (selection) {\n      Transforms.setSelection(editor, target)\n      return\n    }\n\n    if (!Range.isRange(target)) {\n      throw new Error(\n        `When setting the selection and the current selection is \\`null\\` you must provide at least an \\`anchor\\` and \\`focus\\`, but you passed: ${JSON.stringify(\n          target\n        )}`\n      )\n    }\n\n    editor.apply({\n      type: 'set_selection',\n      properties: selection,\n      newProperties: target,\n    })\n  },\n\n  /**\n   * Set new properties on one of the selection's points.\n   */\n\n  setPoint(\n    editor: Editor,\n    props: Partial<Point>,\n    options: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    }\n  ) {\n    const { selection } = editor\n    let { edge = 'both' } = options\n\n    if (!selection) {\n      return\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n    }\n\n    const { anchor, focus } = selection\n    const point = edge === 'anchor' ? anchor : focus\n\n    Transforms.setSelection(editor, {\n      [edge === 'anchor' ? 'anchor' : 'focus']: { ...point, ...props },\n    })\n  },\n\n  /**\n   * Set new properties on the selection.\n   */\n\n  setSelection(editor: Editor, props: Partial<Range>) {\n    const { selection } = editor\n    const oldProps: Partial<Range> | null = {}\n    const newProps: Partial<Range> = {}\n\n    if (!selection) {\n      return\n    }\n\n    for (const k in props) {\n      if (\n        (k === 'anchor' &&\n          props.anchor != null &&\n          !Point.equals(props.anchor, selection.anchor)) ||\n        (k === 'focus' &&\n          props.focus != null &&\n          !Point.equals(props.focus, selection.focus)) ||\n        (k !== 'anchor' && k !== 'focus' && props[k] !== selection[k])\n      ) {\n        oldProps[k] = selection[k]\n        newProps[k] = props[k]\n      }\n    }\n\n    if (Object.keys(oldProps).length > 0) {\n      editor.apply({\n        type: 'set_selection',\n        properties: oldProps,\n        newProperties: newProps,\n      })\n    }\n  },\n}\n","import {\n  Editor,\n  Element,\n  Location,\n  Node,\n  NodeEntry,\n  Path,\n  Text,\n  Point,\n  Range,\n  Transforms,\n} from '..'\n\nexport const TextTransforms = {\n  /**\n   * Delete content in the editor.\n   */\n\n  delete(\n    editor: Editor,\n    options: {\n      at?: Location\n      distance?: number\n      unit?: 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const {\n        reverse = false,\n        unit = 'character',\n        distance = 1,\n        voids = false,\n      } = options\n      let { at = editor.selection, hanging = false } = options\n\n      if (!at) {\n        return\n      }\n\n      if (Range.isRange(at) && Range.isCollapsed(at)) {\n        at = at.anchor\n      }\n\n      if (Point.isPoint(at)) {\n        const furthestVoid = Editor.void(editor, { at, mode: 'highest' })\n\n        if (!voids && furthestVoid) {\n          const [, voidPath] = furthestVoid\n          at = voidPath\n        } else {\n          const opts = { unit, distance }\n          const target = reverse\n            ? Editor.before(editor, at, opts) || Editor.start(editor, [])\n            : Editor.after(editor, at, opts) || Editor.end(editor, [])\n          at = { anchor: at, focus: target }\n          hanging = true\n        }\n      }\n\n      if (Path.isPath(at)) {\n        Transforms.removeNodes(editor, { at, voids })\n        return\n      }\n\n      if (Range.isCollapsed(at)) {\n        return\n      }\n\n      if (!hanging) {\n        at = Editor.unhangRange(editor, at, { voids })\n      }\n\n      let [start, end] = Range.edges(at)\n      const startBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: start,\n        voids,\n      })\n      const endBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: end,\n        voids,\n      })\n      const isAcrossBlocks =\n        startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1])\n      const isSingleText = Path.equals(start.path, end.path)\n      const startVoid = voids\n        ? null\n        : Editor.void(editor, { at: start, mode: 'highest' })\n      const endVoid = voids\n        ? null\n        : Editor.void(editor, { at: end, mode: 'highest' })\n\n      // If the start or end points are inside an inline void, nudge them out.\n      if (startVoid) {\n        const before = Editor.before(editor, start)\n\n        if (\n          before &&\n          startBlock &&\n          Path.isAncestor(startBlock[1], before.path)\n        ) {\n          start = before\n        }\n      }\n\n      if (endVoid) {\n        const after = Editor.after(editor, end)\n\n        if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n          end = after\n        }\n      }\n\n      // Get the highest nodes that are completely inside the range, as well as\n      // the start and end nodes.\n      const matches: NodeEntry[] = []\n      let lastPath: Path | undefined\n\n      for (const entry of Editor.nodes(editor, { at, voids })) {\n        const [node, path] = entry\n\n        if (lastPath && Path.compare(path, lastPath) === 0) {\n          continue\n        }\n\n        if (\n          (!voids && Editor.isVoid(editor, node)) ||\n          (!Path.isCommon(path, start.path) && !Path.isCommon(path, end.path))\n        ) {\n          matches.push(entry)\n          lastPath = path\n        }\n      }\n\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n      const startRef = Editor.pointRef(editor, start)\n      const endRef = Editor.pointRef(editor, end)\n\n      if (!isSingleText && !startVoid) {\n        const point = startRef.current!\n        const [node] = Editor.leaf(editor, point)\n        const { path } = point\n        const { offset } = start\n        const text = node.text.slice(offset)\n        editor.apply({ type: 'remove_text', path, offset, text })\n      }\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        Transforms.removeNodes(editor, { at: path, voids })\n      }\n\n      if (!endVoid) {\n        const point = endRef.current!\n        const [node] = Editor.leaf(editor, point)\n        const { path } = point\n        const offset = isSingleText ? start.offset : 0\n        const text = node.text.slice(offset, end.offset)\n        editor.apply({ type: 'remove_text', path, offset, text })\n      }\n\n      if (\n        !isSingleText &&\n        isAcrossBlocks &&\n        endRef.current &&\n        startRef.current\n      ) {\n        Transforms.mergeNodes(editor, {\n          at: endRef.current,\n          hanging: true,\n          voids,\n        })\n      }\n\n      const point = endRef.unref() || startRef.unref()\n\n      if (options.at == null && point) {\n        Transforms.select(editor, point)\n      }\n    })\n  },\n\n  /**\n   * Insert a fragment at a specific location in the editor.\n   */\n\n  insertFragment(\n    editor: Editor,\n    fragment: Node[],\n    options: {\n      at?: Location\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false } = options\n      let { at = editor.selection } = options\n\n      if (!fragment.length) {\n        return\n      }\n\n      if (!at) {\n        return\n      } else if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at)\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n        }\n      } else if (Path.isPath(at)) {\n        at = Editor.start(editor, at)\n      }\n\n      if (!voids && Editor.void(editor, { at })) {\n        return\n      }\n\n      // If the insert point is at the edge of an inline node, move it outside\n      // instead since it will need to be split otherwise.\n      const inlineElementMatch = Editor.above(editor, {\n        at,\n        match: n => Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      if (inlineElementMatch) {\n        const [, inlinePath] = inlineElementMatch\n\n        if (Editor.isEnd(editor, at, inlinePath)) {\n          const after = Editor.after(editor, inlinePath)!\n          at = after\n        } else if (Editor.isStart(editor, at, inlinePath)) {\n          const before = Editor.before(editor, inlinePath)!\n          at = before\n        }\n      }\n\n      const blockMatch = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at,\n        voids,\n      })!\n      const [, blockPath] = blockMatch\n      const isBlockStart = Editor.isStart(editor, at, blockPath)\n      const isBlockEnd = Editor.isEnd(editor, at, blockPath)\n      const mergeStart = !isBlockStart || (isBlockStart && isBlockEnd)\n      const mergeEnd = !isBlockEnd\n      const [, firstPath] = Node.first({ children: fragment }, [])\n      const [, lastPath] = Node.last({ children: fragment }, [])\n\n      const matches: NodeEntry[] = []\n      const matcher = ([n, p]: NodeEntry) => {\n        if (\n          mergeStart &&\n          Path.isAncestor(p, firstPath) &&\n          Element.isElement(n) &&\n          !editor.isVoid(n) &&\n          !editor.isInline(n)\n        ) {\n          return false\n        }\n\n        if (\n          mergeEnd &&\n          Path.isAncestor(p, lastPath) &&\n          Element.isElement(n) &&\n          !editor.isVoid(n) &&\n          !editor.isInline(n)\n        ) {\n          return false\n        }\n\n        return true\n      }\n\n      for (const entry of Node.nodes(\n        { children: fragment },\n        { pass: matcher }\n      )) {\n        if (entry[1].length > 0 && matcher(entry)) {\n          matches.push(entry)\n        }\n      }\n\n      const starts = []\n      const middles = []\n      const ends = []\n      let starting = true\n      let hasBlocks = false\n\n      for (const [node] of matches) {\n        if (Element.isElement(node) && !editor.isInline(node)) {\n          starting = false\n          hasBlocks = true\n          middles.push(node)\n        } else if (starting) {\n          starts.push(node)\n        } else {\n          ends.push(node)\n        }\n      }\n\n      const [inlineMatch] = Editor.nodes(editor, {\n        at,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })!\n\n      const [, inlinePath] = inlineMatch\n      const isInlineStart = Editor.isStart(editor, at, inlinePath)\n      const isInlineEnd = Editor.isEnd(editor, at, inlinePath)\n\n      const middleRef = Editor.pathRef(\n        editor,\n        isBlockEnd ? Path.next(blockPath) : blockPath\n      )\n\n      const endRef = Editor.pathRef(\n        editor,\n        isInlineEnd ? Path.next(inlinePath) : inlinePath\n      )\n\n      Transforms.splitNodes(editor, {\n        at,\n        match: n =>\n          hasBlocks\n            ? Editor.isBlock(editor, n)\n            : Text.isText(n) || Editor.isInline(editor, n),\n        mode: hasBlocks ? 'lowest' : 'highest',\n        voids,\n      })\n\n      const startRef = Editor.pathRef(\n        editor,\n        !isInlineStart || (isInlineStart && isInlineEnd)\n          ? Path.next(inlinePath)\n          : inlinePath\n      )\n\n      Transforms.insertNodes(editor, starts, {\n        at: startRef.current!,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      Transforms.insertNodes(editor, middles, {\n        at: middleRef.current!,\n        match: n => Editor.isBlock(editor, n),\n        mode: 'lowest',\n        voids,\n      })\n\n      Transforms.insertNodes(editor, ends, {\n        at: endRef.current!,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      if (!options.at) {\n        let path\n\n        if (ends.length > 0) {\n          path = Path.previous(endRef.current!)\n        } else if (middles.length > 0) {\n          path = Path.previous(middleRef.current!)\n        } else {\n          path = Path.previous(startRef.current!)\n        }\n\n        const end = Editor.end(editor, path)\n        Transforms.select(editor, end)\n      }\n\n      startRef.unref()\n      middleRef.unref()\n      endRef.unref()\n    })\n  },\n\n  /**\n   * Insert a string of text in the Editor.\n   */\n\n  insertText(\n    editor: Editor,\n    text: string,\n    options: {\n      at?: Location\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { voids = false } = options\n      let { at = editor.selection } = options\n\n      if (!at) {\n        return\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const end = Range.end(at)\n\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at, voids })\n          at = pointRef.unref()!\n          Transforms.setSelection(editor, { anchor: at, focus: at })\n        }\n      }\n\n      if (!voids && Editor.void(editor, { at })) {\n        return\n      }\n\n      const { path, offset } = at\n      editor.apply({ type: 'insert_text', path, offset, text })\n    })\n  },\n}\n","import { GeneralTransforms } from './general'\nimport { NodeTransforms } from './node'\nimport { SelectionTransforms } from './selection'\nimport { TextTransforms } from './text'\n\nexport const Transforms = {\n  ...GeneralTransforms,\n  ...NodeTransforms,\n  ...SelectionTransforms,\n  ...TextTransforms,\n}\n"],"names":["DIRTY_PATHS","WeakMap","FLUSHING","NORMALIZING","PATH_REFS","POINT_REFS","RANGE_REFS","createEditor","editor","children","operations","selection","marks","isInline","isVoid","onChange","apply","op","Editor","pathRefs","ref","PathRef","transform","pointRefs","PointRef","rangeRefs","RangeRef","set","Set","dirtyPaths","add","path","key","join","has","push","oldDirtyPaths","get","newDirtyPaths","getDirtyPaths","newPath","Path","Transforms","normalize","type","Promise","resolve","then","addMark","value","Range","isExpanded","setNodes","match","Text","isText","split","deleteBackward","unit","isCollapsed","reverse","deleteForward","deleteFragment","getFragment","Node","fragment","insertBreak","splitNodes","always","insertFragment","insertNode","node","insertNodes","insertText","text","inline","above","n","mode","inlinePath","isEnd","anchor","point","after","setSelection","focus","normalizeNode","entry","Element","isElement","length","child","at","concat","voids","shouldHaveInlines","isEditor","i","prev","isLast","isInlineOrText","removeNodes","newChild","equals","loose","mergeNodes","removeMark","unsetNodes","levels","descendants","Array","from","nodes","p","ancestors","previousPath","previous","oldAncestors","newAncestors","ancestor","nextPath","next","SPACE","PUNCTUATION","CHAMELEON","SURROGATE_START","SURROGATE_END","ZERO_WIDTH_JOINER","getCharacterDistance","offset","charCode","charCodeAt","isSurrogate","modifier","isModifier","isBMPEmoji","isVariationSelector","getWordDistance","started","char","charAt","l","slice","rest","isWordCharacter","remaining","test","code","options","edge","end","range","distance","d","target","positions","before","start","edges","first","hasBlocks","element","some","isBlock","hasInlines","hasTexts","every","isPlainObject","isRange","isNodeList","Operation","isOperationList","Point","isEdge","isStart","isEmpty","isNormalizing","undefined","last","leaf","block","prevNode","prevPath","blockPath","isAncestor","to","span","isPath","Error","parent","includes","universal","Span","isSpan","nodeEntries","pass","matches","hit","isLower","compare","emit","force","allPaths","withoutNormalizing","max","m","dirtyPath","pop","parentPath","depth","firstPath","lastPath","common","isPoint","pathRef","affinity","current","unref","refs","pointRef","string","available","isNewBlock","advance","e","s","reverseText","isFirst","rangeRef","t","unhangRange","endBlock","skip","isBefore","fn","isElementList","isArray","props","Location","isLocation","root","index","JSON","stringify","c","childPath","another","descendant","elements","newRoot","produce","r","splice","isNode","visited","isAfter","nextIndex","map","texts","isNodeOperation","isOperation","endsWith","position","properties","newProperties","isSelectionOperation","isTextOperation","inverse","isSibling","inversePath","inverseNewPath","paths","av","bv","min","Math","endsAfter","as","bs","endsAt","endsBefore","hasPrevious","isChild","isCommon","isDescendant","isParent","al","bl","list","relative","operation","onp","copy","result","isBackward","rs","re","ts","te","isAfterStart","isBeforeEnd","intersection","s1","e1","s2","e2","isForward","points","affinityAnchor","affinityFocus","isTextList","decorations","leaves","dec","o","Object","assign","middle","off","GeneralTransforms","createDraft","truePath","newParent","newIndex","newNode","finishDraft","isDraft","NodeTransforms","hanging","select","matchPath","isAtEnd","liftNodes","parentNodeEntry","toPath","moveNodes","splitPath","commonPath","isPreviousSibling","emptyAncestor","emptyRef","toRef","targets","depths","splitMode","k","keys","height","deleteRange","beforeRef","highest","voidMatch","nudge","voidNode","voidPath","afterPath","siblingHeight","afterRef","highestPath","lowestPath","obj","unwrapNodes","wrapNodes","roots","rootPath","a","commonNodeEntry","commonNode","wrapperPath","wrapper","SelectionTransforms","collapse","deselect","move","opts","setPoint","oldProps","newProps","TextTransforms","furthestVoid","startBlock","isAcrossBlocks","isSingleText","startVoid","endVoid","startRef","endRef","inlineElementMatch","blockMatch","isBlockStart","isBlockEnd","mergeStart","mergeEnd","matcher","starts","middles","ends","starting","inlineMatch","isInlineStart","isInlineEnd","middleRef"],"mappings":"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"}