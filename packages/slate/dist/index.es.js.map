{"version":3,"file":"index.es.js","sources":["../../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../src/utils/weak-maps.ts","../src/create-editor.ts","../../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../src/utils/string.ts","../src/interfaces/editor.ts","../src/interfaces/element.ts","../src/interfaces/location.ts","../src/interfaces/node.ts","../src/interfaces/operation.ts","../src/interfaces/path.ts","../src/interfaces/path-ref.ts","../src/interfaces/point.ts","../src/interfaces/point-ref.ts","../src/interfaces/range.ts","../src/interfaces/range-ref.ts","../src/interfaces/text.ts","../src/transforms/general.ts","../src/transforms/node.ts","../src/transforms/selection.ts","../src/transforms/text.ts","../src/transforms/index.ts"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import { Editor, Path, PathRef, PointRef, RangeRef } from '..'\n\nexport const DIRTY_PATHS: WeakMap<Editor, Path[]> = new WeakMap()\nexport const FLUSHING: WeakMap<Editor, boolean> = new WeakMap()\nexport const NORMALIZING: WeakMap<Editor, boolean> = new WeakMap()\nexport const PATH_REFS: WeakMap<Editor, Set<PathRef>> = new WeakMap()\nexport const POINT_REFS: WeakMap<Editor, Set<PointRef>> = new WeakMap()\nexport const RANGE_REFS: WeakMap<Editor, Set<RangeRef>> = new WeakMap()\n","import {\n  Descendant,\n  Editor,\n  Element,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  PointRef,\n  Range,\n  RangeRef,\n  Text,\n  Transforms,\n} from './'\nimport { DIRTY_PATHS, FLUSHING } from './utils/weak-maps'\n\n/**\n * Create a new Slate `Editor` object.\n */\n\nexport const createEditor = (): Editor => {\n  const editor: Editor = {\n    children: [],\n    operations: [],\n    selection: null,\n    marks: null,\n    isInline: () => false,\n    isVoid: () => false,\n    onChange: () => {},\n\n    apply: (op: Operation) => {\n      for (const ref of Editor.pathRefs(editor)) {\n        PathRef.transform(ref, op)\n      }\n\n      for (const ref of Editor.pointRefs(editor)) {\n        PointRef.transform(ref, op)\n      }\n\n      for (const ref of Editor.rangeRefs(editor)) {\n        RangeRef.transform(ref, op)\n      }\n\n      const set = new Set()\n      const dirtyPaths: Path[] = []\n\n      const add = (path: Path | null) => {\n        if (path) {\n          const key = path.join(',')\n\n          if (!set.has(key)) {\n            set.add(key)\n            dirtyPaths.push(path)\n          }\n        }\n      }\n\n      const oldDirtyPaths = DIRTY_PATHS.get(editor) || []\n      const newDirtyPaths = getDirtyPaths(op)\n\n      for (const path of oldDirtyPaths) {\n        const newPath = Path.transform(path, op)\n        add(newPath)\n      }\n\n      for (const path of newDirtyPaths) {\n        add(path)\n      }\n\n      DIRTY_PATHS.set(editor, dirtyPaths)\n      Transforms.transform(editor, op)\n      editor.operations.push(op)\n      Editor.normalize(editor)\n\n      // Clear any formats applied to the cursor if the selection changes.\n      if (op.type === 'set_selection') {\n        editor.marks = null\n      }\n\n      if (!FLUSHING.get(editor)) {\n        FLUSHING.set(editor, true)\n\n        Promise.resolve().then(() => {\n          FLUSHING.set(editor, false)\n          editor.onChange()\n          editor.operations = []\n        })\n      }\n    },\n\n    addMark: (key: string, value: any) => {\n      const { selection } = editor\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.setNodes(\n            editor,\n            { [key]: value },\n            { match: Text.isText, split: true }\n          )\n        } else {\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            [key]: value,\n          }\n\n          editor.marks = marks\n          editor.onChange()\n        }\n      }\n    },\n\n    deleteBackward: (unit: 'character' | 'word' | 'line' | 'block') => {\n      const { selection } = editor\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, { unit, reverse: true })\n      }\n    },\n\n    deleteForward: (unit: 'character' | 'word' | 'line' | 'block') => {\n      const { selection } = editor\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, { unit })\n      }\n    },\n\n    deleteFragment: () => {\n      const { selection } = editor\n\n      if (selection && Range.isExpanded(selection)) {\n        Transforms.delete(editor)\n      }\n    },\n\n    getFragment: () => {\n      const { selection } = editor\n\n      if (selection) {\n        return Node.fragment(editor, selection)\n      }\n      return []\n    },\n\n    insertBreak: () => {\n      Transforms.splitNodes(editor, { always: true })\n    },\n\n    insertFragment: (fragment: Node[]) => {\n      Transforms.insertFragment(editor, fragment)\n    },\n\n    insertNode: (node: Node) => {\n      Transforms.insertNodes(editor, node)\n    },\n\n    insertText: (text: string) => {\n      const { selection, marks } = editor\n\n      if (selection) {\n        // If the cursor is at the end of an inline, move it outside of\n        // the inline before inserting\n        if (Range.isCollapsed(selection)) {\n          const inline = Editor.above(editor, {\n            match: n => Editor.isInline(editor, n),\n            mode: 'highest',\n          })\n\n          if (inline) {\n            const [, inlinePath] = inline\n\n            if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n              const point = Editor.after(editor, inlinePath)!\n              Transforms.setSelection(editor, {\n                anchor: point,\n                focus: point,\n              })\n            }\n          }\n        }\n\n        if (marks) {\n          const node = { text, ...marks }\n          Transforms.insertNodes(editor, node)\n        } else {\n          Transforms.insertText(editor, text)\n        }\n\n        editor.marks = null\n      }\n    },\n\n    normalizeNode: (entry: NodeEntry) => {\n      const [node, path] = entry\n\n      // There are no core normalizations for text nodes.\n      if (Text.isText(node)) {\n        return\n      }\n\n      // Ensure that block and inline nodes have at least one text child.\n      if (Element.isElement(node) && node.children.length === 0) {\n        const child = { text: '' }\n        Transforms.insertNodes(editor, child, {\n          at: path.concat(0),\n          voids: true,\n        })\n        return\n      }\n\n      // Determine whether the node should have block or inline children.\n      const shouldHaveInlines = Editor.isEditor(node)\n        ? false\n        : Element.isElement(node) &&\n          (editor.isInline(node) ||\n            node.children.length === 0 ||\n            Text.isText(node.children[0]) ||\n            editor.isInline(node.children[0]))\n\n      // Since we'll be applying operations while iterating, keep track of an\n      // index that accounts for any added/removed nodes.\n      let n = 0\n\n      for (let i = 0; i < node.children.length; i++, n++) {\n        const child = node.children[i] as Descendant\n        const prev = node.children[i - 1] as Descendant\n        const isLast = i === node.children.length - 1\n        const isInlineOrText =\n          Text.isText(child) ||\n          (Element.isElement(child) && editor.isInline(child))\n\n        // Only allow block nodes in the top-level children and parent blocks\n        // that only contain block nodes. Similarly, only allow inline nodes in\n        // other inline nodes, or parent blocks that only contain inlines and\n        // text.\n        if (isInlineOrText !== shouldHaveInlines) {\n          Transforms.removeNodes(editor, { at: path.concat(n), voids: true })\n          n--\n        } else if (Element.isElement(child)) {\n          // Ensure that inline nodes are surrounded by text nodes.\n          if (editor.isInline(child)) {\n            if (prev == null || !Text.isText(prev)) {\n              const newChild = { text: '' }\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n),\n                voids: true,\n              })\n              n++\n            } else if (isLast) {\n              const newChild = { text: '' }\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n + 1),\n                voids: true,\n              })\n              n++\n            }\n          }\n        } else {\n          // Merge adjacent text nodes that are empty or match.\n          if (prev != null && Text.isText(prev)) {\n            if (Text.equals(child, prev, { loose: true })) {\n              Transforms.mergeNodes(editor, { at: path.concat(n), voids: true })\n              n--\n            } else if (prev.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n - 1),\n                voids: true,\n              })\n              n--\n            } else if (isLast && child.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n),\n                voids: true,\n              })\n              n--\n            }\n          }\n        }\n      }\n    },\n\n    removeMark: (key: string) => {\n      const { selection } = editor\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.unsetNodes(editor, key, {\n            match: Text.isText,\n            split: true,\n          })\n        } else {\n          const marks = { ...(Editor.marks(editor) || {}) }\n          delete marks[key]\n          editor.marks = marks\n          editor.onChange()\n        }\n      }\n    },\n  }\n\n  return editor\n}\n\n/**\n * Get the \"dirty\" paths generated from an operation.\n */\n\nconst getDirtyPaths = (op: Operation) => {\n  switch (op.type) {\n    case 'insert_text':\n    case 'remove_text':\n    case 'set_node': {\n      const { path } = op\n      return Path.levels(path)\n    }\n\n    case 'insert_node': {\n      const { node, path } = op\n      const levels = Path.levels(path)\n      const descendants = Text.isText(node)\n        ? []\n        : Array.from(Node.nodes(node), ([, p]) => path.concat(p))\n\n      return [...levels, ...descendants]\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      const previousPath = Path.previous(path)\n      return [...ancestors, previousPath]\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n\n      if (Path.equals(path, newPath)) {\n        return []\n      }\n\n      const oldAncestors: Path[] = []\n      const newAncestors: Path[] = []\n\n      for (const ancestor of Path.ancestors(path)) {\n        const p = Path.transform(ancestor, op)\n        oldAncestors.push(p!)\n      }\n\n      for (const ancestor of Path.ancestors(newPath)) {\n        const p = Path.transform(ancestor, op)\n        newAncestors.push(p!)\n      }\n\n      return [...oldAncestors, ...newAncestors]\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      return [...ancestors]\n    }\n\n    case 'split_node': {\n      const { path } = op\n      const levels = Path.levels(path)\n      const nextPath = Path.next(path)\n      return [...levels, nextPath]\n    }\n\n    default: {\n      return []\n    }\n  }\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","/**\n * Constants for string distance checking.\n */\n\nconst SPACE = /\\s/\nconst PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\nconst CHAMELEON = /['\\u2018\\u2019]/\nconst SURROGATE_START = 0xd800\nconst SURROGATE_END = 0xdfff\nconst ZERO_WIDTH_JOINER = 0x200d\n\n/**\n * Get the distance to the end of the first character in a string of text.\n */\n\nexport const getCharacterDistance = (text: string): number => {\n  let offset = 0\n  // prev types:\n  // SURR: surrogate pair\n  // MOD: modifier (technically also surrogate pair)\n  // ZWJ: zero width joiner\n  // VAR: variation selector\n  // BMP: sequenceable character from basic multilingual plane\n  let prev: 'SURR' | 'MOD' | 'ZWJ' | 'VAR' | 'BMP' | null = null\n  let charCode = text.charCodeAt(0)\n\n  while (charCode) {\n    if (isSurrogate(charCode)) {\n      const modifier = isModifier(charCode, text, offset)\n\n      // Early returns are the heart of this function, where we decide if previous and current\n      // codepoints should form a single character (in terms of how many of them should selection\n      // jump over).\n      if (prev === 'SURR' || prev === 'BMP') {\n        break\n      }\n\n      offset += 2\n      prev = modifier ? 'MOD' : 'SURR'\n      charCode = text.charCodeAt(offset)\n      // Absolutely fine to `continue` without any checks because if `charCode` is NaN (which\n      // is the case when out of `text` range), next `while` loop won\"t execute and we\"re done.\n      continue\n    }\n\n    if (charCode === ZERO_WIDTH_JOINER) {\n      offset += 1\n      prev = 'ZWJ'\n      charCode = text.charCodeAt(offset)\n\n      continue\n    }\n\n    if (isBMPEmoji(charCode)) {\n      if (prev && prev !== 'ZWJ' && prev !== 'VAR') {\n        break\n      }\n      offset += 1\n      prev = 'BMP'\n      charCode = text.charCodeAt(offset)\n\n      continue\n    }\n\n    if (isVariationSelector(charCode)) {\n      if (prev && prev !== 'ZWJ') {\n        break\n      }\n      offset += 1\n      prev = 'VAR'\n      charCode = text.charCodeAt(offset)\n      continue\n    }\n\n    // Modifier 'groups up' with what ever character is before that (even whitespace), need to\n    // look ahead.\n    if (prev === 'MOD') {\n      offset += 1\n      break\n    }\n\n    // If while loop ever gets here, we're done (e.g latin chars).\n    break\n  }\n\n  return offset || 1\n}\n\n/**\n * Get the distance to the end of the first word in a string of text.\n */\n\nexport const getWordDistance = (text: string): number => {\n  let length = 0\n  let i = 0\n  let started = false\n  let char\n\n  while ((char = text.charAt(i))) {\n    const l = getCharacterDistance(char)\n    char = text.slice(i, i + l)\n    const rest = text.slice(i + l)\n\n    if (isWordCharacter(char, rest)) {\n      started = true\n      length += l\n    } else if (!started) {\n      length += l\n    } else {\n      break\n    }\n\n    i += l\n  }\n\n  return length\n}\n\n/**\n * Check if a character is a word character. The `remaining` argument is used\n * because sometimes you must read subsequent characters to truly determine it.\n */\n\nconst isWordCharacter = (char: string, remaining: string): boolean => {\n  if (SPACE.test(char)) {\n    return false\n  }\n\n  // Chameleons count as word characters as long as they're in a word, so\n  // recurse to see if the next one is a word character or not.\n  if (CHAMELEON.test(char)) {\n    let next = remaining.charAt(0)\n    const length = getCharacterDistance(next)\n    next = remaining.slice(0, length)\n    const rest = remaining.slice(length)\n\n    if (isWordCharacter(next, rest)) {\n      return true\n    }\n  }\n\n  if (PUNCTUATION.test(char)) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Determines if `code` is a surrogate\n */\n\nconst isSurrogate = (code: number): boolean =>\n  SURROGATE_START <= code && code <= SURROGATE_END\n\n/**\n * Does `code` form Modifier with next one.\n *\n * https://emojipedia.org/modifiers/\n */\n\nconst isModifier = (code: number, text: string, offset: number): boolean => {\n  if (code === 0xd83c) {\n    const next = text.charCodeAt(offset + 1)\n    return next <= 0xdfff && next >= 0xdffb\n  }\n  return false\n}\n\n/**\n * Is `code` a Variation Selector.\n *\n * https://codepoints.net/variation_selectors\n */\n\nconst isVariationSelector = (code: number): boolean => {\n  return code <= 0xfe0f && code >= 0xfe00\n}\n\n/**\n * Is `code` one of the BMP codes used in emoji sequences.\n *\n * https://emojipedia.org/emoji-zwj-sequences/\n */\n\nconst isBMPEmoji = (code: number): boolean => {\n  // This requires tiny bit of maintanance, better ideas?\n  // Fortunately it only happens if new Unicode Standard\n  // is released. Fails gracefully if upkeep lags behind,\n  // same way Slate previously behaved with all emojis.\n  return (\n    code === 0x2764 || // heart (❤)\n    code === 0x2642 || // male (♂)\n    code === 0x2640 || // female (♀)\n    code === 0x2620 || // scull (☠)\n    code === 0x2695 || // medical (⚕)\n    code === 0x2708 || // plane (✈️)\n    code === 0x25ef // large circle (◯)\n  )\n}\n","import isPlainObject from 'is-plain-object'\nimport { createDraft, finishDraft, isDraft } from 'immer'\nimport { reverse as reverseText } from 'esrever'\n\nimport {\n  Ancestor,\n  Descendant,\n  Element,\n  Location,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  Point,\n  PointRef,\n  Range,\n  RangeRef,\n  Span,\n  Text,\n} from '..'\nimport {\n  DIRTY_PATHS,\n  NORMALIZING,\n  PATH_REFS,\n  POINT_REFS,\n  RANGE_REFS,\n} from '../utils/weak-maps'\nimport { getWordDistance, getCharacterDistance } from '../utils/string'\n\n/**\n * The `Editor` interface stores all the state of a Slate editor. It is extended\n * by plugins that wish to add their own helpers and implement new behaviors.\n */\n\nexport interface Editor {\n  children: Node[]\n  selection: Range | null\n  operations: Operation[]\n  marks: Record<string, any> | null\n  [key: string]: unknown\n\n  // Schema-specific node behaviors.\n  isInline: (element: Element) => boolean\n  isVoid: (element: Element) => boolean\n  normalizeNode: (entry: NodeEntry) => void\n  onChange: () => void\n\n  // Overrideable core actions.\n  addMark: (key: string, value: any) => void\n  apply: (operation: Operation) => void\n  deleteBackward: (unit: 'character' | 'word' | 'line' | 'block') => void\n  deleteForward: (unit: 'character' | 'word' | 'line' | 'block') => void\n  deleteFragment: () => void\n  getFragment: () => Descendant[]\n  insertBreak: () => void\n  insertFragment: (fragment: Node[]) => void\n  insertNode: (node: Node) => void\n  insertText: (text: string) => void\n  removeMark: (key: string) => void\n}\n\nexport const Editor = {\n  /**\n   * Get the ancestor above a location in the document.\n   */\n\n  above<T extends Ancestor>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const {\n      voids = false,\n      mode = 'lowest',\n      at = editor.selection,\n      match,\n    } = options\n\n    if (!at) {\n      return\n    }\n\n    const path = Editor.path(editor, at)\n    const reverse = mode === 'lowest'\n\n    for (const [n, p] of Editor.levels(editor, {\n      at: path,\n      voids,\n      match,\n      reverse,\n    })) {\n      if (!Text.isText(n) && !Path.equals(path, p)) {\n        return [n, p]\n      }\n    }\n  },\n\n  /**\n   * Add a custom property to the leaf text nodes in the current selection.\n   *\n   * If the selection is currently collapsed, the marks will be added to the\n   * `editor.marks` property instead, and applied when text is inserted next.\n   */\n\n  addMark(editor: Editor, key: string, value: any): void {\n    editor.addMark(key, value)\n  },\n\n  /**\n   * Get the point after a location.\n   */\n\n  after(\n    editor: Editor,\n    at: Location,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): Point | undefined {\n    const anchor = Editor.point(editor, at, { edge: 'end' })\n    const focus = Editor.end(editor, [])\n    const range = { anchor, focus }\n    const { distance = 1 } = options\n    let d = 0\n    let target\n\n    for (const p of Editor.positions(editor, { ...options, at: range })) {\n      if (d > distance) {\n        break\n      }\n\n      if (d !== 0) {\n        target = p\n      }\n\n      d++\n    }\n\n    return target\n  },\n\n  /**\n   * Get the point before a location.\n   */\n\n  before(\n    editor: Editor,\n    at: Location,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): Point | undefined {\n    const anchor = Editor.start(editor, [])\n    const focus = Editor.point(editor, at, { edge: 'start' })\n    const range = { anchor, focus }\n    const { distance = 1 } = options\n    let d = 0\n    let target\n\n    for (const p of Editor.positions(editor, {\n      ...options,\n      at: range,\n      reverse: true,\n    })) {\n      if (d > distance) {\n        break\n      }\n\n      if (d !== 0) {\n        target = p\n      }\n\n      d++\n    }\n\n    return target\n  },\n\n  /**\n   * Delete content in the editor backward from the current selection.\n   */\n\n  deleteBackward(\n    editor: Editor,\n    options: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): void {\n    const { unit = 'character' } = options\n    editor.deleteBackward(unit)\n  },\n\n  /**\n   * Delete content in the editor forward from the current selection.\n   */\n\n  deleteForward(\n    editor: Editor,\n    options: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): void {\n    const { unit = 'character' } = options\n    editor.deleteForward(unit)\n  },\n\n  /**\n   * Delete the content in the current selection.\n   */\n\n  deleteFragment(editor: Editor): void {\n    editor.deleteFragment()\n  },\n\n  /**\n   * Get the start and end points of a location.\n   */\n\n  edges(editor: Editor, at: Location): [Point, Point] {\n    return [Editor.start(editor, at), Editor.end(editor, at)]\n  },\n\n  /**\n   * Get the end point of a location.\n   */\n\n  end(editor: Editor, at: Location): Point {\n    return Editor.point(editor, at, { edge: 'end' })\n  },\n\n  /**\n   * Get the first node at a location.\n   */\n\n  first(editor: Editor, at: Location): NodeEntry {\n    const path = Editor.path(editor, at, { edge: 'start' })\n    return Editor.node(editor, path)\n  },\n\n  /**\n   * Get the fragment at a location.\n   */\n\n  fragment(editor: Editor, at: Location): Descendant[] {\n    const range = Editor.range(editor, at)\n    const fragment = Node.fragment(editor, range)\n    return fragment\n  },\n  /**\n   * Check if a node has block children.\n   */\n\n  hasBlocks(editor: Editor, element: Element): boolean {\n    return element.children.some(n => Editor.isBlock(editor, n))\n  },\n\n  /**\n   * Check if a node has inline and text children.\n   */\n\n  hasInlines(editor: Editor, element: Element): boolean {\n    return element.children.some(\n      n => Text.isText(n) || Editor.isInline(editor, n)\n    )\n  },\n\n  /**\n   * Check if a node has text children.\n   */\n\n  hasTexts(editor: Editor, element: Element): boolean {\n    return element.children.every(n => Text.isText(n))\n  },\n\n  /**\n   * Insert a block break at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertBreak(editor: Editor): void {\n    editor.insertBreak()\n  },\n\n  /**\n   * Insert a fragment at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertFragment(editor: Editor, fragment: Node[]): void {\n    editor.insertFragment(fragment)\n  },\n\n  /**\n   * Insert a node at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertNode(editor: Editor, node: Node): void {\n    editor.insertNode(node)\n  },\n\n  /**\n   * Insert text at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertText(editor: Editor, text: string): void {\n    editor.insertText(text)\n  },\n\n  /**\n   * Check if a value is a block `Element` object.\n   */\n\n  isBlock(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && !editor.isInline(value)\n  },\n\n  /**\n   * Check if a value is an `Editor` object.\n   */\n\n  isEditor(value: any): value is Editor {\n    return (\n      isPlainObject(value) &&\n      typeof value.addMark === 'function' &&\n      typeof value.apply === 'function' &&\n      typeof value.deleteBackward === 'function' &&\n      typeof value.deleteForward === 'function' &&\n      typeof value.deleteFragment === 'function' &&\n      typeof value.insertBreak === 'function' &&\n      typeof value.insertFragment === 'function' &&\n      typeof value.insertNode === 'function' &&\n      typeof value.insertText === 'function' &&\n      typeof value.isInline === 'function' &&\n      typeof value.isVoid === 'function' &&\n      typeof value.normalizeNode === 'function' &&\n      typeof value.onChange === 'function' &&\n      typeof value.removeMark === 'function' &&\n      (value.marks === null || isPlainObject(value.marks)) &&\n      (value.selection === null || Range.isRange(value.selection)) &&\n      Node.isNodeList(value.children) &&\n      Operation.isOperationList(value.operations)\n    )\n  },\n\n  /**\n   * Check if a point is the end point of a location.\n   */\n\n  isEnd(editor: Editor, point: Point, at: Location): boolean {\n    const end = Editor.end(editor, at)\n    return Point.equals(point, end)\n  },\n\n  /**\n   * Check if a point is an edge of a location.\n   */\n\n  isEdge(editor: Editor, point: Point, at: Location): boolean {\n    return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at)\n  },\n\n  /**\n   * Check if an element is empty, accounting for void nodes.\n   */\n\n  isEmpty(editor: Editor, element: Element): boolean {\n    const { children } = element\n    const [first] = children\n    return (\n      children.length === 0 ||\n      (children.length === 1 &&\n        Text.isText(first) &&\n        first.text === '' &&\n        !editor.isVoid(element))\n    )\n  },\n\n  /**\n   * Check if a value is an inline `Element` object.\n   */\n\n  isInline(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && editor.isInline(value)\n  },\n\n  /**\n   * Check if the editor is currently normalizing after each operation.\n   */\n\n  isNormalizing(editor: Editor): boolean {\n    const isNormalizing = NORMALIZING.get(editor)\n    return isNormalizing === undefined ? true : isNormalizing\n  },\n\n  /**\n   * Check if a point is the start point of a location.\n   */\n\n  isStart(editor: Editor, point: Point, at: Location): boolean {\n    // PERF: If the offset isn't `0` we know it's not the start.\n    if (point.offset !== 0) {\n      return false\n    }\n\n    const start = Editor.start(editor, at)\n    return Point.equals(point, start)\n  },\n\n  /**\n   * Check if a value is a void `Element` object.\n   */\n\n  isVoid(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && editor.isVoid(value)\n  },\n\n  /**\n   * Get the last node at a location.\n   */\n\n  last(editor: Editor, at: Location): NodeEntry {\n    const path = Editor.path(editor, at, { edge: 'end' })\n    return Editor.node(editor, path)\n  },\n\n  /**\n   * Get the leaf text node at a location.\n   */\n\n  leaf(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry<Text> {\n    const path = Editor.path(editor, at, options)\n    const node = Node.leaf(editor, path)\n    return [node, path]\n  },\n\n  /**\n   * Iterate through all of the levels at a location.\n   */\n\n  *levels<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Generator<NodeEntry<T>, void, undefined> {\n    const { at = editor.selection, reverse = false, voids = false } = options\n    let { match } = options\n\n    if (match == null) {\n      match = () => true\n    }\n\n    if (!at) {\n      return\n    }\n\n    const levels: NodeEntry<T>[] = []\n    const path = Editor.path(editor, at)\n\n    for (const [n, p] of Node.levels(editor, path)) {\n      if (!match(n)) {\n        continue\n      }\n\n      levels.push([n, p])\n\n      if (!voids && Editor.isVoid(editor, n)) {\n        break\n      }\n    }\n\n    if (reverse) {\n      levels.reverse()\n    }\n\n    yield* levels\n  },\n\n  /**\n   * Get the marks that would be added to text at the current selection.\n   */\n\n  marks(editor: Editor): Record<string, any> | null {\n    const { marks, selection } = editor\n\n    if (!selection) {\n      return null\n    }\n\n    if (marks) {\n      return marks\n    }\n\n    if (Range.isExpanded(selection)) {\n      const [match] = Editor.nodes(editor, { match: Text.isText })\n\n      if (match) {\n        const [node] = match as NodeEntry<Text>\n        const { text, ...rest } = node\n        return rest\n      } else {\n        return {}\n      }\n    }\n\n    const { anchor } = selection\n    const { path } = anchor\n    let [node] = Editor.leaf(editor, path)\n\n    if (anchor.offset === 0) {\n      const prev = Editor.previous(editor, { at: path, match: Text.isText })\n      const block = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n      })\n\n      if (prev && block) {\n        const [prevNode, prevPath] = prev\n        const [, blockPath] = block\n\n        if (Path.isAncestor(blockPath, prevPath)) {\n          node = prevNode as Text\n        }\n      }\n    }\n\n    const { text, ...rest } = node\n    return rest\n  },\n\n  /**\n   * Get the matching node in the branch of the document after a location.\n   */\n\n  next<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    const [, from] = Editor.last(editor, at)\n    const [, to] = Editor.last(editor, [])\n    const span: Span = [from, to]\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(`Cannot get the next node from the root node!`)\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = () => true\n      }\n    }\n\n    const [, next] = Editor.nodes(editor, { at: span, match, mode, voids })\n    return next\n  },\n\n  /**\n   * Get the node at a location.\n   */\n\n  node(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry {\n    const path = Editor.path(editor, at, options)\n    const node = Node.get(editor, path)\n    return [node, path]\n  },\n\n  /**\n   * Iterate through all of the nodes in the Editor.\n   */\n\n  *nodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location | Span\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      universal?: boolean\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Generator<NodeEntry<T>, void, undefined> {\n    const {\n      at = editor.selection,\n      mode = 'all',\n      universal = false,\n      reverse = false,\n      voids = false,\n    } = options\n    let { match } = options\n\n    if (!match) {\n      match = () => true\n    }\n\n    if (!at) {\n      return\n    }\n\n    let from\n    let to\n\n    if (Span.isSpan(at)) {\n      from = at[0]\n      to = at[1]\n    } else {\n      const first = Editor.path(editor, at, { edge: 'start' })\n      const last = Editor.path(editor, at, { edge: 'end' })\n      from = reverse ? last : first\n      to = reverse ? first : last\n    }\n\n    const nodeEntries = Node.nodes(editor, {\n      reverse,\n      from,\n      to,\n      pass: ([n]) => (voids ? false : Editor.isVoid(editor, n)),\n    })\n\n    const matches: NodeEntry<T>[] = []\n    let hit: NodeEntry<T> | undefined\n\n    for (const [node, path] of nodeEntries) {\n      const isLower = hit && Path.compare(path, hit[1]) === 0\n\n      // In highest mode any node lower than the last hit is not a match.\n      if (mode === 'highest' && isLower) {\n        continue\n      }\n\n      if (!match(node)) {\n        // If we've arrived at a leaf text node that is not lower than the last\n        // hit, then we've found a branch that doesn't include a match, which\n        // means the match is not universal.\n        if (universal && !isLower && Text.isText(node)) {\n          return\n        } else {\n          continue\n        }\n      }\n\n      // If there's a match and it's lower than the last, update the hit.\n      if (mode === 'lowest' && isLower) {\n        hit = [node, path]\n        continue\n      }\n\n      // In lowest mode we emit the last hit, once it's guaranteed lowest.\n      const emit: NodeEntry<T> | undefined =\n        mode === 'lowest' ? hit : [node, path]\n\n      if (emit) {\n        if (universal) {\n          matches.push(emit)\n        } else {\n          yield emit\n        }\n      }\n\n      hit = [node, path]\n    }\n\n    // Since lowest is always emitting one behind, catch up at the end.\n    if (mode === 'lowest' && hit) {\n      if (universal) {\n        matches.push(hit)\n      } else {\n        yield hit\n      }\n    }\n\n    // Universal defers to ensure that the match occurs in every branch, so we\n    // yield all of the matches after iterating.\n    if (universal) {\n      yield* matches\n    }\n  },\n  /**\n   * Normalize any dirty objects in the editor.\n   */\n\n  normalize(\n    editor: Editor,\n    options: {\n      force?: boolean\n    } = {}\n  ) {\n    const { force = false } = options\n    const getDirtyPaths = (editor: Editor) => {\n      return DIRTY_PATHS.get(editor) || []\n    }\n\n    if (!Editor.isNormalizing(editor)) {\n      return\n    }\n\n    if (force) {\n      const allPaths = Array.from(Node.nodes(editor), ([, p]) => p)\n      DIRTY_PATHS.set(editor, allPaths)\n    }\n\n    if (getDirtyPaths(editor).length === 0) {\n      return\n    }\n\n    Editor.withoutNormalizing(editor, () => {\n      const max = getDirtyPaths(editor).length * 42 // HACK: better way?\n      let m = 0\n\n      while (getDirtyPaths(editor).length !== 0) {\n        if (m > max) {\n          throw new Error(`\n            Could not completely normalize the editor after ${max} iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\n          `)\n        }\n\n        const dirtyPath = getDirtyPaths(editor).pop()!\n\n        // If the node doesn't exist in the tree, it does not need to be normalized.\n        if (Node.has(editor, dirtyPath)) {\n          const entry = Editor.node(editor, dirtyPath)\n          editor.normalizeNode(entry)\n        }\n        m++\n      }\n    })\n  },\n\n  /**\n   * Get the parent node of a location.\n   */\n\n  parent(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry<Ancestor> {\n    const path = Editor.path(editor, at, options)\n    const parentPath = Path.parent(path)\n    const entry = Editor.node(editor, parentPath)\n    return entry as NodeEntry<Ancestor>\n  },\n\n  /**\n   * Get the path of a location.\n   */\n\n  path(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): Path {\n    const { depth, edge } = options\n\n    if (Path.isPath(at)) {\n      if (edge === 'start') {\n        const [, firstPath] = Node.first(editor, at)\n        at = firstPath\n      } else if (edge === 'end') {\n        const [, lastPath] = Node.last(editor, at)\n        at = lastPath\n      }\n    }\n\n    if (Range.isRange(at)) {\n      if (edge === 'start') {\n        at = Range.start(at)\n      } else if (edge === 'end') {\n        at = Range.end(at)\n      } else {\n        at = Path.common(at.anchor.path, at.focus.path)\n      }\n    }\n\n    if (Point.isPoint(at)) {\n      at = at.path\n    }\n\n    if (depth != null) {\n      at = at.slice(0, depth)\n    }\n\n    return at\n  },\n\n  /**\n   * Create a mutable ref for a `Path` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  pathRef(\n    editor: Editor,\n    path: Path,\n    options: {\n      affinity?: 'backward' | 'forward' | null\n    } = {}\n  ): PathRef {\n    const { affinity = 'forward' } = options\n    const ref: PathRef = {\n      current: path,\n      affinity,\n      unref() {\n        const { current } = ref\n        const pathRefs = Editor.pathRefs(editor)\n        pathRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.pathRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked path refs of the editor.\n   */\n\n  pathRefs(editor: Editor): Set<PathRef> {\n    let refs = PATH_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      PATH_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Get the start or end point of a location.\n   */\n\n  point(\n    editor: Editor,\n    at: Location,\n    options: {\n      edge?: 'start' | 'end'\n    } = {}\n  ): Point {\n    const { edge = 'start' } = options\n\n    if (Path.isPath(at)) {\n      let path\n\n      if (edge === 'end') {\n        const [, lastPath] = Node.last(editor, at)\n        path = lastPath\n      } else {\n        const [, firstPath] = Node.first(editor, at)\n        path = firstPath\n      }\n\n      const node = Node.get(editor, path)\n\n      if (!Text.isText(node)) {\n        throw new Error(\n          `Cannot get the ${edge} point in the node at path [${at}] because it has no ${edge} text node.`\n        )\n      }\n\n      return { path, offset: edge === 'end' ? node.text.length : 0 }\n    }\n\n    if (Range.isRange(at)) {\n      const [start, end] = Range.edges(at)\n      return edge === 'start' ? start : end\n    }\n\n    return at\n  },\n\n  /**\n   * Create a mutable ref for a `Point` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  pointRef(\n    editor: Editor,\n    point: Point,\n    options: {\n      affinity?: 'backward' | 'forward' | null\n    } = {}\n  ): PointRef {\n    const { affinity = 'forward' } = options\n    const ref: PointRef = {\n      current: point,\n      affinity,\n      unref() {\n        const { current } = ref\n        const pointRefs = Editor.pointRefs(editor)\n        pointRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.pointRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked point refs of the editor.\n   */\n\n  pointRefs(editor: Editor): Set<PointRef> {\n    let refs = POINT_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      POINT_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Iterate through all of the positions in the document where a `Point` can be\n   * placed.\n   *\n   * By default it will move forward by individual offsets at a time,  but you\n   * can pass the `unit: 'character'` option to moved forward one character, word,\n   * or line at at time.\n   *\n   * Note: void nodes are treated as a single point, and iteration will not\n   * happen inside their content.\n   */\n\n  *positions(\n    editor: Editor,\n    options: {\n      at?: Location\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n    } = {}\n  ): Generator<Point, void, undefined> {\n    const { at = editor.selection, unit = 'offset', reverse = false } = options\n\n    if (!at) {\n      return\n    }\n\n    const range = Editor.range(editor, at)\n    const [start, end] = Range.edges(range)\n    const first = reverse ? end : start\n    let string = ''\n    let available = 0\n    let offset = 0\n    let distance: number | null = null\n    let isNewBlock = false\n\n    const advance = () => {\n      if (distance == null) {\n        if (unit === 'character') {\n          distance = getCharacterDistance(string)\n        } else if (unit === 'word') {\n          distance = getWordDistance(string)\n        } else if (unit === 'line' || unit === 'block') {\n          distance = string.length\n        } else {\n          distance = 1\n        }\n\n        string = string.slice(distance)\n      }\n\n      // Add or substract the offset.\n      offset = reverse ? offset - distance : offset + distance\n      // Subtract the distance traveled from the available text.\n      available = available - distance!\n      // If the available had room to spare, reset the distance so that it will\n      // advance again next time. Otherwise, set it to the overflow amount.\n      distance = available >= 0 ? null : 0 - available\n    }\n\n    for (const [node, path] of Editor.nodes(editor, { at, reverse })) {\n      if (Element.isElement(node)) {\n        // Void nodes are a special case, since we don't want to iterate over\n        // their content. We instead always just yield their first point.\n        if (editor.isVoid(node)) {\n          yield Editor.start(editor, path)\n          continue\n        }\n\n        if (editor.isInline(node)) {\n          continue\n        }\n\n        if (Editor.hasInlines(editor, node)) {\n          const e = Path.isAncestor(path, end.path)\n            ? end\n            : Editor.end(editor, path)\n          const s = Path.isAncestor(path, start.path)\n            ? start\n            : Editor.start(editor, path)\n\n          const text = Editor.string(editor, { anchor: s, focus: e })\n          string = reverse ? reverseText(text) : text\n          isNewBlock = true\n        }\n      }\n\n      if (Text.isText(node)) {\n        const isFirst = Path.equals(path, first.path)\n        available = node.text.length\n        offset = reverse ? available : 0\n\n        if (isFirst) {\n          available = reverse ? first.offset : available - first.offset\n          offset = first.offset\n        }\n\n        if (isFirst || isNewBlock || unit === 'offset') {\n          yield { path, offset }\n        }\n\n        while (true) {\n          // If there's no more string, continue to the next block.\n          if (string === '') {\n            break\n          } else {\n            advance()\n          }\n\n          // If the available space hasn't overflow, we have another point to\n          // yield in the current text node.\n          if (available >= 0) {\n            yield { path, offset }\n          } else {\n            break\n          }\n        }\n\n        isNewBlock = false\n      }\n    }\n  },\n\n  /**\n   * Get the matching node in the branch of the document before a location.\n   */\n\n  previous<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    const [, from] = Editor.first(editor, at)\n    const [, to] = Editor.first(editor, [])\n    const span: Span = [from, to]\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(`Cannot get the previous node from the root node!`)\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = () => true\n      }\n    }\n\n    const [, previous] = Editor.nodes(editor, {\n      reverse: true,\n      at: span,\n      match,\n      mode,\n      voids,\n    })\n\n    return previous\n  },\n\n  /**\n   * Get a range of a location.\n   */\n\n  range(editor: Editor, at: Location, to?: Location): Range {\n    if (Range.isRange(at) && !to) {\n      return at\n    }\n\n    const start = Editor.start(editor, at)\n    const end = Editor.end(editor, to || at)\n    return { anchor: start, focus: end }\n  },\n\n  /**\n   * Create a mutable ref for a `Range` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  rangeRef(\n    editor: Editor,\n    range: Range,\n    options: {\n      affinity?: 'backward' | 'forward' | 'outward' | 'inward' | null\n    } = {}\n  ): RangeRef {\n    const { affinity = 'forward' } = options\n    const ref: RangeRef = {\n      current: range,\n      affinity,\n      unref() {\n        const { current } = ref\n        const rangeRefs = Editor.rangeRefs(editor)\n        rangeRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.rangeRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked range refs of the editor.\n   */\n\n  rangeRefs(editor: Editor): Set<RangeRef> {\n    let refs = RANGE_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      RANGE_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Remove a custom property from all of the leaf text nodes in the current\n   * selection.\n   *\n   * If the selection is currently collapsed, the removal will be stored on\n   * `editor.marks` and applied to the text inserted next.\n   */\n\n  removeMark(editor: Editor, key: string): void {\n    editor.removeMark(key)\n  },\n\n  /**\n   * Get the start point of a location.\n   */\n\n  start(editor: Editor, at: Location): Point {\n    return Editor.point(editor, at, { edge: 'start' })\n  },\n\n  /**\n   * Get the text string content of a location.\n   *\n   * Note: the text of void nodes is presumed to be an empty string, regardless\n   * of what their actual content is.\n   */\n\n  string(editor: Editor, at: Location): string {\n    const range = Editor.range(editor, at)\n    const [start, end] = Range.edges(range)\n    let text = ''\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at: range,\n      match: Text.isText,\n    })) {\n      let t = node.text\n\n      if (Path.equals(path, end.path)) {\n        t = t.slice(0, end.offset)\n      }\n\n      if (Path.equals(path, start.path)) {\n        t = t.slice(start.offset)\n      }\n\n      text += t\n    }\n\n    return text\n  },\n\n  /**\n   * Convert a range into a non-hanging one.\n   */\n\n  unhangRange(\n    editor: Editor,\n    range: Range,\n    options: {\n      voids?: boolean\n    } = {}\n  ): Range {\n    const { voids = false } = options\n    let [start, end] = Range.edges(range)\n\n    // PERF: exit early if we can guarantee that the range isn't hanging.\n    if (start.offset !== 0 || end.offset !== 0 || Range.isCollapsed(range)) {\n      return range\n    }\n\n    const endBlock = Editor.above(editor, {\n      at: end,\n      match: n => Editor.isBlock(editor, n),\n    })\n    const blockPath = endBlock ? endBlock[1] : []\n    const first = Editor.start(editor, [])\n    const before = { anchor: first, focus: end }\n    let skip = true\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at: before,\n      match: Text.isText,\n      reverse: true,\n      voids,\n    })) {\n      if (skip) {\n        skip = false\n        continue\n      }\n\n      if (node.text !== '' || Path.isBefore(path, blockPath)) {\n        end = { path, offset: node.text.length }\n        break\n      }\n    }\n\n    return { anchor: start, focus: end }\n  },\n\n  /**\n   * Match a void node in the current branch of the editor.\n   */\n\n  void(\n    editor: Editor,\n    options: {\n      at?: Location\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<Element> | undefined {\n    return Editor.above(editor, {\n      ...options,\n      match: n => Editor.isVoid(editor, n),\n    })\n  },\n\n  /**\n   * Call a function, deferring normalization until after it completes.\n   */\n\n  withoutNormalizing(editor: Editor, fn: () => void): void {\n    const value = Editor.isNormalizing(editor)\n    NORMALIZING.set(editor, false)\n    fn()\n    NORMALIZING.set(editor, value)\n    Editor.normalize(editor)\n  },\n}\n\n/**\n * A helper type for narrowing matched nodes with a predicate.\n */\n\ntype NodeMatch<T extends Node> =\n  | ((node: Node) => node is T)\n  | ((node: Node) => boolean)\n","import isPlainObject from 'is-plain-object'\nimport { Editor, Node, Path } from '..'\n\n/**\n * `Element` objects are a type of node in a Slate document that contain other\n * element nodes or text nodes. They can be either \"blocks\" or \"inlines\"\n * depending on the Slate editor's configuration.\n */\n\nexport interface Element {\n  children: Node[]\n  [key: string]: unknown\n}\n\nexport const Element = {\n  /**\n   * Check if a value implements the `Element` interface.\n   */\n\n  isElement(value: any): value is Element {\n    return (\n      isPlainObject(value) &&\n      Node.isNodeList(value.children) &&\n      !Editor.isEditor(value)\n    )\n  },\n\n  /**\n   * Check if a value is an array of `Element` objects.\n   */\n\n  isElementList(value: any): value is Element[] {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || Element.isElement(value[0]))\n    )\n  },\n\n  /**\n   * Check if an element matches set of properties.\n   *\n   * Note: this checks custom properties, and it does not ensure that any\n   * children are equivalent.\n   */\n\n  matches(element: Element, props: Partial<Element>): boolean {\n    for (const key in props) {\n      if (key === 'children') {\n        continue\n      }\n\n      if (element[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n}\n\n/**\n * `ElementEntry` objects refer to an `Element` and the `Path` where it can be\n * found inside a root node.\n */\n\nexport type ElementEntry = [Element, Path]\n","import { Path, Point, Range } from '..'\n\n/**\n * The `Location` interface is a union of the ways to refer to a specific\n * location in a Slate document: paths, points or ranges.\n *\n * Methods will often accept a `Location` instead of requiring only a `Path`,\n * `Point` or `Range`. This eliminates the need for developers to manage\n * converting between the different interfaces in their own code base.\n */\n\nexport type Location = Path | Point | Range\n\nexport const Location = {\n  /**\n   * Check if a value implements the `Location` interface.\n   */\n\n  isLocation(value: any): value is Location {\n    return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value)\n  },\n}\n\n/**\n * The `Span` interface is a low-level way to refer to locations in nodes\n * without using `Point` which requires leaf text nodes to be present.\n */\n\nexport type Span = [Path, Path]\n\nexport const Span = {\n  /**\n   * Check if a value implements the `Span` interface.\n   */\n\n  isSpan(value: any): value is Span {\n    return (\n      Array.isArray(value) && value.length === 2 && value.every(Path.isPath)\n    )\n  },\n}\n","import { produce } from 'immer'\nimport { Editor, Element, ElementEntry, Path, Range, Text } from '..'\n\n/**\n * The `Node` union type represents all of the different types of nodes that\n * occur in a Slate document tree.\n */\n\nexport type Node = Editor | Element | Text\n\nexport const Node = {\n  /**\n   * Get the node at a specific path, asserting that it's an ancestor node.\n   */\n\n  ancestor(root: Node, path: Path): Ancestor {\n    const node = Node.get(root, path)\n\n    if (Text.isText(node)) {\n      throw new Error(\n        `Cannot get the ancestor node at path [${path}] because it refers to a text node instead: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return a generator of all the ancestor nodes above a specific path.\n   *\n   * By default the order is bottom-up, from lowest to highest ancestor in\n   * the tree, but you can pass the `reverse: true` option to go top-down.\n   */\n\n  *ancestors(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Generator<NodeEntry<Ancestor>, void, undefined> {\n    for (const p of Path.ancestors(path, options)) {\n      const n = Node.ancestor(root, p)\n      const entry: NodeEntry<Ancestor> = [n, p]\n      yield entry\n    }\n  },\n\n  /**\n   * Get the child of a node at a specific index.\n   */\n\n  child(root: Node, index: number): Descendant {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get the child of a text node: ${JSON.stringify(root)}`\n      )\n    }\n\n    const c = root.children[index] as Descendant\n\n    if (c == null) {\n      throw new Error(\n        `Cannot get child at index \\`${index}\\` in node: ${JSON.stringify(\n          root\n        )}`\n      )\n    }\n\n    return c\n  },\n\n  /**\n   * Iterate over the children of a node at a specific path.\n   */\n\n  *children(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Generator<NodeEntry<Descendant>, void, undefined> {\n    const { reverse = false } = options\n    const ancestor = Node.ancestor(root, path)\n    const { children } = ancestor\n    let index = reverse ? children.length - 1 : 0\n\n    while (reverse ? index >= 0 : index < children.length) {\n      const child = Node.child(ancestor, index)\n      const childPath = path.concat(index)\n      yield [child, childPath]\n      index = reverse ? index - 1 : index + 1\n    }\n  },\n\n  /**\n   * Get an entry for the common ancesetor node of two paths.\n   */\n\n  common(root: Node, path: Path, another: Path): NodeEntry {\n    const p = Path.common(path, another)\n    const n = Node.get(root, p)\n    return [n, p]\n  },\n\n  /**\n   * Get the node at a specific path, asserting that it's a descendant node.\n   */\n\n  descendant(root: Node, path: Path): Descendant {\n    const node = Node.get(root, path)\n\n    if (Editor.isEditor(node)) {\n      throw new Error(\n        `Cannot get the descendant node at path [${path}] because it refers to the root editor node instead: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return a generator of all the descendant node entries inside a root node.\n   */\n\n  *descendants(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Generator<NodeEntry<Descendant>, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (path.length !== 0) {\n        // NOTE: we have to coerce here because checking the path's length does\n        // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.\n        yield [node, path] as NodeEntry<Descendant>\n      }\n    }\n  },\n\n  /**\n   * Return a generator of all the element nodes inside a root node. Each iteration\n   * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the\n   * root node is an element it will be included in the iteration as well.\n   */\n\n  *elements(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Generator<ElementEntry, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Element.isElement(node)) {\n        yield [node, path]\n      }\n    }\n  },\n\n  /**\n   * Get the first node entry in a root node from a path.\n   */\n\n  first(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        n = n.children[0]\n        p.push(0)\n      }\n    }\n\n    return [n, p]\n  },\n\n  /**\n   * Get the sliced fragment represented by a range inside a root node.\n   */\n\n  fragment(root: Node, range: Range): Descendant[] {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get a fragment starting from a root text node: ${JSON.stringify(\n          root\n        )}`\n      )\n    }\n\n    const newRoot = produce(root, r => {\n      const [start, end] = Range.edges(range)\n      const nodeEntries = Node.nodes(r, {\n        reverse: true,\n        pass: ([, path]) => !Range.includes(range, path),\n      })\n\n      for (const [, path] of nodeEntries) {\n        if (!Range.includes(range, path)) {\n          const parent = Node.parent(r, path)\n          const index = path[path.length - 1]\n          parent.children.splice(index, 1)\n        }\n\n        if (Path.equals(path, end.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(0, end.offset)\n        }\n\n        if (Path.equals(path, start.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(start.offset)\n        }\n      }\n\n      delete r.selection\n    })\n\n    return newRoot.children\n  },\n\n  /**\n   * Get the descendant node referred to by a specific path. If the path is an\n   * empty array, it refers to the root node itself.\n   */\n\n  get(root: Node, path: Path): Node {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        throw new Error(\n          `Cannot find a descendant at path [${path}] in node: ${JSON.stringify(\n            root\n          )}`\n        )\n      }\n\n      node = node.children[p]\n    }\n\n    return node\n  },\n\n  /**\n   * Check if a descendant node exists at a specific path.\n   */\n\n  has(root: Node, path: Path): boolean {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        return false\n      }\n\n      node = node.children[p]\n    }\n\n    return true\n  },\n\n  /**\n   * Check if a value implements the `Node` interface.\n   */\n\n  isNode(value: any): value is Node {\n    return (\n      Text.isText(value) || Element.isElement(value) || Editor.isEditor(value)\n    )\n  },\n\n  /**\n   * Check if a value is a list of `Node` objects.\n   */\n\n  isNodeList(value: any): value is Node[] {\n    return Array.isArray(value) && (value.length === 0 || Node.isNode(value[0]))\n  },\n\n  /**\n   * Get the last node entry in a root node from a path.\n   */\n\n  last(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        const i = n.children.length - 1\n        n = n.children[i]\n        p.push(i)\n      }\n    }\n\n    return [n, p]\n  },\n\n  /**\n   * Get the node at a specific path, ensuring it's a leaf text node.\n   */\n\n  leaf(root: Node, path: Path): Text {\n    const node = Node.get(root, path)\n\n    if (!Text.isText(node)) {\n      throw new Error(\n        `Cannot get the leaf node at path [${path}] because it refers to a non-leaf node: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return a generator of the in a branch of the tree, from a specific path.\n   *\n   * By default the order is top-down, from lowest to highest node in the tree,\n   * but you can pass the `reverse: true` option to go bottom-up.\n   */\n\n  *levels(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Generator<NodeEntry, void, undefined> {\n    for (const p of Path.levels(path, options)) {\n      const n = Node.get(root, p)\n      yield [n, p]\n    }\n  },\n\n  /**\n   * Check if a node matches a set of props.\n   */\n\n  matches(node: Node, props: Partial<Node>): boolean {\n    return (\n      (Element.isElement(node) && Element.matches(node, props)) ||\n      (Text.isText(node) && Text.matches(node, props))\n    )\n  },\n\n  /**\n   * Return a generator of all the node entries of a root node. Each entry is\n   * returned as a `[Node, Path]` tuple, with the path referring to the node's\n   * position inside the root node.\n   */\n\n  *nodes(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (entry: NodeEntry) => boolean\n    } = {}\n  ): Generator<NodeEntry, void, undefined> {\n    const { pass, reverse = false } = options\n    const { from = [], to } = options\n    const visited = new Set()\n    let p: Path = []\n    let n = root\n\n    while (true) {\n      if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {\n        break\n      }\n\n      if (!visited.has(n)) {\n        yield [n, p]\n      }\n\n      // If we're allowed to go downward and we haven't decsended yet, do.\n      if (\n        !visited.has(n) &&\n        !Text.isText(n) &&\n        n.children.length !== 0 &&\n        (pass == null || pass([n, p]) === false)\n      ) {\n        visited.add(n)\n        let nextIndex = reverse ? n.children.length - 1 : 0\n\n        if (Path.isAncestor(p, from)) {\n          nextIndex = from[p.length]\n        }\n\n        p = p.concat(nextIndex)\n        n = Node.get(root, p)\n        continue\n      }\n\n      // If we're at the root and we can't go down, we're done.\n      if (p.length === 0) {\n        break\n      }\n\n      // If we're going forward...\n      if (!reverse) {\n        const newPath = Path.next(p)\n\n        if (Node.has(root, newPath)) {\n          p = newPath\n          n = Node.get(root, p)\n          continue\n        }\n      }\n\n      // If we're going backward...\n      if (reverse && p[p.length - 1] !== 0) {\n        const newPath = Path.previous(p)\n        p = newPath\n        n = Node.get(root, p)\n        continue\n      }\n\n      // Otherwise we're going upward...\n      p = Path.parent(p)\n      n = Node.get(root, p)\n      visited.add(n)\n    }\n  },\n\n  /**\n   * Get the parent of a node at a specific path.\n   */\n\n  parent(root: Node, path: Path): Ancestor {\n    const parentPath = Path.parent(path)\n    const p = Node.get(root, parentPath)\n\n    if (Text.isText(p)) {\n      throw new Error(\n        `Cannot get the parent of path [${path}] because it does not exist in the root.`\n      )\n    }\n\n    return p\n  },\n\n  /**\n   * Get the concatenated text string of a node's content.\n   *\n   * Note that this will not include spaces or line breaks between block nodes.\n   * It is not a user-facing string, but a string for performing offset-related\n   * computations for a node.\n   */\n\n  string(node: Node): string {\n    if (Text.isText(node)) {\n      return node.text\n    } else {\n      return node.children.map(Node.string).join('')\n    }\n  },\n\n  /**\n   * Return a generator of all leaf text nodes in a root node.\n   */\n\n  *texts(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Generator<NodeEntry<Text>, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Text.isText(node)) {\n        yield [node, path]\n      }\n    }\n  },\n}\n\n/**\n * The `Descendant` union type represents nodes that are descendants in the\n * tree. It is returned as a convenience in certain cases to narrow a value\n * further than the more generic `Node` union.\n */\n\nexport type Descendant = Element | Text\n\n/**\n * The `Ancestor` union type represents nodes that are ancestors in the tree.\n * It is returned as a convenience in certain cases to narrow a value further\n * than the more generic `Node` union.\n */\n\nexport type Ancestor = Editor | Element\n\n/**\n * `NodeEntry` objects are returned when iterating over the nodes in a Slate\n * document tree. They consist of the node and its `Path` relative to the root\n * node in the document.\n */\n\nexport type NodeEntry<T extends Node = Node> = [T, Path]\n","import { Node, Path, Range } from '..'\nimport isPlainObject from 'is-plain-object'\n\nexport type InsertNodeOperation = {\n  type: 'insert_node'\n  path: Path\n  node: Node\n  [key: string]: unknown\n}\n\nexport type InsertTextOperation = {\n  type: 'insert_text'\n  path: Path\n  offset: number\n  text: string\n  [key: string]: unknown\n}\n\nexport type MergeNodeOperation = {\n  type: 'merge_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n  [key: string]: unknown\n}\n\nexport type MoveNodeOperation = {\n  type: 'move_node'\n  path: Path\n  newPath: Path\n  [key: string]: unknown\n}\n\nexport type RemoveNodeOperation = {\n  type: 'remove_node'\n  path: Path\n  node: Node\n  [key: string]: unknown\n}\n\nexport type RemoveTextOperation = {\n  type: 'remove_text'\n  path: Path\n  offset: number\n  text: string\n  [key: string]: unknown\n}\n\nexport type SetNodeOperation = {\n  type: 'set_node'\n  path: Path\n  properties: Partial<Node>\n  newProperties: Partial<Node>\n  [key: string]: unknown\n}\n\nexport type SetSelectionOperation =\n  | {\n      type: 'set_selection'\n      [key: string]: unknown\n      properties: null\n      newProperties: Range\n    }\n  | {\n      type: 'set_selection'\n      [key: string]: unknown\n      properties: Partial<Range>\n      newProperties: Partial<Range>\n    }\n  | {\n      type: 'set_selection'\n      [key: string]: unknown\n      properties: Range\n      newProperties: null\n    }\n\nexport type SplitNodeOperation = {\n  type: 'split_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n  [key: string]: unknown\n}\n\nexport type NodeOperation =\n  | InsertNodeOperation\n  | MergeNodeOperation\n  | MoveNodeOperation\n  | RemoveNodeOperation\n  | SetNodeOperation\n  | SplitNodeOperation\n\nexport type SelectionOperation = SetSelectionOperation\n\nexport type TextOperation = InsertTextOperation | RemoveTextOperation\n\n/**\n * `Operation` objects define the low-level instructions that Slate editors use\n * to apply changes to their internal state. Representing all changes as\n * operations is what allows Slate editors to easily implement history,\n * collaboration, and other features.\n */\n\nexport type Operation = NodeOperation | SelectionOperation | TextOperation\n\nexport const Operation = {\n  /**\n   * Check of a value is a `NodeOperation` object.\n   */\n\n  isNodeOperation(value: any): value is NodeOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_node')\n  },\n\n  /**\n   * Check of a value is an `Operation` object.\n   */\n\n  isOperation(value: any): value is Operation {\n    if (!isPlainObject(value)) {\n      return false\n    }\n\n    switch (value.type) {\n      case 'insert_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'insert_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'merge_node':\n        return (\n          typeof value.position === 'number' &&\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties)\n        )\n      case 'move_node':\n        return Path.isPath(value.path) && Path.isPath(value.newPath)\n      case 'remove_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'remove_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'set_node':\n        return (\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties) &&\n          isPlainObject(value.newProperties)\n        )\n      case 'set_selection':\n        return (\n          (value.properties === null && Range.isRange(value.newProperties)) ||\n          (value.newProperties === null && Range.isRange(value.properties)) ||\n          (isPlainObject(value.properties) &&\n            isPlainObject(value.newProperties))\n        )\n      case 'split_node':\n        return (\n          Path.isPath(value.path) &&\n          typeof value.position === 'number' &&\n          isPlainObject(value.properties)\n        )\n      default:\n        return false\n    }\n  },\n\n  /**\n   * Check if a value is a list of `Operation` objects.\n   */\n\n  isOperationList(value: any): value is Operation[] {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || Operation.isOperation(value[0]))\n    )\n  },\n\n  /**\n   * Check of a value is a `SelectionOperation` object.\n   */\n\n  isSelectionOperation(value: any): value is SelectionOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_selection')\n  },\n\n  /**\n   * Check of a value is a `TextOperation` object.\n   */\n\n  isTextOperation(value: any): value is TextOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_text')\n  },\n\n  /**\n   * Invert an operation, returning a new operation that will exactly undo the\n   * original when applied.\n   */\n\n  inverse(op: Operation): Operation {\n    switch (op.type) {\n      case 'insert_node': {\n        return { ...op, type: 'remove_node' }\n      }\n\n      case 'insert_text': {\n        return { ...op, type: 'remove_text' }\n      }\n\n      case 'merge_node': {\n        return { ...op, type: 'split_node', path: Path.previous(op.path) }\n      }\n\n      case 'move_node': {\n        const { newPath, path } = op\n\n        // PERF: in this case the move operation is a no-op anyways.\n        if (Path.equals(newPath, path)) {\n          return op\n        }\n\n        // If the move happens completely within a single parent the path and\n        // newPath are stable with respect to each other.\n        if (Path.isSibling(path, newPath)) {\n          return { ...op, path: newPath, newPath: path }\n        }\n\n        // If the move does not happen within a single parent it is possible\n        // for the move to impact the true path to the location where the node\n        // was removed from and where it was inserted. We have to adjust for this\n        // and find the original path. We can accomplish this (only in non-sibling)\n        // moves by looking at the impact of the move operation on the node\n        // after the original move path.\n        const inversePath = Path.transform(path, op)!\n        const inverseNewPath = Path.transform(Path.next(path), op)!\n        return { ...op, path: inversePath, newPath: inverseNewPath }\n      }\n\n      case 'remove_node': {\n        return { ...op, type: 'insert_node' }\n      }\n\n      case 'remove_text': {\n        return { ...op, type: 'insert_text' }\n      }\n\n      case 'set_node': {\n        const { properties, newProperties } = op\n        return { ...op, properties: newProperties, newProperties: properties }\n      }\n\n      case 'set_selection': {\n        const { properties, newProperties } = op\n\n        if (properties == null) {\n          return {\n            ...op,\n            properties: newProperties as Range,\n            newProperties: null,\n          }\n        } else if (newProperties == null) {\n          return {\n            ...op,\n            properties: null,\n            newProperties: properties as Range,\n          }\n        } else {\n          return { ...op, properties: newProperties, newProperties: properties }\n        }\n      }\n\n      case 'split_node': {\n        return { ...op, type: 'merge_node', path: Path.next(op.path) }\n      }\n    }\n  },\n}\n","import { produce } from 'immer'\nimport { Operation } from '..'\n\n/**\n * `Path` arrays are a list of indexes that describe a node's exact position in\n * a Slate node tree. Although they are usually relative to the root `Editor`\n * object, they can be relative to any `Node` object.\n */\n\nexport type Path = number[]\n\nexport const Path = {\n  /**\n   * Get a list of ancestor paths for a given path.\n   *\n   * The paths are sorted from deepest to shallowest ancestor. However, if the\n   * `reverse: true` option is passed, they are reversed.\n   */\n\n  ancestors(path: Path, options: { reverse?: boolean } = {}): Path[] {\n    const { reverse = false } = options\n    let paths = Path.levels(path, options)\n\n    if (reverse) {\n      paths = paths.slice(1)\n    } else {\n      paths = paths.slice(0, -1)\n    }\n\n    return paths\n  },\n\n  /**\n   * Get the common ancestor path of two paths.\n   */\n\n  common(path: Path, another: Path): Path {\n    const common: Path = []\n\n    for (let i = 0; i < path.length && i < another.length; i++) {\n      const av = path[i]\n      const bv = another[i]\n\n      if (av !== bv) {\n        break\n      }\n\n      common.push(av)\n    }\n\n    return common\n  },\n\n  /**\n   * Compare a path to another, returning an integer indicating whether the path\n   * was before, at, or after the other.\n   *\n   * Note: Two paths of unequal length can still receive a `0` result if one is\n   * directly above or below the other. If you want exact matching, use\n   * [[Path.equals]] instead.\n   */\n\n  compare(path: Path, another: Path): -1 | 0 | 1 {\n    const min = Math.min(path.length, another.length)\n\n    for (let i = 0; i < min; i++) {\n      if (path[i] < another[i]) return -1\n      if (path[i] > another[i]) return 1\n    }\n\n    return 0\n  },\n\n  /**\n   * Check if a path ends after one of the indexes in another.\n   */\n\n  endsAfter(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av > bv\n  },\n\n  /**\n   * Check if a path ends at one of the indexes in another.\n   */\n\n  endsAt(path: Path, another: Path): boolean {\n    const i = path.length\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    return Path.equals(as, bs)\n  },\n\n  /**\n   * Check if a path ends before one of the indexes in another.\n   */\n\n  endsBefore(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av < bv\n  },\n\n  /**\n   * Check if a path is exactly equal to another.\n   */\n\n  equals(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length && path.every((n, i) => n === another[i])\n    )\n  },\n\n  /**\n   * Check if the path of previous sibling node exists\n   */\n\n  hasPrevious(path: Path): boolean {\n    return path[path.length - 1] > 0\n  },\n\n  /**\n   * Check if a path is after another.\n   */\n\n  isAfter(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === 1\n  },\n\n  /**\n   * Check if a path is an ancestor of another.\n   */\n\n  isAncestor(path: Path, another: Path): boolean {\n    return path.length < another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is before another.\n   */\n\n  isBefore(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === -1\n  },\n\n  /**\n   * Check if a path is a child of another.\n   */\n\n  isChild(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length + 1 && Path.compare(path, another) === 0\n    )\n  },\n\n  /**\n   * Check if a path is equal to or an ancestor of another.\n   */\n\n  isCommon(path: Path, another: Path): boolean {\n    return path.length <= another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is a descendant of another.\n   */\n\n  isDescendant(path: Path, another: Path): boolean {\n    return path.length > another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is the parent of another.\n   */\n\n  isParent(path: Path, another: Path): boolean {\n    return (\n      path.length + 1 === another.length && Path.compare(path, another) === 0\n    )\n  },\n\n  /**\n   * Check is a value implements the `Path` interface.\n   */\n\n  isPath(value: any): value is Path {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || typeof value[0] === 'number')\n    )\n  },\n\n  /**\n   * Check if a path is a sibling of another.\n   */\n\n  isSibling(path: Path, another: Path): boolean {\n    if (path.length !== another.length) {\n      return false\n    }\n\n    const as = path.slice(0, -1)\n    const bs = another.slice(0, -1)\n    const al = path[path.length - 1]\n    const bl = another[another.length - 1]\n    return al !== bl && Path.equals(as, bs)\n  },\n\n  /**\n   * Get a list of paths at every level down to a path. Note: this is the same\n   * as `Path.ancestors`, but including the path itself.\n   *\n   * The paths are sorted from shallowest to deepest. However, if the `reverse:\n   * true` option is passed, they are reversed.\n   */\n\n  levels(\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Path[] {\n    const { reverse = false } = options\n    const list: Path[] = []\n\n    for (let i = 0; i <= path.length; i++) {\n      list.push(path.slice(0, i))\n    }\n\n    if (reverse) {\n      list.reverse()\n    }\n\n    return list\n  },\n\n  /**\n   * Given a path, get the path to the next sibling node.\n   */\n\n  next(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the next path of a root path [${path}], because it has no next index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n    return path.slice(0, -1).concat(last + 1)\n  },\n\n  /**\n   * Given a path, return a new path referring to the parent node above it.\n   */\n\n  parent(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(`Cannot get the parent path of the root path [${path}].`)\n    }\n\n    return path.slice(0, -1)\n  },\n\n  /**\n   * Given a path, get the path to the previous sibling node.\n   */\n\n  previous(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the previous path of a root path [${path}], because it has no previous index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n\n    if (last <= 0) {\n      throw new Error(\n        `Cannot get the previous path of a first child path [${path}] because it would result in a negative index.`\n      )\n    }\n\n    return path.slice(0, -1).concat(last - 1)\n  },\n\n  /**\n   * Get a path relative to an ancestor.\n   */\n\n  relative(path: Path, ancestor: Path): Path {\n    if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {\n      throw new Error(\n        `Cannot get the relative path of [${path}] inside ancestor [${ancestor}], because it is not above or equal to the path.`\n      )\n    }\n\n    return path.slice(ancestor.length)\n  },\n\n  /**\n   * Transform a path by an operation.\n   */\n\n  transform(\n    path: Path,\n    operation: Operation,\n    options: { affinity?: 'forward' | 'backward' | null } = {}\n  ): Path | null {\n    return produce(path, p => {\n      const { affinity = 'forward' } = options\n\n      // PERF: Exit early if the operation is guaranteed not to have an effect.\n      if (path.length === 0) {\n        return\n      }\n\n      switch (operation.type) {\n        case 'insert_node': {\n          const { path: op } = operation\n\n          if (\n            Path.equals(op, p) ||\n            Path.endsBefore(op, p) ||\n            Path.isAncestor(op, p)\n          ) {\n            p[op.length - 1] += 1\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          const { path: op } = operation\n\n          if (Path.equals(op, p) || Path.isAncestor(op, p)) {\n            return null\n          } else if (Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          const { path: op, position } = operation\n\n          if (Path.equals(op, p) || Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          } else if (Path.isAncestor(op, p)) {\n            p[op.length - 1] -= 1\n            p[op.length] += position\n          }\n\n          break\n        }\n\n        case 'split_node': {\n          const { path: op, position } = operation\n\n          if (Path.equals(op, p)) {\n            if (affinity === 'forward') {\n              p[p.length - 1] += 1\n            } else if (affinity === 'backward') {\n              // Nothing, because it still refers to the right path.\n            } else {\n              return null\n            }\n          } else if (Path.endsBefore(op, p)) {\n            p[op.length - 1] += 1\n          } else if (Path.isAncestor(op, p) && path[op.length] >= position) {\n            p[op.length - 1] += 1\n            p[op.length] -= position\n          }\n\n          break\n        }\n\n        case 'move_node': {\n          const { path: op, newPath: onp } = operation\n\n          // If the old and new path are the same, it's a no-op.\n          if (Path.equals(op, onp)) {\n            return\n          }\n\n          if (Path.isAncestor(op, p) || Path.equals(op, p)) {\n            const copy = onp.slice()\n\n            if (Path.endsBefore(op, onp) && op.length < onp.length) {\n              copy[op.length - 1] -= 1\n            }\n\n            return copy.concat(p.slice(op.length))\n          } else if (\n            Path.isSibling(op, onp) &&\n            (Path.isAncestor(onp, p) || Path.equals(onp, p))\n          ) {\n            if (Path.endsBefore(op, p)) {\n              p[op.length - 1] -= 1\n            } else {\n              p[op.length - 1] += 1\n            }\n          } else if (\n            Path.endsBefore(onp, p) ||\n            Path.equals(onp, p) ||\n            Path.isAncestor(onp, p)\n          ) {\n            if (Path.endsBefore(op, p)) {\n              p[op.length - 1] -= 1\n            }\n\n            p[onp.length - 1] += 1\n          } else if (Path.endsBefore(op, p)) {\n            if (Path.equals(onp, p)) {\n              p[onp.length - 1] += 1\n            }\n\n            p[op.length - 1] -= 1\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n","import { Operation, Path } from '..'\n\n/**\n * `PathRef` objects keep a specific path in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date path value.\n */\n\nexport interface PathRef {\n  current: Path | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Path | null\n}\n\nexport const PathRef = {\n  /**\n   * Transform the path ref's current value by an operation.\n   */\n\n  transform(ref: PathRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Path.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import isPlainObject from 'is-plain-object'\nimport { produce } from 'immer'\nimport { Operation, Path } from '..'\n\n/**\n * `Point` objects refer to a specific location in a text node in a Slate\n * document. Its path refers to the location of the node in the tree, and its\n * offset refers to the distance into the node's string of text. Points can\n * only refer to `Text` nodes.\n */\n\nexport interface Point {\n  path: Path\n  offset: number\n  [key: string]: unknown\n}\n\nexport const Point = {\n  /**\n   * Compare a point to another, returning an integer indicating whether the\n   * point was before, at, or after the other.\n   */\n\n  compare(point: Point, another: Point): -1 | 0 | 1 {\n    const result = Path.compare(point.path, another.path)\n\n    if (result === 0) {\n      if (point.offset < another.offset) return -1\n      if (point.offset > another.offset) return 1\n      return 0\n    }\n\n    return result\n  },\n\n  /**\n   * Check if a point is after another.\n   */\n\n  isAfter(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === 1\n  },\n\n  /**\n   * Check if a point is before another.\n   */\n\n  isBefore(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === -1\n  },\n\n  /**\n   * Check if a point is exactly equal to another.\n   */\n\n  equals(point: Point, another: Point): boolean {\n    // PERF: ensure the offsets are equal first since they are cheaper to check.\n    return (\n      point.offset === another.offset && Path.equals(point.path, another.path)\n    )\n  },\n\n  /**\n   * Check if a value implements the `Point` interface.\n   */\n\n  isPoint(value: any): value is Point {\n    return (\n      isPlainObject(value) &&\n      typeof value.offset === 'number' &&\n      Path.isPath(value.path)\n    )\n  },\n\n  /**\n   * Transform a point by an operation.\n   */\n\n  transform(\n    point: Point,\n    op: Operation,\n    options: { affinity?: 'forward' | 'backward' | null } = {}\n  ): Point | null {\n    return produce(point, p => {\n      const { affinity = 'forward' } = options\n      const { path, offset } = p\n\n      switch (op.type) {\n        case 'insert_node':\n        case 'move_node': {\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'insert_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset += op.text.length\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          if (Path.equals(op.path, path)) {\n            p.offset += op.position\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'remove_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset -= Math.min(offset - op.offset, op.text.length)\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {\n            return null\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'split_node': {\n          if (Path.equals(op.path, path)) {\n            if (op.position === offset && affinity == null) {\n              return null\n            } else if (\n              op.position < offset ||\n              (op.position === offset && affinity === 'forward')\n            ) {\n              p.offset -= op.position\n\n              p.path = Path.transform(path, op, {\n                ...options,\n                affinity: 'forward',\n              })!\n            }\n          } else {\n            p.path = Path.transform(path, op, options)!\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n\n/**\n * `PointEntry` objects are returned when iterating over `Point` objects that\n * belong to a range.\n */\n\nexport type PointEntry = [Point, 'anchor' | 'focus']\n","import { Operation, Point } from '..'\n\n/**\n * `PointRef` objects keep a specific point in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date point value.\n */\n\nexport interface PointRef {\n  current: Point | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Point | null\n}\n\nexport const PointRef = {\n  /**\n   * Transform the point ref's current value by an operation.\n   */\n\n  transform(ref: PointRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const point = Point.transform(current, op, { affinity })\n    ref.current = point\n\n    if (point == null) {\n      ref.unref()\n    }\n  },\n}\n","import { produce } from 'immer'\nimport isPlainObject from 'is-plain-object'\nimport { Operation, Path, Point, PointEntry } from '..'\n\n/**\n * `Range` objects are a set of points that refer to a specific span of a Slate\n * document. They can define a span inside a single node or a can span across\n * multiple nodes.\n */\n\nexport interface Range {\n  anchor: Point\n  focus: Point\n  [key: string]: unknown\n}\n\nexport const Range = {\n  /**\n   * Get the start and end points of a range, in the order in which they appear\n   * in the document.\n   */\n\n  edges(\n    range: Range,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): [Point, Point] {\n    const { reverse = false } = options\n    const { anchor, focus } = range\n    return Range.isBackward(range) === reverse\n      ? [anchor, focus]\n      : [focus, anchor]\n  },\n\n  /**\n   * Get the end point of a range.\n   */\n\n  end(range: Range): Point {\n    const [, end] = Range.edges(range)\n    return end\n  },\n\n  /**\n   * Check if a range is exactly equal to another.\n   */\n\n  equals(range: Range, another: Range): boolean {\n    return (\n      Point.equals(range.anchor, another.anchor) &&\n      Point.equals(range.focus, another.focus)\n    )\n  },\n\n  /**\n   * Check if a range includes a path, a point or part of another range.\n   */\n\n  includes(range: Range, target: Path | Point | Range): boolean {\n    if (Range.isRange(target)) {\n      if (\n        Range.includes(range, target.anchor) ||\n        Range.includes(range, target.focus)\n      ) {\n        return true\n      }\n\n      const [rs, re] = Range.edges(range)\n      const [ts, te] = Range.edges(target)\n      return Point.isBefore(rs, ts) && Point.isAfter(re, te)\n    }\n\n    const [start, end] = Range.edges(range)\n    let isAfterStart = false\n    let isBeforeEnd = false\n\n    if (Point.isPoint(target)) {\n      isAfterStart = Point.compare(target, start) >= 0\n      isBeforeEnd = Point.compare(target, end) <= 0\n    } else {\n      isAfterStart = Path.compare(target, start.path) >= 0\n      isBeforeEnd = Path.compare(target, end.path) <= 0\n    }\n\n    return isAfterStart && isBeforeEnd\n  },\n\n  /**\n   * Get the intersection of a range with another.\n   */\n\n  intersection(range: Range, another: Range): Range | null {\n    const { anchor, focus, ...rest } = range\n    const [s1, e1] = Range.edges(range)\n    const [s2, e2] = Range.edges(another)\n    const start = Point.isBefore(s1, s2) ? s2 : s1\n    const end = Point.isBefore(e1, e2) ? e1 : e2\n\n    if (Point.isBefore(end, start)) {\n      return null\n    } else {\n      return { anchor: start, focus: end, ...rest }\n    }\n  },\n\n  /**\n   * Check if a range is backward, meaning that its anchor point appears in the\n   * document _after_ its focus point.\n   */\n\n  isBackward(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.isAfter(anchor, focus)\n  },\n\n  /**\n   * Check if a range is collapsed, meaning that both its anchor and focus\n   * points refer to the exact same position in the document.\n   */\n\n  isCollapsed(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.equals(anchor, focus)\n  },\n\n  /**\n   * Check if a range is expanded.\n   *\n   * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.\n   */\n\n  isExpanded(range: Range): boolean {\n    return !Range.isCollapsed(range)\n  },\n\n  /**\n   * Check if a range is forward.\n   *\n   * This is the opposite of [[Range.isBackward]] and is provided for legibility.\n   */\n\n  isForward(range: Range): boolean {\n    return !Range.isBackward(range)\n  },\n\n  /**\n   * Check if a value implements the [[Range]] interface.\n   */\n\n  isRange(value: any): value is Range {\n    return (\n      isPlainObject(value) &&\n      Point.isPoint(value.anchor) &&\n      Point.isPoint(value.focus)\n    )\n  },\n\n  /**\n   * Iterate through all of the point entries in a range.\n   */\n\n  *points(range: Range): Generator<PointEntry, void, undefined> {\n    yield [range.anchor, 'anchor']\n    yield [range.focus, 'focus']\n  },\n\n  /**\n   * Get the start point of a range.\n   */\n\n  start(range: Range): Point {\n    const [start] = Range.edges(range)\n    return start\n  },\n\n  /**\n   * Transform a range by an operation.\n   */\n\n  transform(\n    range: Range,\n    op: Operation,\n    options: {\n      affinity?: 'forward' | 'backward' | 'outward' | 'inward' | null\n    } = {}\n  ): Range | null {\n    const { affinity = 'inward' } = options\n    let affinityAnchor: 'forward' | 'backward' | null\n    let affinityFocus: 'forward' | 'backward' | null\n\n    if (affinity === 'inward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      } else {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      }\n    } else if (affinity === 'outward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      } else {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      }\n    } else {\n      affinityAnchor = affinity\n      affinityFocus = affinity\n    }\n\n    return produce(range, r => {\n      const anchor = Point.transform(r.anchor, op, { affinity: affinityAnchor })\n      const focus = Point.transform(r.focus, op, { affinity: affinityFocus })\n\n      if (!anchor || !focus) {\n        return null\n      }\n\n      r.anchor = anchor\n      r.focus = focus\n    })\n  },\n}\n","import { Operation, Range } from '..'\n\n/**\n * `RangeRef` objects keep a specific range in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date range value.\n */\n\nexport interface RangeRef {\n  current: Range | null\n  affinity: 'forward' | 'backward' | 'outward' | 'inward' | null\n  unref(): Range | null\n}\n\nexport const RangeRef = {\n  /**\n   * Transform the range ref's current value by an operation.\n   */\n\n  transform(ref: RangeRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Range.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import isPlainObject from 'is-plain-object'\nimport { Range } from '..'\n\n/**\n * `Text` objects represent the nodes that contain the actual text content of a\n * Slate document along with any formatting properties. They are always leaf\n * nodes in the document tree as they cannot contain any children.\n */\n\nexport interface Text {\n  text: string\n  [key: string]: unknown\n}\n\nexport const Text = {\n  /**\n   * Check if two text nodes are equal.\n   */\n\n  equals(\n    text: Text,\n    another: Text,\n    options: { loose?: boolean } = {}\n  ): boolean {\n    const { loose = false } = options\n\n    for (const key in text) {\n      if (loose && key === 'text') {\n        continue\n      }\n\n      if (text[key] !== another[key]) {\n        return false\n      }\n    }\n\n    for (const key in another) {\n      if (loose && key === 'text') {\n        continue\n      }\n\n      if (text[key] !== another[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Check if a value implements the `Text` interface.\n   */\n\n  isText(value: any): value is Text {\n    return isPlainObject(value) && typeof value.text === 'string'\n  },\n\n  /**\n   * Check if a value is a list of `Text` objects.\n   */\n\n  isTextList(value: any): value is Text[] {\n    return Array.isArray(value) && (value.length === 0 || Text.isText(value[0]))\n  },\n\n  /**\n   * Check if an text matches set of properties.\n   *\n   * Note: this is for matching custom properties, and it does not ensure that\n   * the `text` property are two nodes equal.\n   */\n\n  matches(text: Text, props: Partial<Text>): boolean {\n    for (const key in props) {\n      if (key === 'text') {\n        continue\n      }\n\n      if (text[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Get the leaves for a text node given decorations.\n   */\n\n  decorations(node: Text, decorations: Range[]): Text[] {\n    let leaves: Text[] = [{ ...node }]\n\n    for (const dec of decorations) {\n      const { anchor, focus, ...rest } = dec\n      const [start, end] = Range.edges(dec)\n      const next = []\n      let o = 0\n\n      for (const leaf of leaves) {\n        const { length } = leaf.text\n        const offset = o\n        o += length\n\n        // If the range encompases the entire leaf, add the range.\n        if (start.offset <= offset && end.offset >= offset + length) {\n          Object.assign(leaf, rest)\n          next.push(leaf)\n          continue\n        }\n\n        // If the range starts after the leaf, or ends before it, continue.\n        if (\n          start.offset > offset + length ||\n          end.offset < offset ||\n          (end.offset === offset && offset !== 0)\n        ) {\n          next.push(leaf)\n          continue\n        }\n\n        // Otherwise we need to split the leaf, at the start, end, or both,\n        // and add the range to the middle intersecting section. Do the end\n        // split first since we don't need to update the offset that way.\n        let middle = leaf\n        let before\n        let after\n\n        if (end.offset < offset + length) {\n          const off = end.offset - offset\n          after = { ...middle, text: middle.text.slice(off) }\n          middle = { ...middle, text: middle.text.slice(0, off) }\n        }\n\n        if (start.offset > offset) {\n          const off = start.offset - offset\n          before = { ...middle, text: middle.text.slice(0, off) }\n          middle = { ...middle, text: middle.text.slice(off) }\n        }\n\n        Object.assign(middle, rest)\n\n        if (before) {\n          next.push(before)\n        }\n\n        next.push(middle)\n\n        if (after) {\n          next.push(after)\n        }\n      }\n\n      leaves = next\n    }\n\n    return leaves\n  },\n}\n","import { createDraft, finishDraft, isDraft } from 'immer'\nimport {\n  Node,\n  Editor,\n  Range,\n  Point,\n  Text,\n  Element,\n  Operation,\n  Descendant,\n  NodeEntry,\n  Path,\n  Ancestor,\n} from '..'\n\nexport const GeneralTransforms = {\n  /**\n   * Transform the editor by an operation.\n   */\n\n  transform(editor: Editor, op: Operation) {\n    editor.children = createDraft(editor.children)\n    let selection = editor.selection && createDraft(editor.selection)\n\n    switch (op.type) {\n      case 'insert_node': {\n        const { path, node } = op\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        parent.children.splice(index, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'insert_text': {\n        const { path, offset, text } = op\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset)\n        node.text = before + text + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'merge_node': {\n        const { path } = op\n        const node = Node.get(editor, path)\n        const prevPath = Path.previous(path)\n        const prev = Node.get(editor, prevPath)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        if (Text.isText(node) && Text.isText(prev)) {\n          prev.text += node.text\n        } else if (!Text.isText(node) && !Text.isText(prev)) {\n          prev.children.push(...node.children)\n        } else {\n          throw new Error(\n            `Cannot apply a \"merge_node\" operation at path [${path}] to nodes of different interaces: ${node} ${prev}`\n          )\n        }\n\n        parent.children.splice(index, 1)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        const { path, newPath } = op\n\n        if (Path.isAncestor(path, newPath)) {\n          throw new Error(\n            `Cannot move a path [${path}] to new path [${newPath}] because the destination is inside itself.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        // This is tricky, but since the `path` and `newPath` both refer to\n        // the same snapshot in time, there's a mismatch. After either\n        // removing the original position, the second step's path can be out\n        // of date. So instead of using the `op.newPath` directly, we\n        // transform `op.path` to ascertain what the `newPath` would be after\n        // the operation was applied.\n        parent.children.splice(index, 1)\n        const truePath = Path.transform(path, op)!\n        const newParent = Node.get(editor, Path.parent(truePath)) as Ancestor\n        const newIndex = truePath[truePath.length - 1]\n\n        newParent.children.splice(newIndex, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'remove_node': {\n        const { path } = op\n        const index = path[path.length - 1]\n        const parent = Node.parent(editor, path)\n        parent.children.splice(index, 1)\n\n        // Transform all of the points in the value, but if the point was in the\n        // node that was removed we need to update the range or remove it.\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            const result = Point.transform(point, op)\n\n            if (selection != null && result != null) {\n              selection[key] = result\n            } else {\n              let prev: NodeEntry<Text> | undefined\n              let next: NodeEntry<Text> | undefined\n\n              for (const [n, p] of Node.texts(editor)) {\n                if (Path.compare(p, path) === -1) {\n                  prev = [n, p]\n                } else {\n                  next = [n, p]\n                  break\n                }\n              }\n\n              if (prev) {\n                point.path = prev[1]\n                point.offset = prev[0].text.length\n              } else if (next) {\n                point.path = next[1]\n                point.offset = 0\n              } else {\n                selection = null\n              }\n            }\n          }\n        }\n\n        break\n      }\n\n      case 'remove_text': {\n        const { path, offset, text } = op\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset + text.length)\n        node.text = before + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'set_node': {\n        const { path, newProperties } = op\n\n        if (path.length === 0) {\n          throw new Error(`Cannot set properties on the root node!`)\n        }\n\n        const node = Node.get(editor, path)\n\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            throw new Error(`Cannot set the \"${key}\" property of nodes!`)\n          }\n\n          const value = newProperties[key]\n\n          if (value == null) {\n            delete node[key]\n          } else {\n            node[key] = value\n          }\n        }\n\n        break\n      }\n\n      case 'set_selection': {\n        const { newProperties } = op\n\n        if (newProperties == null) {\n          selection = newProperties\n        } else if (selection == null) {\n          if (!Range.isRange(newProperties)) {\n            throw new Error(\n              `Cannot apply an incomplete \"set_selection\" operation properties ${JSON.stringify(\n                newProperties\n              )} when there is no current selection.`\n            )\n          }\n\n          selection = newProperties\n        } else {\n          Object.assign(selection, newProperties)\n        }\n\n        break\n      }\n\n      case 'split_node': {\n        const { path, position, properties } = op\n\n        if (path.length === 0) {\n          throw new Error(\n            `Cannot apply a \"split_node\" operation at path [${path}] because the root node cannot be split.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        let newNode: Descendant\n\n        if (Text.isText(node)) {\n          const before = node.text.slice(0, position)\n          const after = node.text.slice(position)\n          node.text = before\n          newNode = {\n            ...node,\n            ...(properties as Partial<Text>),\n            text: after,\n          }\n        } else {\n          const before = node.children.slice(0, position)\n          const after = node.children.slice(position)\n          node.children = before\n\n          newNode = {\n            ...node,\n            ...(properties as Partial<Element>),\n            children: after,\n          }\n        }\n\n        parent.children.splice(index + 1, 0, newNode)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n    }\n\n    editor.children = finishDraft(editor.children) as Node[]\n\n    if (selection) {\n      editor.selection = isDraft(selection)\n        ? (finishDraft(selection) as Range)\n        : selection\n    } else {\n      editor.selection = null\n    }\n  },\n}\n","import {\n  Editor,\n  Element,\n  Location,\n  Node,\n  Path,\n  Point,\n  Range,\n  Text,\n  Transforms,\n  NodeEntry,\n  Ancestor,\n} from '..'\n\nexport const NodeTransforms = {\n  /**\n   * Insert nodes at a specific location in the Editor.\n   */\n\n  insertNodes(\n    editor: Editor,\n    nodes: Node | Node[],\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      select?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n      let { at, match, select } = options\n\n      if (Node.isNode(nodes)) {\n        nodes = [nodes]\n      }\n\n      if (nodes.length === 0) {\n        return\n      }\n\n      const [node] = nodes\n\n      // By default, use the selection as the target location. But if there is\n      // no selection, insert at the end of the document since that is such a\n      // common use case when inserting from a non-selected state.\n      if (!at) {\n        if (editor.selection) {\n          at = editor.selection\n        } else if (editor.children.length > 0) {\n          at = Editor.end(editor, [])\n        } else {\n          at = [0]\n        }\n\n        select = true\n      }\n\n      if (select == null) {\n        select = false\n      }\n\n      if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at)\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n        }\n      }\n\n      if (Point.isPoint(at)) {\n        if (match == null) {\n          if (Text.isText(node)) {\n            match = n => Text.isText(n)\n          } else if (editor.isInline(node)) {\n            match = n => Text.isText(n) || Editor.isInline(editor, n)\n          } else {\n            match = n => Editor.isBlock(editor, n)\n          }\n        }\n\n        const [entry] = Editor.nodes(editor, {\n          at: at.path,\n          match,\n          mode,\n          voids,\n        })\n\n        if (entry) {\n          const [, matchPath] = entry\n          const pathRef = Editor.pathRef(editor, matchPath)\n          const isAtEnd = Editor.isEnd(editor, at, matchPath)\n          Transforms.splitNodes(editor, { at, match, mode, voids })\n          const path = pathRef.unref()!\n          at = isAtEnd ? Path.next(path) : path\n        } else {\n          return\n        }\n      }\n\n      const parentPath = Path.parent(at)\n      let index = at[at.length - 1]\n\n      if (!voids && Editor.void(editor, { at: parentPath })) {\n        return\n      }\n\n      for (const node of nodes) {\n        const path = parentPath.concat(index)\n        index++\n        editor.apply({ type: 'insert_node', path, node })\n      }\n\n      if (select) {\n        const point = Editor.end(editor, at)\n\n        if (point) {\n          Transforms.select(editor, point)\n        }\n      }\n    })\n  },\n\n  /**\n   * Lift nodes at a specific location upwards in the document tree, splitting\n   * their parent in two if necessary.\n   */\n\n  liftNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { at = editor.selection, mode = 'lowest', voids = false } = options\n      let { match } = options\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!at) {\n        return\n      }\n\n      const matches = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n\n        if (path.length < 2) {\n          throw new Error(\n            `Cannot lift node at a path [${path}] because it has a depth of less than \\`2\\`.`\n          )\n        }\n\n        const parentNodeEntry = Editor.node(editor, Path.parent(path))\n        const [parent, parentPath] = parentNodeEntry as NodeEntry<Ancestor>\n        const index = path[path.length - 1]\n        const { length } = parent.children\n\n        if (length === 1) {\n          const toPath = Path.next(parentPath)\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n          Transforms.removeNodes(editor, { at: parentPath, voids })\n        } else if (index === 0) {\n          Transforms.moveNodes(editor, { at: path, to: parentPath, voids })\n        } else if (index === length - 1) {\n          const toPath = Path.next(parentPath)\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        } else {\n          const splitPath = Path.next(path)\n          const toPath = Path.next(parentPath)\n          Transforms.splitNodes(editor, { at: splitPath, voids })\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        }\n      }\n    })\n  },\n\n  /**\n   * Merge a node at a location with the previous node of the same depth,\n   * removing any empty containing nodes after the merge if necessary.\n   */\n\n  mergeNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      let { match, at = editor.selection } = options\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          const [parent] = Editor.parent(editor, at)\n          match = n => parent.children.includes(n)\n        } else {\n          match = n => Editor.isBlock(editor, n)\n        }\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n\n          if (options.at == null) {\n            Transforms.select(editor, at)\n          }\n        }\n      }\n\n      const [current] = Editor.nodes(editor, { at, match, voids, mode })\n      const prev = Editor.previous(editor, { at, match, voids, mode })\n\n      if (!current || !prev) {\n        return\n      }\n\n      const [node, path] = current\n      const [prevNode, prevPath] = prev\n\n      if (path.length === 0 || prevPath.length === 0) {\n        return\n      }\n\n      const newPath = Path.next(prevPath)\n      const commonPath = Path.common(path, prevPath)\n      const isPreviousSibling = Path.isSibling(path, prevPath)\n      const levels = Array.from(Editor.levels(editor, { at: path }), ([n]) => n)\n        .slice(commonPath.length)\n        .slice(0, -1)\n\n      // Determine if the merge will leave an ancestor of the path empty as a\n      // result, in which case we'll want to remove it after merging.\n      const emptyAncestor = Editor.above(editor, {\n        at: path,\n        mode: 'highest',\n        match: n =>\n          levels.includes(n) && Element.isElement(n) && n.children.length === 1,\n      })\n\n      const emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1])\n      let properties\n      let position\n\n      // Ensure that the nodes are equivalent, and figure out what the position\n      // and extra properties of the merge will be.\n      if (Text.isText(node) && Text.isText(prevNode)) {\n        const { text, ...rest } = node\n        position = prevNode.text.length\n        properties = rest as Partial<Text>\n      } else if (Element.isElement(node) && Element.isElement(prevNode)) {\n        const { children, ...rest } = node\n        position = prevNode.children.length\n        properties = rest as Partial<Element>\n      } else {\n        throw new Error(\n          `Cannot merge the node at path [${path}] with the previous sibling because it is not the same kind: ${JSON.stringify(\n            node\n          )} ${JSON.stringify(prevNode)}`\n        )\n      }\n\n      // If the node isn't already the next sibling of the previous node, move\n      // it so that it is before merging.\n      if (!isPreviousSibling) {\n        Transforms.moveNodes(editor, { at: path, to: newPath, voids })\n      }\n\n      // If there was going to be an empty ancestor of the node that was merged,\n      // we remove it from the tree.\n      if (emptyRef) {\n        Transforms.removeNodes(editor, { at: emptyRef.current!, voids })\n      }\n\n      // If the target node that we're merging with is empty, remove it instead\n      // of merging the two. This is a common rich text editor behavior to\n      // prevent losing formatting when deleting entire nodes when you have a\n      // hanging selection.\n      if (\n        (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode)) ||\n        (Text.isText(prevNode) && prevNode.text === '')\n      ) {\n        Transforms.removeNodes(editor, { at: prevPath, voids })\n      } else {\n        editor.apply({\n          type: 'merge_node',\n          path: newPath,\n          position,\n          properties,\n        })\n      }\n\n      if (emptyRef) {\n        emptyRef.unref()\n      }\n    })\n  },\n\n  /**\n   * Move the nodes at a location to a new location.\n   */\n\n  moveNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      to: Path\n      voids?: boolean\n    }\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const {\n        to,\n        at = editor.selection,\n        mode = 'lowest',\n        voids = false,\n      } = options\n      let { match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      const toRef = Editor.pathRef(editor, to)\n      const targets = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(targets, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        const newPath = toRef.current!\n\n        if (path.length !== 0) {\n          editor.apply({ type: 'move_node', path, newPath })\n        }\n      }\n\n      toRef.unref()\n    })\n  },\n\n  /**\n   * Remove the nodes at a specific location in the document.\n   */\n\n  removeNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n      let { at = editor.selection, match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      const depths = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(depths, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n\n        if (path) {\n          const [node] = Editor.node(editor, path)\n          editor.apply({ type: 'remove_node', path, node })\n        }\n      }\n    })\n  },\n\n  /**\n   * Set new properties on the nodes at a location.\n   */\n\n  setNodes(\n    editor: Editor,\n    props: Partial<Node>,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      let { match, at = editor.selection } = options\n      const {\n        hanging = false,\n        mode = 'lowest',\n        split = false,\n        voids = false,\n      } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      if (split && Range.isRange(at)) {\n        const rangeRef = Editor.rangeRef(editor, at, { affinity: 'inward' })\n        const [start, end] = Range.edges(at)\n        const splitMode = mode === 'lowest' ? 'lowest' : 'highest'\n        Transforms.splitNodes(editor, {\n          at: end,\n          match,\n          mode: splitMode,\n          voids,\n        })\n        Transforms.splitNodes(editor, {\n          at: start,\n          match,\n          mode: splitMode,\n          voids,\n        })\n        at = rangeRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n\n      for (const [node, path] of Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids,\n      })) {\n        const properties: Partial<Node> = {}\n        const newProperties: Partial<Node> = {}\n\n        // You can't set properties on the editor node.\n        if (path.length === 0) {\n          continue\n        }\n\n        for (const k in props) {\n          if (k === 'children' || k === 'text') {\n            continue\n          }\n\n          if (props[k] !== node[k]) {\n            properties[k] = node[k]\n            newProperties[k] = props[k]\n          }\n        }\n\n        if (Object.keys(newProperties).length !== 0) {\n          editor.apply({\n            type: 'set_node',\n            path,\n            properties,\n            newProperties,\n          })\n        }\n      }\n    })\n  },\n\n  /**\n   * Split the nodes at a specific location.\n   */\n\n  splitNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      always?: boolean\n      height?: number\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', voids = false } = options\n      let { match, at = editor.selection, height = 0, always = false } = options\n\n      if (match == null) {\n        match = n => Editor.isBlock(editor, n)\n      }\n\n      if (Range.isRange(at)) {\n        at = deleteRange(editor, at)\n      }\n\n      // If the target is a path, the default height-skipping and position\n      // counters need to account for us potentially splitting at a non-leaf.\n      if (Path.isPath(at)) {\n        const path = at\n        const point = Editor.point(editor, path)\n        const [parent] = Editor.parent(editor, path)\n        match = n => n === parent\n        height = point.path.length - path.length + 1\n        at = point\n        always = true\n      }\n\n      if (!at) {\n        return\n      }\n\n      const beforeRef = Editor.pointRef(editor, at, {\n        affinity: 'backward',\n      })\n      const [highest] = Editor.nodes(editor, { at, match, mode, voids })\n\n      if (!highest) {\n        return\n      }\n\n      const voidMatch = Editor.void(editor, { at, mode: 'highest' })\n      const nudge = 0\n\n      if (!voids && voidMatch) {\n        const [voidNode, voidPath] = voidMatch\n\n        if (Element.isElement(voidNode) && editor.isInline(voidNode)) {\n          let after = Editor.after(editor, voidPath)\n\n          if (!after) {\n            const text = { text: '' }\n            const afterPath = Path.next(voidPath)\n            Transforms.insertNodes(editor, text, { at: afterPath, voids })\n            after = Editor.point(editor, afterPath)!\n          }\n\n          at = after\n          always = true\n        }\n\n        const siblingHeight = at.path.length - voidPath.length\n        height = siblingHeight + 1\n        always = true\n      }\n\n      const afterRef = Editor.pointRef(editor, at)\n      const depth = at.path.length - height\n      const [, highestPath] = highest\n      const lowestPath = at.path.slice(0, depth)\n      let position = height === 0 ? at.offset : at.path[depth] + nudge\n\n      for (const [node, path] of Editor.levels(editor, {\n        at: lowestPath,\n        reverse: true,\n        voids,\n      })) {\n        let split = false\n\n        if (\n          path.length < highestPath.length ||\n          path.length === 0 ||\n          (!voids && Editor.isVoid(editor, node))\n        ) {\n          break\n        }\n\n        const point = beforeRef.current!\n        const isEnd = Editor.isEnd(editor, point, path)\n\n        if (always || !beforeRef || !Editor.isEdge(editor, point, path)) {\n          split = true\n          const { text, children, ...properties } = node\n          editor.apply({\n            type: 'split_node',\n            path,\n            position,\n            properties,\n          })\n        }\n\n        position = path[path.length - 1] + (split || isEnd ? 1 : 0)\n      }\n\n      if (options.at == null) {\n        const point = afterRef.current || Editor.end(editor, [])\n        Transforms.select(editor, point)\n      }\n\n      beforeRef.unref()\n      afterRef.unref()\n    })\n  },\n\n  /**\n   * Unset properties on the nodes at a location.\n   */\n\n  unsetNodes(\n    editor: Editor,\n    props: string | string[],\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    if (!Array.isArray(props)) {\n      props = [props]\n    }\n\n    const obj = {}\n\n    for (const key of props) {\n      obj[key] = null\n    }\n\n    Transforms.setNodes(editor, obj, options)\n  },\n\n  /**\n   * Unwrap the nodes at a location from a parent node, splitting the parent if\n   * necessary to ensure that only the content in the range is unwrapped.\n   */\n\n  unwrapNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    }\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', split = false, voids = false } = options\n      let { at = editor.selection, match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      const rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null\n      const matches = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        const [node] = Editor.node(editor, path) as NodeEntry<Ancestor>\n        let range = Editor.range(editor, path)\n\n        if (split && rangeRef) {\n          range = Range.intersection(rangeRef.current!, range)!\n        }\n\n        Transforms.liftNodes(editor, {\n          at: range,\n          match: n => node.children.includes(n),\n          voids,\n        })\n      }\n\n      if (rangeRef) {\n        rangeRef.unref()\n      }\n    })\n  },\n\n  /**\n   * Wrap the nodes at a location in a new container node, splitting the edges\n   * of the range first to ensure that only the content in the range is wrapped.\n   */\n\n  wrapNodes(\n    editor: Editor,\n    element: Element,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', split = false, voids = false } = options\n      let { match, at = editor.selection } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          match = matchPath(editor, at)\n        } else if (editor.isInline(element)) {\n          match = n => Editor.isInline(editor, n) || Text.isText(n)\n        } else {\n          match = n => Editor.isBlock(editor, n)\n        }\n      }\n\n      if (split && Range.isRange(at)) {\n        const [start, end] = Range.edges(at)\n        const rangeRef = Editor.rangeRef(editor, at, {\n          affinity: 'inward',\n        })\n        Transforms.splitNodes(editor, { at: end, match, voids })\n        Transforms.splitNodes(editor, { at: start, match, voids })\n        at = rangeRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n\n      const roots = Array.from(\n        Editor.nodes(editor, {\n          at,\n          match: editor.isInline(element)\n            ? n => Editor.isBlock(editor, n)\n            : n => Editor.isEditor(n),\n          mode: 'lowest',\n          voids,\n        })\n      )\n\n      for (const [, rootPath] of roots) {\n        const a = Range.isRange(at)\n          ? Range.intersection(at, Editor.range(editor, rootPath))\n          : at\n\n        if (!a) {\n          continue\n        }\n\n        const matches = Array.from(\n          Editor.nodes(editor, { at: a, match, mode, voids })\n        )\n\n        if (matches.length > 0) {\n          const [first] = matches\n          const last = matches[matches.length - 1]\n          const [, firstPath] = first\n          const [, lastPath] = last\n          const commonPath = Path.equals(firstPath, lastPath)\n            ? Path.parent(firstPath)\n            : Path.common(firstPath, lastPath)\n\n          const range = Editor.range(editor, firstPath, lastPath)\n          const commonNodeEntry = Editor.node(editor, commonPath)\n          const [commonNode] = commonNodeEntry as NodeEntry<Ancestor>\n          const depth = commonPath.length + 1\n          const wrapperPath = Path.next(lastPath.slice(0, depth))\n          const wrapper = { ...element, children: [] }\n          Transforms.insertNodes(editor, wrapper, { at: wrapperPath, voids })\n\n          Transforms.moveNodes(editor, {\n            at: range,\n            match: n => commonNode.children.includes(n),\n            to: wrapperPath.concat(0),\n            voids,\n          })\n        }\n      }\n    })\n  },\n}\n\n/**\n * Convert a range into a point by deleting it's content.\n */\n\nconst deleteRange = (editor: Editor, range: Range): Point | null => {\n  if (Range.isCollapsed(range)) {\n    return range.anchor\n  } else {\n    const [, end] = Range.edges(range)\n    const pointRef = Editor.pointRef(editor, end)\n    Transforms.delete(editor, { at: range })\n    return pointRef.unref()\n  }\n}\n\nconst matchPath = (editor: Editor, path: Path): ((node: Node) => boolean) => {\n  const [node] = Editor.node(editor, path)\n  return n => n === node\n}\n","import { Editor, Location, Point, Range, Transforms } from '..'\n\nexport const SelectionTransforms = {\n  /**\n   * Collapse the selection.\n   */\n\n  collapse(\n    editor: Editor,\n    options: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ) {\n    const { edge = 'anchor' } = options\n    const { selection } = editor\n\n    if (!selection) {\n      return\n    } else if (edge === 'anchor') {\n      Transforms.select(editor, selection.anchor)\n    } else if (edge === 'focus') {\n      Transforms.select(editor, selection.focus)\n    } else if (edge === 'start') {\n      const [start] = Range.edges(selection)\n      Transforms.select(editor, start)\n    } else if (edge === 'end') {\n      const [, end] = Range.edges(selection)\n      Transforms.select(editor, end)\n    }\n  },\n\n  /**\n   * Unset the selection.\n   */\n\n  deselect(editor: Editor) {\n    const { selection } = editor\n\n    if (selection) {\n      editor.apply({\n        type: 'set_selection',\n        properties: selection,\n        newProperties: null,\n      })\n    }\n  },\n\n  /**\n   * Move the selection's point forward or backward.\n   */\n\n  move(\n    editor: Editor,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line'\n      reverse?: boolean\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ) {\n    const { selection } = editor\n    const { distance = 1, unit = 'character', reverse = false } = options\n    let { edge = null } = options\n\n    if (!selection) {\n      return\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n    }\n\n    const { anchor, focus } = selection\n    const opts = { distance, unit }\n    const props: Partial<Range> = {}\n\n    if (edge == null || edge === 'anchor') {\n      const point = reverse\n        ? Editor.before(editor, anchor, opts)\n        : Editor.after(editor, anchor, opts)\n\n      if (point) {\n        props.anchor = point\n      }\n    }\n\n    if (edge == null || edge === 'focus') {\n      const point = reverse\n        ? Editor.before(editor, focus, opts)\n        : Editor.after(editor, focus, opts)\n\n      if (point) {\n        props.focus = point\n      }\n    }\n\n    Transforms.setSelection(editor, props)\n  },\n\n  /**\n   * Set the selection to a new value.\n   */\n\n  select(editor: Editor, target: Location) {\n    const { selection } = editor\n    target = Editor.range(editor, target)\n\n    if (selection) {\n      Transforms.setSelection(editor, target)\n      return\n    }\n\n    if (!Range.isRange(target)) {\n      throw new Error(\n        `When setting the selection and the current selection is \\`null\\` you must provide at least an \\`anchor\\` and \\`focus\\`, but you passed: ${JSON.stringify(\n          target\n        )}`\n      )\n    }\n\n    editor.apply({\n      type: 'set_selection',\n      properties: selection,\n      newProperties: target,\n    })\n  },\n\n  /**\n   * Set new properties on one of the selection's points.\n   */\n\n  setPoint(\n    editor: Editor,\n    props: Partial<Point>,\n    options: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    }\n  ) {\n    const { selection } = editor\n    let { edge = 'both' } = options\n\n    if (!selection) {\n      return\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n    }\n\n    const { anchor, focus } = selection\n    const point = edge === 'anchor' ? anchor : focus\n\n    Transforms.setSelection(editor, {\n      [edge === 'anchor' ? 'anchor' : 'focus']: { ...point, ...props },\n    })\n  },\n\n  /**\n   * Set new properties on the selection.\n   */\n\n  setSelection(editor: Editor, props: Partial<Range>) {\n    const { selection } = editor\n    const oldProps: Partial<Range> | null = {}\n    const newProps: Partial<Range> = {}\n\n    if (!selection) {\n      return\n    }\n\n    for (const k in props) {\n      if (\n        (k === 'anchor' &&\n          props.anchor != null &&\n          !Point.equals(props.anchor, selection.anchor)) ||\n        (k === 'focus' &&\n          props.focus != null &&\n          !Point.equals(props.focus, selection.focus)) ||\n        (k !== 'anchor' && k !== 'focus' && props[k] !== selection[k])\n      ) {\n        oldProps[k] = selection[k]\n        newProps[k] = props[k]\n      }\n    }\n\n    if (Object.keys(oldProps).length > 0) {\n      editor.apply({\n        type: 'set_selection',\n        properties: oldProps,\n        newProperties: newProps,\n      })\n    }\n  },\n}\n","import {\n  Editor,\n  Element,\n  Location,\n  Node,\n  NodeEntry,\n  Path,\n  Text,\n  Point,\n  Range,\n  Transforms,\n} from '..'\n\nexport const TextTransforms = {\n  /**\n   * Delete content in the editor.\n   */\n\n  delete(\n    editor: Editor,\n    options: {\n      at?: Location\n      distance?: number\n      unit?: 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const {\n        reverse = false,\n        unit = 'character',\n        distance = 1,\n        voids = false,\n      } = options\n      let { at = editor.selection, hanging = false } = options\n\n      if (!at) {\n        return\n      }\n\n      if (Range.isRange(at) && Range.isCollapsed(at)) {\n        at = at.anchor\n      }\n\n      if (Point.isPoint(at)) {\n        const furthestVoid = Editor.void(editor, { at, mode: 'highest' })\n\n        if (!voids && furthestVoid) {\n          const [, voidPath] = furthestVoid\n          at = voidPath\n        } else {\n          const opts = { unit, distance }\n          const target = reverse\n            ? Editor.before(editor, at, opts) || Editor.start(editor, [])\n            : Editor.after(editor, at, opts) || Editor.end(editor, [])\n          at = { anchor: at, focus: target }\n          hanging = true\n        }\n      }\n\n      if (Path.isPath(at)) {\n        Transforms.removeNodes(editor, { at, voids })\n        return\n      }\n\n      if (Range.isCollapsed(at)) {\n        return\n      }\n\n      if (!hanging) {\n        at = Editor.unhangRange(editor, at, { voids })\n      }\n\n      let [start, end] = Range.edges(at)\n      const startBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: start,\n        voids,\n      })\n      const endBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: end,\n        voids,\n      })\n      const isAcrossBlocks =\n        startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1])\n      const isSingleText = Path.equals(start.path, end.path)\n      const startVoid = voids\n        ? null\n        : Editor.void(editor, { at: start, mode: 'highest' })\n      const endVoid = voids\n        ? null\n        : Editor.void(editor, { at: end, mode: 'highest' })\n\n      // If the start or end points are inside an inline void, nudge them out.\n      if (startVoid) {\n        const before = Editor.before(editor, start)\n\n        if (\n          before &&\n          startBlock &&\n          Path.isAncestor(startBlock[1], before.path)\n        ) {\n          start = before\n        }\n      }\n\n      if (endVoid) {\n        const after = Editor.after(editor, end)\n\n        if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n          end = after\n        }\n      }\n\n      // Get the highest nodes that are completely inside the range, as well as\n      // the start and end nodes.\n      const matches: NodeEntry[] = []\n      let lastPath: Path | undefined\n\n      for (const entry of Editor.nodes(editor, { at, voids })) {\n        const [node, path] = entry\n\n        if (lastPath && Path.compare(path, lastPath) === 0) {\n          continue\n        }\n\n        if (\n          (!voids && Editor.isVoid(editor, node)) ||\n          (!Path.isCommon(path, start.path) && !Path.isCommon(path, end.path))\n        ) {\n          matches.push(entry)\n          lastPath = path\n        }\n      }\n\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n      const startRef = Editor.pointRef(editor, start)\n      const endRef = Editor.pointRef(editor, end)\n\n      if (!isSingleText && !startVoid) {\n        const point = startRef.current!\n        const [node] = Editor.leaf(editor, point)\n        const { path } = point\n        const { offset } = start\n        const text = node.text.slice(offset)\n        editor.apply({ type: 'remove_text', path, offset, text })\n      }\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        Transforms.removeNodes(editor, { at: path, voids })\n      }\n\n      if (!endVoid) {\n        const point = endRef.current!\n        const [node] = Editor.leaf(editor, point)\n        const { path } = point\n        const offset = isSingleText ? start.offset : 0\n        const text = node.text.slice(offset, end.offset)\n        editor.apply({ type: 'remove_text', path, offset, text })\n      }\n\n      if (\n        !isSingleText &&\n        isAcrossBlocks &&\n        endRef.current &&\n        startRef.current\n      ) {\n        Transforms.mergeNodes(editor, {\n          at: endRef.current,\n          hanging: true,\n          voids,\n        })\n      }\n\n      const point = endRef.unref() || startRef.unref()\n\n      if (options.at == null && point) {\n        Transforms.select(editor, point)\n      }\n    })\n  },\n\n  /**\n   * Insert a fragment at a specific location in the editor.\n   */\n\n  insertFragment(\n    editor: Editor,\n    fragment: Node[],\n    options: {\n      at?: Location\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false } = options\n      let { at = editor.selection } = options\n\n      if (!fragment.length) {\n        return\n      }\n\n      if (!at) {\n        return\n      } else if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at)\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n        }\n      } else if (Path.isPath(at)) {\n        at = Editor.start(editor, at)\n      }\n\n      if (!voids && Editor.void(editor, { at })) {\n        return\n      }\n\n      // If the insert point is at the edge of an inline node, move it outside\n      // instead since it will need to be split otherwise.\n      const inlineElementMatch = Editor.above(editor, {\n        at,\n        match: n => Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      if (inlineElementMatch) {\n        const [, inlinePath] = inlineElementMatch\n\n        if (Editor.isEnd(editor, at, inlinePath)) {\n          const after = Editor.after(editor, inlinePath)!\n          at = after\n        } else if (Editor.isStart(editor, at, inlinePath)) {\n          const before = Editor.before(editor, inlinePath)!\n          at = before\n        }\n      }\n\n      const blockMatch = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at,\n        voids,\n      })!\n      const [, blockPath] = blockMatch\n      const isBlockStart = Editor.isStart(editor, at, blockPath)\n      const isBlockEnd = Editor.isEnd(editor, at, blockPath)\n      const mergeStart = !isBlockStart || (isBlockStart && isBlockEnd)\n      const mergeEnd = !isBlockEnd\n      const [, firstPath] = Node.first({ children: fragment }, [])\n      const [, lastPath] = Node.last({ children: fragment }, [])\n\n      const matches: NodeEntry[] = []\n      const matcher = ([n, p]: NodeEntry) => {\n        if (\n          mergeStart &&\n          Path.isAncestor(p, firstPath) &&\n          Element.isElement(n) &&\n          !editor.isVoid(n) &&\n          !editor.isInline(n)\n        ) {\n          return false\n        }\n\n        if (\n          mergeEnd &&\n          Path.isAncestor(p, lastPath) &&\n          Element.isElement(n) &&\n          !editor.isVoid(n) &&\n          !editor.isInline(n)\n        ) {\n          return false\n        }\n\n        return true\n      }\n\n      for (const entry of Node.nodes(\n        { children: fragment },\n        { pass: matcher }\n      )) {\n        if (entry[1].length > 0 && matcher(entry)) {\n          matches.push(entry)\n        }\n      }\n\n      const starts = []\n      const middles = []\n      const ends = []\n      let starting = true\n      let hasBlocks = false\n\n      for (const [node] of matches) {\n        if (Element.isElement(node) && !editor.isInline(node)) {\n          starting = false\n          hasBlocks = true\n          middles.push(node)\n        } else if (starting) {\n          starts.push(node)\n        } else {\n          ends.push(node)\n        }\n      }\n\n      const [inlineMatch] = Editor.nodes(editor, {\n        at,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })!\n\n      const [, inlinePath] = inlineMatch\n      const isInlineStart = Editor.isStart(editor, at, inlinePath)\n      const isInlineEnd = Editor.isEnd(editor, at, inlinePath)\n\n      const middleRef = Editor.pathRef(\n        editor,\n        isBlockEnd ? Path.next(blockPath) : blockPath\n      )\n\n      const endRef = Editor.pathRef(\n        editor,\n        isInlineEnd ? Path.next(inlinePath) : inlinePath\n      )\n\n      Transforms.splitNodes(editor, {\n        at,\n        match: n =>\n          hasBlocks\n            ? Editor.isBlock(editor, n)\n            : Text.isText(n) || Editor.isInline(editor, n),\n        mode: hasBlocks ? 'lowest' : 'highest',\n        voids,\n      })\n\n      const startRef = Editor.pathRef(\n        editor,\n        !isInlineStart || (isInlineStart && isInlineEnd)\n          ? Path.next(inlinePath)\n          : inlinePath\n      )\n\n      Transforms.insertNodes(editor, starts, {\n        at: startRef.current!,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      Transforms.insertNodes(editor, middles, {\n        at: middleRef.current!,\n        match: n => Editor.isBlock(editor, n),\n        mode: 'lowest',\n        voids,\n      })\n\n      Transforms.insertNodes(editor, ends, {\n        at: endRef.current!,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      if (!options.at) {\n        let path\n\n        if (ends.length > 0) {\n          path = Path.previous(endRef.current!)\n        } else if (middles.length > 0) {\n          path = Path.previous(middleRef.current!)\n        } else {\n          path = Path.previous(startRef.current!)\n        }\n\n        const end = Editor.end(editor, path)\n        Transforms.select(editor, end)\n      }\n\n      startRef.unref()\n      middleRef.unref()\n      endRef.unref()\n    })\n  },\n\n  /**\n   * Insert a string of text in the Editor.\n   */\n\n  insertText(\n    editor: Editor,\n    text: string,\n    options: {\n      at?: Location\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { voids = false } = options\n      let { at = editor.selection } = options\n\n      if (!at) {\n        return\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const end = Range.end(at)\n\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at, voids })\n          at = pointRef.unref()!\n          Transforms.setSelection(editor, { anchor: at, focus: at })\n        }\n      }\n\n      if (!voids && Editor.void(editor, { at })) {\n        return\n      }\n\n      const { path, offset } = at\n      editor.apply({ type: 'insert_text', path, offset, text })\n    })\n  },\n}\n","import { GeneralTransforms } from './general'\nimport { NodeTransforms } from './node'\nimport { SelectionTransforms } from './selection'\nimport { TextTransforms } from './text'\n\nexport const Transforms = {\n  ...GeneralTransforms,\n  ...NodeTransforms,\n  ...SelectionTransforms,\n  ...TextTransforms,\n}\n"],"names":["DIRTY_PATHS","WeakMap","FLUSHING","NORMALIZING","PATH_REFS","POINT_REFS","RANGE_REFS","createEditor","editor","children","operations","selection","marks","isInline","isVoid","onChange","apply","op","ref","Editor","pathRefs","PathRef","transform","pointRefs","PointRef","rangeRefs","RangeRef","set","Set","dirtyPaths","add","path","key","join","has","push","oldDirtyPaths","get","newDirtyPaths","getDirtyPaths","newPath","Path","Transforms","normalize","type","Promise","resolve","then","addMark","value","Range","isExpanded","setNodes","match","Text","isText","split","deleteBackward","unit","isCollapsed","delete","reverse","deleteForward","deleteFragment","getFragment","Node","fragment","insertBreak","splitNodes","always","insertFragment","insertNode","node","insertNodes","insertText","text","inline","above","n","mode","inlinePath","isEnd","anchor","point","after","setSelection","focus","normalizeNode","entry","Element","isElement","length","child","at","concat","voids","shouldHaveInlines","isEditor","i","prev","isLast","isInlineOrText","removeNodes","newChild","equals","loose","mergeNodes","removeMark","unsetNodes","levels","descendants","Array","from","nodes","p","ancestors","previousPath","previous","oldAncestors","newAncestors","ancestor","nextPath","next","objectWithoutPropertiesLoose","SPACE","PUNCTUATION","CHAMELEON","SURROGATE_START","SURROGATE_END","ZERO_WIDTH_JOINER","getCharacterDistance","offset","charCode","charCodeAt","isSurrogate","modifier","isModifier","isBMPEmoji","isVariationSelector","getWordDistance","started","char","charAt","l","slice","rest","isWordCharacter","remaining","test","code","options","edge","end","range","distance","d","target","positions","before","start","edges","first","hasBlocks","element","some","isBlock","hasInlines","hasTexts","every","isPlainObject","isRange","isNodeList","Operation","isOperationList","Point","isEdge","isStart","isEmpty","isNormalizing","undefined","last","leaf","block","prevNode","prevPath","blockPath","isAncestor","to","span","isPath","Error","parent","includes","universal","Span","isSpan","nodeEntries","pass","matches","hit","isLower","compare","emit","force","allPaths","withoutNormalizing","max","m","dirtyPath","pop","parentPath","depth","firstPath","lastPath","common","isPoint","pathRef","affinity","current","unref","refs","pointRef","string","available","isNewBlock","advance","e","s","reverseText","isFirst","rangeRef","t","unhangRange","endBlock","skip","isBefore","void","fn","isElementList","isArray","props","Location","isLocation","root","index","JSON","stringify","c","childPath","another","descendant","elements","newRoot","produce","r","splice","isNode","visited","isAfter","nextIndex","map","texts","isNodeOperation","isOperation","endsWith","position","properties","newProperties","isSelectionOperation","isTextOperation","inverse","isSibling","inversePath","inverseNewPath","paths","av","bv","min","Math","endsAfter","as","bs","endsAt","endsBefore","hasPrevious","isChild","isCommon","isDescendant","isParent","al","bl","list","relative","operation","onp","copy","result","isBackward","rs","re","ts","te","isAfterStart","isBeforeEnd","intersection","s1","e1","s2","e2","isForward","points","affinityAnchor","affinityFocus","isTextList","decorations","leaves","dec","o","Object","assign","middle","off","GeneralTransforms","createDraft","truePath","newParent","newIndex","newNode","finishDraft","isDraft","NodeTransforms","hanging","select","matchPath","isAtEnd","liftNodes","parentNodeEntry","toPath","moveNodes","splitPath","commonPath","isPreviousSibling","emptyAncestor","emptyRef","toRef","targets","depths","splitMode","k","keys","height","deleteRange","beforeRef","highest","voidMatch","nudge","voidNode","voidPath","afterPath","siblingHeight","afterRef","highestPath","lowestPath","obj","unwrapNodes","wrapNodes","roots","rootPath","a","commonNodeEntry","commonNode","wrapperPath","wrapper","SelectionTransforms","collapse","deselect","move","opts","setPoint","oldProps","newProps","TextTransforms","furthestVoid","startBlock","isAcrossBlocks","isSingleText","startVoid","endVoid","startRef","endRef","inlineElementMatch","blockMatch","isBlockStart","isBlockEnd","mergeStart","mergeEnd","matcher","starts","middles","ends","starting","inlineMatch","isInlineStart","isInlineEnd","middleRef"],"mappings":"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"}